
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQUALSDIFFleftGTGETLTLETleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CCOMMENT CCONST CHAR COMMA CPPCOMMENT DASSIGN DIFF DIVIDE ELSE EQUALS ERROR FCONST FLOAT FOR GET GT ICONST ID IF INT LBRACE LBRACK LET LPAREN LT MINASSIGN MINUS MM MOD MODASSIGN NOT OR PASSIGN PLUS PP PRINT RBRACE RBRACK READ RETURN RPAREN SEMI STRING_LITERAL TASSIGN TIMES UNMATCHEDQUOTE UNTERMCOMMENT VOID WHILEempty :  program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration\n         function_definition : type_specifier declarator declaration_list_opt compound_statement  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declarator : pointer direct_declarator\n                        | direct_declarator\n         pointer : TIMES pointer_opt\n        pointer_opt : pointer\n                      | empty\n         direct_declarator : ID\n                      | LPAREN declarator RPAREN\n                      | direct_declarator LBRACK constant_expression_opt RBRACK\n                      | direct_declarator LPAREN parameter_list RPAREN\n                      | direct_declarator LPAREN identifier_list_opt RPAREN\n         constant_expression : expr  constant_expression_opt : constant_expression\n                                    | empty\n         identifier_list : identifier_list ID\n                            | ID\n         identifier_list_opt : identifier_list\n                                | empty\n        \n        expr :  cast_expression\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr EQUALS expr\n                | expr MOD expr\n                | expr GT expr\n                | expr GET expr\n                | expr LT expr\n                | expr LET expr\n                | expr DIFF expr\n                | expr AND expr\n                | expr OR expr\n        \n        cast_expression : unary_expression\n                        | LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                         | unary_operator cast_expression\n        unary_expression : PP unary_expression  \n        unary_expression : MM unary_expression\n        \n        postfix_expression : primary_expression\n                           | postfix_expression LBRACK expression RBRACK\n                           | postfix_expression LPAREN argument_expression RPAREN\n                           | postfix_expression LPAREN RPAREN\n\n        \n        primary_expression : ID\n        \n        primary_expression : constant\n        \n        primary_expression : STRING_LITERAL\n        \n        primary_expression : LPAREN expression RPAREN\n         constant : ICONST\n         constant : FCONST\n         expression : assignment_expression\n                        | assignment_expression COMMA expression\n         expression_opt : expression\n                            | empty\n        assignment_expression : expr\n                            | unary_expression assignment_operator assignment_expression\n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n         assignment_operator : ASSIGN\n                                | TASSIGN\n                                | DASSIGN\n                                | MODASSIGN\n                                | PASSIGN\n                                | MINASSIGN\n        unary_operator : ADDRESS\n                          | TIMES\n                          | PLUS\n                          | MINUS\n                          | NOT\n        parameter_list : parameter_declaration\n                          | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n        declaration : type_specifier init_declarator_list SEMI\n         declaration_list : declaration\n                    | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                | empty\n        init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                | init_declarator_list COMMA init_declarator\n        initializer : assignment_expression\n                    | LBRACE initializer_list RBRACE\n                    | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n        compound_statement : LBRACE declaration_list_opt statement_list_opt RBRACE\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n            selection_statement : IF LPAREN expression RPAREN statement\n                                    | IF LPAREN expression RPAREN statement ELSE statement\n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                    | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                    | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        jump_statement : BREAK SEMI\n                        | RETURN expression_opt SEMI\n         assert_statement : ASSERT expr SEMI  print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        read_statement : READ LPAREN argument_expression RPAREN SEMI statement_list : statement_list statement\n                    | statement\n         statement_list_opt : statement_list\n                                | empty\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,107,108,109,110,159,165,],[7,7,-3,-5,-6,-4,7,-13,-17,7,-82,-81,-12,7,-7,7,7,-83,-18,-19,-20,7,-21,-95,7,]),'CHAR':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,107,108,109,110,159,165,],[8,8,-3,-5,-6,-4,8,-13,-17,8,-82,-81,-12,8,-7,8,8,-83,-18,-19,-20,8,-21,-95,8,]),'INT':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,107,108,109,110,159,165,],[9,9,-3,-5,-6,-4,9,-13,-17,9,-82,-81,-12,9,-7,9,9,-83,-18,-19,-20,9,-21,-95,9,]),'FLOAT':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,107,108,109,110,159,165,],[10,10,-3,-5,-6,-4,10,-13,-17,10,-82,-81,-12,10,-7,10,10,-83,-18,-19,-20,10,-21,-95,10,]),'$end':([1,2,3,4,5,11,26,36,159,],[0,-2,-3,-5,-6,-4,-81,-7,-95,]),'TIMES':([6,7,8,9,10,17,19,20,22,23,24,25,26,27,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,72,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,117,118,119,120,121,122,123,124,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,155,156,157,159,160,162,163,164,165,166,168,169,170,173,174,175,176,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[17,-8,-9,-10,-11,17,17,17,46,-84,-85,-82,-81,17,46,-1,46,80,-43,-29,-75,-76,-74,-45,46,46,46,46,-49,-73,-77,-53,-54,-55,-57,-58,-83,80,-43,17,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-67,-68,-69,-70,-71,-72,46,46,-46,-47,46,-48,46,-116,-96,-97,-98,-99,-100,-101,-102,-103,46,46,46,80,80,-32,-33,80,-35,80,80,80,80,80,80,80,-52,46,-56,46,-95,-115,-104,46,46,46,-110,80,46,46,-50,-51,46,-44,46,-111,-112,46,46,46,-105,-107,46,-113,-114,46,46,-106,46,46,-109,-108,]),'ID':([6,7,8,9,10,14,17,19,20,22,23,24,25,26,27,29,30,31,32,33,37,40,44,45,46,48,49,50,51,53,54,60,70,72,73,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,111,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[18,-8,-9,-10,-11,18,-1,18,18,55,-84,-85,-82,-81,18,55,73,-14,-15,-16,-1,55,-75,-76,-74,55,55,55,55,-73,-77,-83,111,18,-26,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-67,-68,-69,-70,-71,-72,55,55,55,-25,55,-116,-96,-97,-98,-99,-100,-101,-102,-103,55,55,55,55,55,-95,-115,-104,55,55,55,-110,55,55,55,55,-111,-112,55,55,55,-105,-107,55,-113,-114,55,55,-106,55,55,-109,-108,]),'LPAREN':([6,7,8,9,10,14,15,17,18,19,20,22,23,24,25,26,27,28,29,31,32,33,37,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,72,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,107,108,110,114,116,117,118,119,120,121,122,123,124,126,128,129,131,132,133,134,136,153,155,156,157,159,160,162,163,164,165,166,169,170,173,174,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[19,-8,-9,-10,-11,19,30,-1,-17,19,19,51,-84,-85,-82,-81,19,30,51,-14,-15,-16,-1,51,-75,-76,-74,99,51,102,102,51,-49,-73,-77,-53,-54,-55,-57,-58,-83,19,-18,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-67,-68,-69,-70,-71,-72,51,51,51,-19,-20,-21,51,-116,-96,-97,-98,-99,-100,-101,-102,-103,163,164,165,51,51,169,170,51,-52,51,-56,51,-95,-115,-104,51,51,51,-110,51,51,-50,-51,51,51,-111,-112,51,51,51,-105,-107,51,-113,-114,51,51,-106,51,51,-109,-108,]),'RPAREN':([7,8,9,10,15,18,28,30,34,41,42,43,47,52,55,56,57,58,59,66,67,68,69,70,71,73,74,99,100,101,103,104,105,106,107,108,110,111,112,127,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,156,158,161,169,173,174,176,177,178,179,184,185,186,196,200,201,203,],[-8,-9,-10,-11,-13,-17,-12,-1,74,-63,-43,-29,-45,-49,-53,-54,-55,-57,-58,-43,108,110,-78,-27,-28,-26,-18,153,-46,-47,-48,155,156,-59,-19,-20,-21,-25,-80,-61,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-64,174,-52,-65,-56,-79,-62,-1,-50,-51,-44,-60,187,188,191,192,-66,-1,-1,204,205,]),'SEMI':([12,13,15,16,18,23,24,25,26,28,35,37,38,39,41,42,43,47,52,55,56,57,58,59,60,61,66,74,75,100,101,103,106,107,108,110,114,115,116,117,118,119,120,121,122,123,124,125,127,130,131,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,156,159,160,161,162,165,166,167,168,171,173,174,176,177,180,181,182,183,187,188,189,190,191,192,193,194,195,197,198,199,202,204,205,206,207,],[-86,26,-13,-88,-17,-84,-85,-82,-81,-12,-86,-1,-87,-90,-63,-43,-29,-45,-49,-53,-54,-55,-57,-58,-83,-89,-43,-18,-1,-46,-47,-48,-59,-19,-20,-21,-1,-62,-116,-96,-97,-98,-99,-100,-101,-102,-103,162,-61,166,-1,-91,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-64,-52,-56,-95,-115,-62,-104,-1,-110,182,183,-92,-50,-51,-44,-60,189,-1,-111,-112,-1,-1,-1,196,197,198,-105,-107,200,-113,-114,-1,-106,-1,-1,-109,-108,]),'COMMA':([12,13,15,16,18,28,35,38,39,41,42,43,47,52,55,56,57,58,59,61,66,67,69,74,76,77,100,101,103,106,107,108,110,112,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,154,156,158,171,172,173,174,176,185,186,],[-86,27,-13,-88,-17,-12,-86,-87,-90,-63,-43,-29,-45,-49,-53,-54,-55,-57,-58,-89,-43,109,-78,-18,136,-93,-46,-47,-48,157,-19,-20,-21,-80,-91,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-64,175,-52,-65,-56,-79,-92,-94,-50,-51,-44,175,-66,]),'ASSIGN':([12,15,18,28,35,42,47,52,55,56,57,58,59,66,74,100,101,103,107,108,110,153,156,173,174,176,],[22,-13,-17,-12,22,92,-45,-49,-53,-54,-55,-57,-58,-43,-18,-46,-47,-48,-19,-20,-21,-52,-56,-50,-51,-44,]),'LBRACE':([12,15,18,21,22,23,24,25,26,28,37,40,60,74,75,107,108,110,114,116,117,118,119,120,121,122,123,124,136,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-1,-13,-17,37,40,-84,-85,-82,-81,-12,-1,40,-83,-18,37,-19,-20,-21,37,-116,-96,-97,-98,-99,-100,-101,-102,-103,40,-95,-115,-104,-110,-111,-112,37,37,-105,-107,-113,-114,37,-106,37,37,-109,-108,]),'LBRACK':([15,18,28,47,52,55,56,57,58,59,74,107,108,110,153,156,173,174,],[29,-17,29,98,-49,-53,-54,-55,-57,-58,-18,-19,-20,-21,-52,-56,-50,-51,]),'PP':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[49,-84,-85,-82,-81,49,-1,49,-75,-76,-74,49,49,49,49,-73,-77,-83,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-67,-68,-69,-70,-71,-72,49,49,49,49,-116,-96,-97,-98,-99,-100,-101,-102,-103,49,49,49,49,49,-95,-115,-104,49,49,49,-110,49,49,49,49,-111,-112,49,49,49,-105,-107,49,-113,-114,49,49,-106,49,49,-109,-108,]),'MM':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[50,-84,-85,-82,-81,50,-1,50,-75,-76,-74,50,50,50,50,-73,-77,-83,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-67,-68,-69,-70,-71,-72,50,50,50,50,-116,-96,-97,-98,-99,-100,-101,-102,-103,50,50,50,50,50,-95,-115,-104,50,50,50,-110,50,50,50,50,-111,-112,50,50,50,-105,-107,50,-113,-114,50,50,-106,50,50,-109,-108,]),'ADDRESS':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[53,-84,-85,-82,-81,53,-1,53,-75,-76,-74,53,53,53,53,-73,-77,-83,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-67,-68,-69,-70,-71,-72,53,53,53,53,-116,-96,-97,-98,-99,-100,-101,-102,-103,53,53,53,53,53,-95,-115,-104,53,53,53,-110,53,53,53,53,-111,-112,53,53,53,-105,-107,53,-113,-114,53,53,-106,53,53,-109,-108,]),'PLUS':([22,23,24,25,26,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,117,118,119,120,121,122,123,124,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,155,156,157,159,160,162,163,164,165,166,168,169,170,173,174,175,176,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[44,-84,-85,-82,-81,44,-1,44,78,-43,-29,-75,-76,-74,-45,44,44,44,44,-49,-73,-77,-53,-54,-55,-57,-58,-83,78,-43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-67,-68,-69,-70,-71,-72,44,44,-46,-47,44,-48,44,-116,-96,-97,-98,-99,-100,-101,-102,-103,44,44,44,-30,-31,-32,-33,78,-35,78,78,78,78,78,78,78,-52,44,-56,44,-95,-115,-104,44,44,44,-110,78,44,44,-50,-51,44,-44,44,-111,-112,44,44,44,-105,-107,44,-113,-114,44,44,-106,44,44,-109,-108,]),'MINUS':([22,23,24,25,26,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,114,116,117,118,119,120,121,122,123,124,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,155,156,157,159,160,162,163,164,165,166,168,169,170,173,174,175,176,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[45,-84,-85,-82,-81,45,-1,45,79,-43,-29,-75,-76,-74,-45,45,45,45,45,-49,-73,-77,-53,-54,-55,-57,-58,-83,79,-43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-67,-68,-69,-70,-71,-72,45,45,-46,-47,45,-48,45,-116,-96,-97,-98,-99,-100,-101,-102,-103,45,45,45,-30,-31,-32,-33,79,-35,79,79,79,79,79,79,79,-52,45,-56,45,-95,-115,-104,45,45,45,-110,79,45,45,-50,-51,45,-44,45,-111,-112,45,45,45,-105,-107,45,-113,-114,45,45,-106,45,45,-109,-108,]),'NOT':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[54,-84,-85,-82,-81,54,-1,54,-75,-76,-74,54,54,54,54,-73,-77,-83,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-67,-68,-69,-70,-71,-72,54,54,54,54,-116,-96,-97,-98,-99,-100,-101,-102,-103,54,54,54,54,54,-95,-115,-104,54,54,54,-110,54,54,54,54,-111,-112,54,54,54,-105,-107,54,-113,-114,54,54,-106,54,54,-109,-108,]),'STRING_LITERAL':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[57,-84,-85,-82,-81,57,-1,57,-75,-76,-74,57,57,57,57,-73,-77,-83,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-67,-68,-69,-70,-71,-72,57,57,57,57,-116,-96,-97,-98,-99,-100,-101,-102,-103,57,57,57,57,57,-95,-115,-104,57,57,57,-110,57,57,57,57,-111,-112,57,57,57,-105,-107,57,-113,-114,57,57,-106,57,57,-109,-108,]),'ICONST':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[58,-84,-85,-82,-81,58,-1,58,-75,-76,-74,58,58,58,58,-73,-77,-83,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-67,-68,-69,-70,-71,-72,58,58,58,58,-116,-96,-97,-98,-99,-100,-101,-102,-103,58,58,58,58,58,-95,-115,-104,58,58,58,-110,58,58,58,58,-111,-112,58,58,58,-105,-107,58,-113,-114,58,58,-106,58,58,-109,-108,]),'FCONST':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,114,116,117,118,119,120,121,122,123,124,131,132,136,155,157,159,160,162,163,164,165,166,169,170,175,181,182,183,187,188,189,193,194,196,197,198,199,200,202,204,205,206,207,],[59,-84,-85,-82,-81,59,-1,59,-75,-76,-74,59,59,59,59,-73,-77,-83,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-67,-68,-69,-70,-71,-72,59,59,59,59,-116,-96,-97,-98,-99,-100,-101,-102,-103,59,59,59,59,59,-95,-115,-104,59,59,59,-110,59,59,59,59,-111,-112,59,59,59,-105,-107,59,-113,-114,59,59,-106,59,59,-109,-108,]),'IF':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,126,126,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,126,126,-105,-107,-113,-114,126,-106,126,126,-109,-108,]),'WHILE':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,128,128,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,128,128,-105,-107,-113,-114,128,-106,128,128,-109,-108,]),'FOR':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,129,129,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,129,129,-105,-107,-113,-114,129,-106,129,129,-109,-108,]),'BREAK':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,130,130,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,130,130,-105,-107,-113,-114,130,-106,130,130,-109,-108,]),'RETURN':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,131,131,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,131,131,-105,-107,-113,-114,131,-106,131,131,-109,-108,]),'ASSERT':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,132,132,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,132,132,-105,-107,-113,-114,132,-106,132,132,-109,-108,]),'PRINT':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,133,133,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,133,133,-105,-107,-113,-114,133,-106,133,133,-109,-108,]),'READ':([23,24,25,26,37,60,75,114,116,117,118,119,120,121,122,123,124,159,160,162,166,182,183,187,188,193,194,197,198,199,202,204,205,206,207,],[-84,-85,-82,-81,-1,-83,134,134,-116,-96,-97,-98,-99,-100,-101,-102,-103,-95,-115,-104,-110,-111,-112,134,134,-105,-107,-113,-114,134,-106,134,134,-109,-108,]),'RBRACE':([23,24,25,26,37,39,41,42,43,47,52,55,56,57,58,59,60,66,75,76,77,100,101,103,113,114,115,116,117,118,119,120,121,122,123,124,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,156,159,160,162,166,171,172,173,174,176,182,183,193,194,197,198,202,206,207,],[-84,-85,-82,-81,-1,-90,-63,-43,-29,-45,-49,-53,-54,-55,-57,-58,-83,-43,-1,135,-93,-46,-47,-48,159,-117,-118,-116,-96,-97,-98,-99,-100,-101,-102,-103,-91,171,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-64,-52,-56,-95,-115,-104,-110,-92,-94,-50,-51,-44,-111,-112,-105,-107,-113,-114,-106,-109,-108,]),'RBRACK':([29,41,42,43,47,52,55,56,57,58,59,62,63,64,65,66,100,101,103,106,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,156,173,174,176,177,],[-1,-63,-43,-29,-45,-49,-53,-54,-55,-57,-58,107,-23,-24,-22,-43,-46,-47,-48,-59,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-64,173,-52,-56,-50,-51,-44,-60,]),'DIVIDE':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[81,-43,-29,-45,-49,-53,-54,-55,-57,-58,81,-43,-46,-47,-48,81,81,-32,-33,81,-35,81,81,81,81,81,81,81,-52,-56,81,-50,-51,-44,]),'EQUALS':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[82,-43,-29,-45,-49,-53,-54,-55,-57,-58,82,-43,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,82,82,-52,-56,82,-50,-51,-44,]),'MOD':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[83,-43,-29,-45,-49,-53,-54,-55,-57,-58,83,-43,-46,-47,-48,83,83,-32,-33,83,-35,83,83,83,83,83,83,83,-52,-56,83,-50,-51,-44,]),'GT':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[84,-43,-29,-45,-49,-53,-54,-55,-57,-58,84,-43,-46,-47,-48,-30,-31,-32,-33,84,-35,-36,-37,-38,-39,84,84,84,-52,-56,84,-50,-51,-44,]),'GET':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[85,-43,-29,-45,-49,-53,-54,-55,-57,-58,85,-43,-46,-47,-48,-30,-31,-32,-33,85,-35,-36,-37,-38,-39,85,85,85,-52,-56,85,-50,-51,-44,]),'LT':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[86,-43,-29,-45,-49,-53,-54,-55,-57,-58,86,-43,-46,-47,-48,-30,-31,-32,-33,86,-35,-36,-37,-38,-39,86,86,86,-52,-56,86,-50,-51,-44,]),'LET':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[87,-43,-29,-45,-49,-53,-54,-55,-57,-58,87,-43,-46,-47,-48,-30,-31,-32,-33,87,-35,-36,-37,-38,-39,87,87,87,-52,-56,87,-50,-51,-44,]),'DIFF':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[88,-43,-29,-45,-49,-53,-54,-55,-57,-58,88,-43,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,88,88,-52,-56,88,-50,-51,-44,]),'AND':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[89,-43,-29,-45,-49,-53,-54,-55,-57,-58,89,-43,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,89,-52,-56,89,-50,-51,-44,]),'OR':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,103,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,168,173,174,176,],[90,-43,-29,-45,-49,-53,-54,-55,-57,-58,90,-43,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-52,-56,90,-50,-51,-44,]),'TASSIGN':([42,47,52,55,56,57,58,59,66,100,101,103,153,156,173,174,176,],[93,-45,-49,-53,-54,-55,-57,-58,-43,-46,-47,-48,-52,-56,-50,-51,-44,]),'DASSIGN':([42,47,52,55,56,57,58,59,66,100,101,103,153,156,173,174,176,],[94,-45,-49,-53,-54,-55,-57,-58,-43,-46,-47,-48,-52,-56,-50,-51,-44,]),'MODASSIGN':([42,47,52,55,56,57,58,59,66,100,101,103,153,156,173,174,176,],[95,-45,-49,-53,-54,-55,-57,-58,-43,-46,-47,-48,-52,-56,-50,-51,-44,]),'PASSIGN':([42,47,52,55,56,57,58,59,66,100,101,103,153,156,173,174,176,],[96,-45,-49,-53,-54,-55,-57,-58,-43,-46,-47,-48,-52,-56,-50,-51,-44,]),'MINASSIGN':([42,47,52,55,56,57,58,59,66,100,101,103,153,156,173,174,176,],[97,-45,-49,-53,-54,-55,-57,-58,-43,-46,-47,-48,-52,-56,-50,-51,-44,]),'ELSE':([117,118,119,120,121,122,123,124,159,162,166,182,183,193,194,197,198,202,206,207,],[-96,-97,-98,-99,-100,-101,-102,-103,-95,-104,-110,-111,-112,199,-107,-113,-114,-106,-109,-108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,11,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,12,23,37,165,],[5,5,25,60,25,181,]),'type_specifier':([0,2,12,23,30,37,51,109,165,],[6,6,20,20,72,20,104,72,20,]),'declarator':([6,19,20,27,72,],[12,34,35,35,112,]),'init_declarator_list':([6,20,],[13,13,]),'pointer':([6,17,19,20,27,72,],[14,32,14,14,14,14,]),'direct_declarator':([6,14,19,20,27,72,],[15,28,15,15,15,15,]),'init_declarator':([6,20,27,],[16,16,61,]),'declaration_list_opt':([12,37,],[21,75,]),'declaration_list':([12,37,],[23,23,]),'empty':([12,17,29,30,37,75,114,131,165,169,181,187,188,189,196,199,200,204,205,],[24,33,64,71,24,115,161,161,161,161,161,161,161,161,161,161,161,161,161,]),'pointer_opt':([17,],[31,]),'compound_statement':([21,75,114,187,188,199,204,205,],[36,118,118,118,118,118,118,118,]),'initializer':([22,40,136,],[38,77,172,]),'assignment_expression':([22,40,51,75,91,98,99,102,114,131,136,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[39,39,106,106,150,106,154,106,106,106,39,106,106,106,106,106,154,186,106,106,106,106,106,106,106,106,106,]),'expr':([22,29,40,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[41,65,41,41,41,137,138,139,140,141,142,143,144,145,146,147,148,149,41,41,41,41,41,41,168,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[42,66,42,66,101,103,42,42,66,66,66,66,66,66,66,66,66,66,66,66,66,42,42,42,42,42,42,66,42,66,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'cast_expression':([22,29,40,48,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[43,43,43,100,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,176,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'postfix_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_operator':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'primary_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'constant':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,102,114,131,132,136,155,157,163,164,165,169,170,175,181,187,188,189,196,199,200,204,205,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'constant_expression_opt':([29,],[62,]),'constant_expression':([29,],[63,]),'parameter_list':([30,],[67,]),'identifier_list_opt':([30,],[68,]),'parameter_declaration':([30,109,],[69,158,]),'identifier_list':([30,],[70,]),'initializer_list':([40,],[76,]),'assignment_operator':([42,],[91,]),'expression':([51,75,98,102,114,131,157,163,164,165,169,181,187,188,189,196,199,200,204,205,],[105,127,151,105,127,127,177,178,179,127,127,127,127,127,127,127,127,127,127,127,]),'statement_list_opt':([75,],[113,]),'statement_list':([75,],[114,]),'statement':([75,114,187,188,199,204,205,],[116,160,193,194,202,206,207,]),'expression_statement':([75,114,187,188,199,204,205,],[117,117,117,117,117,117,117,]),'selection_statement':([75,114,187,188,199,204,205,],[119,119,119,119,119,119,119,]),'iteration_statement':([75,114,187,188,199,204,205,],[120,120,120,120,120,120,120,]),'jump_statement':([75,114,187,188,199,204,205,],[121,121,121,121,121,121,121,]),'assert_statement':([75,114,187,188,199,204,205,],[122,122,122,122,122,122,122,]),'print_statement':([75,114,187,188,199,204,205,],[123,123,123,123,123,123,123,]),'read_statement':([75,114,187,188,199,204,205,],[124,124,124,124,124,124,124,]),'expression_opt':([75,114,131,165,169,181,187,188,189,196,199,200,204,205,],[125,125,167,180,184,190,125,125,195,201,125,203,125,125,]),'argument_expression':([99,170,],[152,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',26),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',30),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',35),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',36),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',41),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',42),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition','parser.py',47),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',51),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',52),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',53),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',54),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',59),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',60),
  ('pointer -> TIMES pointer_opt','pointer',2,'p_pointer','parser.py',65),
  ('pointer_opt -> pointer','pointer_opt',1,'p_pointer_opt','parser.py',70),
  ('pointer_opt -> empty','pointer_opt',1,'p_pointer_opt','parser.py',71),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',76),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','parser.py',77),
  ('direct_declarator -> direct_declarator LBRACK constant_expression_opt RBRACK','direct_declarator',4,'p_direct_declarator','parser.py',78),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',79),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',80),
  ('constant_expression -> expr','constant_expression',1,'p_constant_expression','parser.py',88),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','parser.py',92),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','parser.py',93),
  ('identifier_list -> identifier_list ID','identifier_list',2,'p_identifier_list','parser.py',98),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',99),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',108),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',109),
  ('expr -> cast_expression','expr',1,'p_expr','parser.py',115),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',116),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',117),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',118),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',119),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','parser.py',120),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',121),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',122),
  ('expr -> expr GET expr','expr',3,'p_expr','parser.py',123),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',124),
  ('expr -> expr LET expr','expr',3,'p_expr','parser.py',125),
  ('expr -> expr DIFF expr','expr',3,'p_expr','parser.py',126),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',127),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',128),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',138),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',139),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','parser.py',145),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_1','parser.py',146),
  ('unary_expression -> PP unary_expression','unary_expression',2,'p_unary_expression_2','parser.py',154),
  ('unary_expression -> MM unary_expression','unary_expression',2,'p_unary_expression_3','parser.py',159),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','parser.py',165),
  ('postfix_expression -> postfix_expression LBRACK expression RBRACK','postfix_expression',4,'p_postfix_expression_1','parser.py',166),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_1','parser.py',167),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_1','parser.py',168),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression_1','parser.py',192),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_2','parser.py',198),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression_3','parser.py',204),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_4','parser.py',210),
  ('constant -> ICONST','constant',1,'p_constant_1','parser.py',215),
  ('constant -> FCONST','constant',1,'p_constant_2','parser.py',220),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',225),
  ('expression -> assignment_expression COMMA expression','expression',3,'p_expression','parser.py',226),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',231),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',232),
  ('assignment_expression -> expr','assignment_expression',1,'p_assignment_expression','parser.py',237),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',238),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',247),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',248),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',256),
  ('assignment_operator -> TASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',257),
  ('assignment_operator -> DASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',258),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',259),
  ('assignment_operator -> PASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',260),
  ('assignment_operator -> MINASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',261),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',266),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',267),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',268),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',269),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',270),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',275),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',276),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',285),
  ('declaration -> type_specifier init_declarator_list SEMI','declaration',3,'p_declaration','parser.py',290),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',295),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',296),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',301),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',302),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',307),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',308),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',313),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',314),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',319),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','parser.py',320),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','parser.py',321),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',326),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',327),
  ('compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE','compound_statement',4,'p_compound_statement','parser.py',337),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',348),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',349),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',350),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',351),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',352),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',353),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',354),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',355),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',361),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',366),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',367),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',376),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',377),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',378),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','parser.py',388),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','parser.py',389),
  ('assert_statement -> ASSERT expr SEMI','assert_statement',3,'p_assert_statement','parser.py',397),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',401),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',406),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',410),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',411),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',419),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',420),
]
