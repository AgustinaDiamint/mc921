
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQUALSDIFFleftGTGETLTLETleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CCOMMENT CCONST CHAR COMMA CPPCOMMENT DASSIGN DIFF DIVIDE ELSE EQUALS ERROR FCONST FLOAT FOR GET GT ICONST ID IF INT LBRACE LBRACK LET LPAREN LT MINASSIGN MINUS MM MOD MODASSIGN NOT OR PASSIGN PLUS PP PRINT RBRACE RBRACK READ RETURN RPAREN SEMI STRING_LITERAL TASSIGN TIMES UNMATCHEDQUOTE UNTERMCOMMENT VOID WHILEempty :  program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration \n         function_definition : type_specifier_opt declarator declaration_list_opt compound_statement  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        type_specifier_opt : type_specifier\n                             | empty\n         declarator : pointer direct_declarator\n                        | direct_declarator\n         pointer : TIMES pointer_opt\n        pointer_opt : pointer\n                      | empty\n         direct_declarator : ID\n                      | LPAREN declarator RPAREN\n                      | direct_declarator LBRACE constant_exp_opt RBRACE\n                      | direct_declarator LPAREN parameter_list RPAREN\n                      | direct_declarator LPAREN identifier_list_opt RPAREN\n         constant_expression : expr  constant_exp_opt : constant_expression\n                            | empty\n         identifier_list : identifier_list ID\n                            | ID\n         identifier_list_opt : identifier_list\n                                | empty\n        \n        expr :  cast_expression\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr EQUALS expr\n                | expr MOD expr\n                | expr GT expr\n                | expr GET expr\n                | expr LT expr\n                | expr LET expr\n                | expr DIFF expr\n                | expr AND expr\n                | expr OR expr\n        \n        cast_expression : unary_expression\n                    | LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                        | PP unary_expression\n                        | MM unary_expression\n                        | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n                            | postfix_expression LBRACE expression RBRACE\n                            | postfix_expression LPAREN argument_expression RPAREN\n                            | postfix_expression LBRACE RBRACE\n                            | postfix_expression PP\n                            | postfix_expression MM\n        \n        primary_expression : ID\n                            | constant\n                            | STRING_LITERAL\n                            | LPAREN expression RPAREN\n         constant : ICONST\n                    | FCONST\n         expression : assignment_expression\n                        | expression COMMA assignment_expression\n         expression_opt : expression\n                            | empty\n        assignment_expression : expr\n                            | unary_expression assignment_operator assignment_expression\n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n         assignment_operator : ASSIGN\n                                | TASSIGN\n                                | DASSIGN\n                                | MODASSIGN\n                                | PASSIGN\n                                | MINASSIGN\n        unary_operator : ADDRESS\n                    | TIMES\n                    | PLUS\n                    | MINUS\n                    | NOT\n        parameter_list : parameter_declaration\n                        | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n        declaration : type_specifier init_declarator_list_opt SEMI \n         declaration_list : declaration\n                    | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                | empty\n        init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt : init_declarator_list\n                                    | empty\n        initializer : assignment_expression\n                    | LBRACK initializer_list RBRACK\n                    | LBRACK initializer_list COMMA RBRACK\n         initializer_list : initializer\n                    | initializer_list COMMA initializer\n        compound_statement : LBRACK declaration_list_opt statement_list_opt RBRACK\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n            selection_statement : IF LPAREN expression RPAREN statement\n                                    | IF LPAREN expression RPAREN statement ELSE statement\n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                    | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                    | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        jump_statement : BREAK SEMI\n                        | RETURN expression_opt SEMI\n         assert_statement : ASSERT expr SEMI  print_statement : PRINT LPAREN expr RPAREN SEMI \n        read_statement : READ LPAREN argument_expression RPAREN SEMI statement_list : statement_list statement\n                    | statement\n         statement_list_opt : statement_list\n                                | empty\n         statement : ID ASSIGN expr\n         expr : LPAREN expr RPAREN\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,51,72,80,107,108,109,110,170,177,],[9,9,-3,-5,-6,-4,9,-15,-19,9,-86,-14,9,-85,-7,9,-87,9,-20,-21,9,-22,9,-23,-101,9,]),'CHAR':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,51,72,80,107,108,109,110,170,177,],[10,10,-3,-5,-6,-4,10,-15,-19,10,-86,-14,10,-85,-7,10,-87,10,-20,-21,10,-22,10,-23,-101,10,]),'INT':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,51,72,80,107,108,109,110,170,177,],[11,11,-3,-5,-6,-4,11,-15,-19,11,-86,-14,11,-85,-7,11,-87,11,-20,-21,11,-22,11,-23,-101,11,]),'FLOAT':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,51,72,80,107,108,109,110,170,177,],[12,12,-3,-5,-6,-4,12,-15,-19,12,-86,-14,12,-85,-7,12,-87,12,-20,-21,12,-22,12,-23,-101,12,]),'TIMES':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,27,28,29,31,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,180,181,182,183,185,186,187,190,194,195,196,197,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-1,-1,-3,-5,-6,17,17,-13,-8,-9,-10,-11,-4,17,17,-88,-89,-86,17,50,-85,17,50,-7,-1,-87,83,-31,-79,-80,-78,50,-45,-47,50,50,50,-51,-77,-81,-57,-58,-59,-61,-62,17,50,83,-45,50,50,50,50,50,50,50,50,50,50,50,50,50,50,83,-45,50,50,-55,-56,-48,50,-49,-50,50,50,-71,-72,-73,-74,-75,-76,50,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,50,50,83,83,-34,-35,83,-37,83,83,83,83,83,83,83,-126,50,-60,50,-54,50,-101,-121,50,-110,50,50,50,-116,83,50,50,-46,-52,-53,50,83,50,-117,-118,83,50,50,50,-111,-113,50,-119,-120,50,50,-112,50,50,-115,-114,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,19,26,27,28,29,31,32,33,34,35,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,70,71,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,111,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-1,-1,-3,-5,-6,18,18,-13,-8,-9,-10,-11,-4,18,-1,18,-88,-89,-86,18,60,71,-16,-17,-18,-85,18,60,-7,-1,-87,-31,-79,-80,-78,60,-45,-47,60,60,60,-51,-77,-81,-57,-58,-59,-61,-62,111,18,-28,60,134,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-55,-56,-48,60,-49,-50,60,-27,60,-71,-72,-73,-74,-75,-76,134,-122,-102,-103,-104,-105,-106,-107,-108,-109,60,60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,60,-60,60,-54,60,-101,-121,60,-110,60,60,60,-116,60,60,-46,-52,-53,60,-125,60,-117,-118,134,134,60,-111,-113,60,-119,-120,134,60,-112,134,134,-115,-114,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,26,27,28,29,30,31,33,34,35,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,72,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,108,110,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,136,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-1,-1,-3,-5,-6,19,19,-13,-8,-9,-10,-11,-4,19,32,-1,-19,19,-88,-89,-86,19,32,51,-16,-17,-18,-85,19,51,-7,-1,-87,-31,-79,-80,-78,51,-45,100,104,104,107,-51,-77,-81,-57,-58,-59,-61,-62,19,-20,51,51,-21,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-55,-56,-48,51,-49,-50,51,-22,-23,51,-71,-72,-73,-74,-75,-76,51,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,175,176,177,51,51,181,182,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,107,-60,51,-54,51,-101,-121,51,-110,51,51,51,-116,51,51,-46,-52,-53,51,-125,51,-117,-118,51,51,51,-111,-113,51,-119,-120,51,51,-112,51,51,-115,-114,]),'$end':([1,2,3,4,5,13,37,40,170,],[0,-2,-3,-5,-6,-4,-85,-7,-101,]),'SEMI':([7,9,10,11,12,16,18,20,21,22,23,24,26,27,28,29,30,37,41,42,47,52,53,57,60,61,62,63,64,72,73,74,75,77,78,79,80,97,101,102,103,105,106,108,110,123,124,125,126,127,128,129,130,131,132,133,134,135,137,140,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,167,169,170,171,172,174,177,178,179,180,183,184,185,186,188,190,193,194,195,196,200,201,202,203,204,205,206,207,208,210,211,212,215,217,218,219,220,],[-1,-8,-9,-10,-11,-15,-19,37,-94,-95,-92,-90,-88,-89,-86,-1,-14,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,-20,-93,-91,-96,-67,-45,-1,-21,-63,-55,-56,-48,-49,-50,-22,-23,-1,-66,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,174,-65,178,-1,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-97,-68,-101,-121,-66,-110,-1,-116,195,196,-46,-64,-52,-53,-98,-125,202,-1,-117,-118,-1,-1,-1,209,210,211,-111,-113,213,-119,-120,-1,-112,-1,-1,-115,-114,]),'RPAREN':([9,10,11,12,16,18,30,32,36,47,52,53,57,60,61,62,63,64,65,66,67,68,69,71,72,77,78,80,94,95,96,97,98,101,102,103,105,106,108,110,111,112,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,164,165,166,169,172,183,184,185,186,191,192,197,198,199,209,213,214,216,],[-8,-9,-10,-11,-15,-19,-14,-1,72,-31,-45,-47,-51,-57,-58,-59,-61,-62,108,110,-82,-29,-30,-28,-20,-67,-45,-21,158,159,160,-63,-45,-55,-56,-48,-49,-50,-22,-23,-27,-84,-65,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,186,-69,-83,-68,-66,-46,-64,-52,-53,200,201,204,205,-70,-1,-1,217,218,]),'LBRACK':([14,16,18,25,26,27,28,30,37,39,41,42,47,52,53,57,60,61,62,63,64,72,76,79,80,101,102,103,105,106,108,110,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,168,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-1,-15,-19,41,-88,-89,-86,-14,-85,76,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,-20,76,41,-21,-55,-56,-48,-49,-50,-22,-23,41,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,76,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,41,41,-111,-113,-119,-120,41,-112,41,41,-115,-114,]),'ASSIGN':([16,18,24,30,52,53,57,60,61,62,63,64,72,78,80,98,101,102,103,105,106,108,110,134,160,163,183,185,186,],[-15,-19,39,-14,-45,-47,-51,-57,-58,-59,-61,-62,-20,116,-21,116,-55,-56,-48,-49,-50,-22,-23,173,-60,-54,-46,-52,-53,]),'COMMA':([16,18,21,23,24,30,47,52,53,57,60,61,62,63,64,65,67,72,73,74,75,77,78,80,94,96,97,98,101,102,103,105,106,108,110,112,113,114,134,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,162,163,164,165,166,167,169,183,184,185,186,188,189,191,192,198,199,],[-15,-19,38,-92,-90,-14,-31,-45,-47,-51,-57,-58,-59,-61,-62,109,-82,-20,-93,-91,-96,-67,-45,-21,-67,161,-63,-45,-55,-56,-48,-49,-50,-22,-23,-84,168,-99,-57,161,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,161,-54,187,-69,-83,-97,-68,-46,-64,-52,-53,-98,-100,161,161,187,-70,]),'LBRACE':([16,18,30,53,57,60,61,62,63,64,72,80,101,102,108,110,134,160,163,185,186,],[31,-19,31,99,-51,-57,-58,-59,-61,-62,-20,-21,-55,-56,-22,-23,-57,-60,-54,-52,-53,]),'IF':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,136,-55,-56,-48,-49,-50,136,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,136,136,-111,-113,-119,-120,136,-112,136,136,-115,-114,]),'WHILE':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,138,-55,-56,-48,-49,-50,138,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,138,138,-111,-113,-119,-120,138,-112,138,138,-115,-114,]),'FOR':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,139,-55,-56,-48,-49,-50,139,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,139,139,-111,-113,-119,-120,139,-112,139,139,-115,-114,]),'BREAK':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,140,-55,-56,-48,-49,-50,140,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,140,140,-111,-113,-119,-120,140,-112,140,140,-115,-114,]),'RETURN':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,141,-55,-56,-48,-49,-50,141,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,141,141,-111,-113,-119,-120,141,-112,141,141,-115,-114,]),'ASSERT':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,142,-55,-56,-48,-49,-50,142,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,142,142,-111,-113,-119,-120,142,-112,142,142,-115,-114,]),'PRINT':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,143,-55,-56,-48,-49,-50,143,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,143,143,-111,-113,-119,-120,143,-112,143,143,-115,-114,]),'READ':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,171,174,178,183,185,186,190,195,196,200,201,206,207,210,211,212,215,217,218,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,144,-55,-56,-48,-49,-50,144,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-121,-110,-116,-46,-52,-53,-125,-117,-118,144,144,-111,-113,-119,-120,144,-112,144,144,-115,-114,]),'PP':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,54,-85,54,-1,-87,-31,-79,-80,-78,54,-45,101,54,54,54,-51,-77,-81,-57,-58,-59,-61,-62,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-55,-56,-48,54,-49,-50,54,54,-71,-72,-73,-74,-75,-76,54,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,54,54,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,54,-60,54,-54,54,-101,-121,54,-110,54,54,54,-116,54,54,-46,-52,-53,54,-125,54,-117,-118,54,54,54,-111,-113,54,-119,-120,54,54,-112,54,54,-115,-114,]),'MM':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,55,-85,55,-1,-87,-31,-79,-80,-78,55,-45,102,55,55,55,-51,-77,-81,-57,-58,-59,-61,-62,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-55,-56,-48,55,-49,-50,55,55,-71,-72,-73,-74,-75,-76,55,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,55,55,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,55,-60,55,-54,55,-101,-121,55,-110,55,55,55,-116,55,55,-46,-52,-53,55,-125,55,-117,-118,55,55,55,-111,-113,55,-119,-120,55,55,-112,55,55,-115,-114,]),'ADDRESS':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,58,-85,58,-1,-87,-31,-79,-80,-78,58,-45,-47,58,58,58,-51,-77,-81,-57,-58,-59,-61,-62,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-55,-56,-48,58,-49,-50,58,58,-71,-72,-73,-74,-75,-76,58,-122,-102,-103,-104,-105,-106,-107,-108,-109,58,58,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,58,-60,58,-54,58,-101,-121,58,-110,58,58,58,-116,58,58,-46,-52,-53,58,-125,58,-117,-118,58,58,58,-111,-113,58,-119,-120,58,58,-112,58,58,-115,-114,]),'PLUS':([26,27,28,31,37,39,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,180,181,182,183,185,186,187,190,194,195,196,197,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,48,-85,48,-1,-87,81,-31,-79,-80,-78,48,-45,-47,48,48,48,-51,-77,-81,-57,-58,-59,-61,-62,48,81,-45,48,48,48,48,48,48,48,48,48,48,48,48,48,48,81,-45,48,48,-55,-56,-48,48,-49,-50,48,48,-71,-72,-73,-74,-75,-76,48,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,48,48,-32,-33,-34,-35,81,-37,81,81,81,81,81,81,81,-126,48,-60,48,-54,48,-101,-121,48,-110,48,48,48,-116,81,48,48,-46,-52,-53,48,81,48,-117,-118,81,48,48,48,-111,-113,48,-119,-120,48,48,-112,48,48,-115,-114,]),'MINUS':([26,27,28,31,37,39,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,180,181,182,183,185,186,187,190,194,195,196,197,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,49,-85,49,-1,-87,82,-31,-79,-80,-78,49,-45,-47,49,49,49,-51,-77,-81,-57,-58,-59,-61,-62,49,82,-45,49,49,49,49,49,49,49,49,49,49,49,49,49,49,82,-45,49,49,-55,-56,-48,49,-49,-50,49,49,-71,-72,-73,-74,-75,-76,49,-122,-102,-103,-104,-105,-106,-107,-108,-109,-57,49,49,-32,-33,-34,-35,82,-37,82,82,82,82,82,82,82,-126,49,-60,49,-54,49,-101,-121,49,-110,49,49,49,-116,82,49,49,-46,-52,-53,49,82,49,-117,-118,82,49,49,49,-111,-113,49,-119,-120,49,49,-112,49,49,-115,-114,]),'NOT':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,59,-85,59,-1,-87,-31,-79,-80,-78,59,-45,-47,59,59,59,-51,-77,-81,-57,-58,-59,-61,-62,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-55,-56,-48,59,-49,-50,59,59,-71,-72,-73,-74,-75,-76,59,-122,-102,-103,-104,-105,-106,-107,-108,-109,59,59,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,59,-60,59,-54,59,-101,-121,59,-110,59,59,59,-116,59,59,-46,-52,-53,59,-125,59,-117,-118,59,59,59,-111,-113,59,-119,-120,59,59,-112,59,59,-115,-114,]),'STRING_LITERAL':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,62,-85,62,-1,-87,-31,-79,-80,-78,62,-45,-47,62,62,62,-51,-77,-81,-57,-58,-59,-61,-62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-55,-56,-48,62,-49,-50,62,62,-71,-72,-73,-74,-75,-76,62,-122,-102,-103,-104,-105,-106,-107,-108,-109,62,62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,62,-60,62,-54,62,-101,-121,62,-110,62,62,62,-116,62,62,-46,-52,-53,62,-125,62,-117,-118,62,62,62,-111,-113,62,-119,-120,62,62,-112,62,62,-115,-114,]),'ICONST':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,63,-85,63,-1,-87,-31,-79,-80,-78,63,-45,-47,63,63,63,-51,-77,-81,-57,-58,-59,-61,-62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-55,-56,-48,63,-49,-50,63,63,-71,-72,-73,-74,-75,-76,63,-122,-102,-103,-104,-105,-106,-107,-108,-109,63,63,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,63,-60,63,-54,63,-101,-121,63,-110,63,63,63,-116,63,63,-46,-52,-53,63,-125,63,-117,-118,63,63,63,-111,-113,63,-119,-120,63,63,-112,63,63,-115,-114,]),'FCONST':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,163,168,170,171,173,174,175,176,177,178,181,182,183,185,186,187,190,194,195,196,200,201,202,206,207,209,210,211,212,213,215,217,218,219,220,],[-88,-89,-86,64,-85,64,-1,-87,-31,-79,-80,-78,64,-45,-47,64,64,64,-51,-77,-81,-57,-58,-59,-61,-62,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-55,-56,-48,64,-49,-50,64,64,-71,-72,-73,-74,-75,-76,64,-122,-102,-103,-104,-105,-106,-107,-108,-109,64,64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,64,-60,64,-54,64,-101,-121,64,-110,64,64,64,-116,64,64,-46,-52,-53,64,-125,64,-117,-118,64,64,64,-111,-113,64,-119,-120,64,64,-112,64,64,-115,-114,]),'RBRACK':([26,27,28,37,41,42,47,52,53,57,60,61,62,63,64,75,77,78,79,101,102,103,105,106,113,114,122,123,124,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,167,168,169,170,171,174,178,183,185,186,188,189,190,195,196,206,207,210,211,215,219,220,],[-88,-89,-86,-85,-1,-87,-31,-45,-47,-51,-57,-58,-59,-61,-62,-96,-67,-45,-1,-55,-56,-48,-49,-50,167,-99,170,-123,-124,-122,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-97,188,-68,-101,-121,-110,-116,-46,-52,-53,-98,-100,-125,-117,-118,-111,-113,-119,-120,-112,-115,-114,]),'RBRACE':([31,43,44,45,46,47,52,53,57,60,61,62,63,64,77,78,97,99,101,102,103,105,106,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,162,163,169,183,184,185,186,],[-1,80,-25,-26,-24,-31,-45,-47,-51,-57,-58,-59,-61,-62,-67,-45,-63,163,-55,-56,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,185,-54,-68,-46,-64,-52,-53,]),'DIVIDE':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[84,-31,-45,-47,-51,-57,-58,-59,-61,-62,84,-45,84,-45,-55,-56,-48,-49,-50,-57,84,84,-34,-35,84,-37,84,84,84,84,84,84,84,-126,-60,-54,84,-46,-52,-53,84,84,]),'EQUALS':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[85,-31,-45,-47,-51,-57,-58,-59,-61,-62,85,-45,85,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,85,85,-126,-60,-54,85,-46,-52,-53,85,85,]),'MOD':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[86,-31,-45,-47,-51,-57,-58,-59,-61,-62,86,-45,86,-45,-55,-56,-48,-49,-50,-57,86,86,-34,-35,86,-37,86,86,86,86,86,86,86,-126,-60,-54,86,-46,-52,-53,86,86,]),'GT':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[87,-31,-45,-47,-51,-57,-58,-59,-61,-62,87,-45,87,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,87,-37,-38,-39,-40,-41,87,87,87,-126,-60,-54,87,-46,-52,-53,87,87,]),'GET':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[88,-31,-45,-47,-51,-57,-58,-59,-61,-62,88,-45,88,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,88,-37,-38,-39,-40,-41,88,88,88,-126,-60,-54,88,-46,-52,-53,88,88,]),'LT':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[89,-31,-45,-47,-51,-57,-58,-59,-61,-62,89,-45,89,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,89,-37,-38,-39,-40,-41,89,89,89,-126,-60,-54,89,-46,-52,-53,89,89,]),'LET':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[90,-31,-45,-47,-51,-57,-58,-59,-61,-62,90,-45,90,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,90,-37,-38,-39,-40,-41,90,90,90,-126,-60,-54,90,-46,-52,-53,90,90,]),'DIFF':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[91,-31,-45,-47,-51,-57,-58,-59,-61,-62,91,-45,91,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,91,91,-126,-60,-54,91,-46,-52,-53,91,91,]),'AND':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[92,-31,-45,-47,-51,-57,-58,-59,-61,-62,92,-45,92,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,92,-126,-60,-54,92,-46,-52,-53,92,92,]),'OR':([46,47,52,53,57,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,180,183,185,186,190,197,],[93,-31,-45,-47,-51,-57,-58,-59,-61,-62,93,-45,93,-45,-55,-56,-48,-49,-50,-57,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,93,-46,-52,-53,93,93,]),'ELSE':([47,52,53,57,60,61,62,63,64,101,102,103,105,106,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,170,174,178,183,185,186,190,195,196,206,207,210,211,215,219,220,],[-31,-45,-47,-51,-57,-58,-59,-61,-62,-55,-56,-48,-49,-50,-102,-103,-104,-105,-106,-107,-108,-109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-126,-60,-54,-101,-110,-116,-46,-52,-53,-125,-117,-118,212,-113,-119,-120,-112,-115,-114,]),'TASSIGN':([52,53,57,60,61,62,63,64,78,98,101,102,103,105,106,134,160,163,183,185,186,],[-45,-47,-51,-57,-58,-59,-61,-62,117,117,-55,-56,-48,-49,-50,-57,-60,-54,-46,-52,-53,]),'DASSIGN':([52,53,57,60,61,62,63,64,78,98,101,102,103,105,106,134,160,163,183,185,186,],[-45,-47,-51,-57,-58,-59,-61,-62,118,118,-55,-56,-48,-49,-50,-57,-60,-54,-46,-52,-53,]),'MODASSIGN':([52,53,57,60,61,62,63,64,78,98,101,102,103,105,106,134,160,163,183,185,186,],[-45,-47,-51,-57,-58,-59,-61,-62,119,119,-55,-56,-48,-49,-50,-57,-60,-54,-46,-52,-53,]),'PASSIGN':([52,53,57,60,61,62,63,64,78,98,101,102,103,105,106,134,160,163,183,185,186,],[-45,-47,-51,-57,-58,-59,-61,-62,120,120,-55,-56,-48,-49,-50,-57,-60,-54,-46,-52,-53,]),'MINASSIGN':([52,53,57,60,61,62,63,64,78,98,101,102,103,105,106,134,160,163,183,185,186,],[-45,-47,-51,-57,-58,-59,-61,-62,121,121,-55,-56,-48,-49,-50,-57,-60,-54,-46,-52,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,13,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,14,26,41,177,],[5,5,28,42,28,194,]),'type_specifier_opt':([0,2,],[6,6,]),'type_specifier':([0,2,14,26,32,41,51,107,109,177,],[7,7,29,29,70,29,95,95,70,29,]),'empty':([0,2,7,14,17,29,31,32,41,79,123,141,177,194,200,201,202,209,212,213,217,218,],[8,8,22,27,35,22,45,69,27,124,172,172,172,172,172,172,172,172,172,172,172,172,]),'declarator':([6,7,19,29,38,70,],[14,24,36,24,24,112,]),'pointer':([6,7,17,19,29,38,70,],[15,15,34,15,15,15,15,]),'direct_declarator':([6,7,15,19,29,38,70,],[16,16,30,16,16,16,16,]),'init_declarator_list_opt':([7,29,],[20,20,]),'init_declarator_list':([7,29,],[21,21,]),'init_declarator':([7,29,38,],[23,23,73,]),'declaration_list_opt':([14,41,],[25,79,]),'declaration_list':([14,41,],[26,26,]),'pointer_opt':([17,],[33,]),'compound_statement':([25,79,123,200,201,212,217,218,],[40,127,127,127,127,127,127,127,]),'constant_exp_opt':([31,],[43,]),'constant_expression':([31,],[44,]),'expr':([31,39,51,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[46,77,94,77,77,145,146,147,148,149,150,151,152,153,154,155,156,157,77,77,77,77,77,77,77,180,77,77,190,77,77,77,197,77,77,77,77,77,77,77,77,77,77,77,]),'cast_expression':([31,39,51,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[47,47,47,106,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,183,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,39,51,54,55,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[52,78,98,103,105,52,78,78,52,52,52,52,52,52,52,52,52,52,52,52,52,78,78,78,78,78,78,78,52,52,78,78,52,78,78,78,52,78,78,78,78,78,78,78,78,78,78,78,]),'postfix_expression':([31,39,51,54,55,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,39,51,54,55,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,39,51,54,55,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,39,51,54,55,56,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,168,173,175,176,177,181,182,187,194,200,201,202,209,212,213,217,218,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'parameter_list':([32,],[65,]),'identifier_list_opt':([32,],[66,]),'parameter_declaration':([32,109,],[67,166,]),'identifier_list':([32,],[68,]),'initializer':([39,76,168,],[74,114,189,]),'assignment_expression':([39,51,76,79,99,100,104,107,115,123,141,161,168,175,176,177,182,187,194,200,201,202,209,212,213,217,218,],[75,97,75,97,97,165,97,97,169,97,97,184,75,97,97,97,165,199,97,97,97,97,97,97,97,97,97,]),'expression':([51,79,99,104,107,123,141,175,176,177,194,200,201,202,209,212,213,217,218,],[96,137,162,96,96,137,137,191,192,137,137,137,137,137,137,137,137,137,137,]),'initializer_list':([76,],[113,]),'assignment_operator':([78,98,],[115,115,]),'statement_list_opt':([79,],[122,]),'statement_list':([79,],[123,]),'statement':([79,123,200,201,212,217,218,],[125,171,206,207,215,219,220,]),'expression_statement':([79,123,200,201,212,217,218,],[126,126,126,126,126,126,126,]),'selection_statement':([79,123,200,201,212,217,218,],[128,128,128,128,128,128,128,]),'iteration_statement':([79,123,200,201,212,217,218,],[129,129,129,129,129,129,129,]),'jump_statement':([79,123,200,201,212,217,218,],[130,130,130,130,130,130,130,]),'assert_statement':([79,123,200,201,212,217,218,],[131,131,131,131,131,131,131,]),'print_statement':([79,123,200,201,212,217,218,],[132,132,132,132,132,132,132,]),'read_statement':([79,123,200,201,212,217,218,],[133,133,133,133,133,133,133,]),'expression_opt':([79,123,141,177,194,200,201,202,209,212,213,217,218,],[135,135,179,193,203,135,135,208,214,135,216,135,135,]),'argument_expression':([100,182,],[164,198,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',19),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',23),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',28),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',29),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',34),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',35),
  ('function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement','function_definition',4,'p_function_defnition','parser.py',40),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',44),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',45),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',46),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',47),
  ('type_specifier_opt -> type_specifier','type_specifier_opt',1,'p_type_specifier_opt','parser.py',52),
  ('type_specifier_opt -> empty','type_specifier_opt',1,'p_type_specifier_opt','parser.py',53),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',58),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',59),
  ('pointer -> TIMES pointer_opt','pointer',2,'p_pointer','parser.py',64),
  ('pointer_opt -> pointer','pointer_opt',1,'p_pointer_opt','parser.py',69),
  ('pointer_opt -> empty','pointer_opt',1,'p_pointer_opt','parser.py',70),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',75),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','parser.py',76),
  ('direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE','direct_declarator',4,'p_direct_declarator','parser.py',77),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',78),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',79),
  ('constant_expression -> expr','constant_expression',1,'p_constant_expression','parser.py',89),
  ('constant_exp_opt -> constant_expression','constant_exp_opt',1,'p_constant_exp_opt','parser.py',93),
  ('constant_exp_opt -> empty','constant_exp_opt',1,'p_constant_exp_opt','parser.py',94),
  ('identifier_list -> identifier_list ID','identifier_list',2,'p_identifier_list','parser.py',99),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',100),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',105),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',106),
  ('expr -> cast_expression','expr',1,'p_expr','parser.py',112),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',113),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',114),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',115),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',116),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','parser.py',117),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',118),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',119),
  ('expr -> expr GET expr','expr',3,'p_expr','parser.py',120),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',121),
  ('expr -> expr LET expr','expr',3,'p_expr','parser.py',122),
  ('expr -> expr DIFF expr','expr',3,'p_expr','parser.py',123),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',124),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',125),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',131),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',132),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',138),
  ('unary_expression -> PP unary_expression','unary_expression',2,'p_unary_expression','parser.py',139),
  ('unary_expression -> MM unary_expression','unary_expression',2,'p_unary_expression','parser.py',140),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',141),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',147),
  ('postfix_expression -> postfix_expression LBRACE expression RBRACE','postfix_expression',4,'p_postfix_expression','parser.py',148),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',149),
  ('postfix_expression -> postfix_expression LBRACE RBRACE','postfix_expression',3,'p_postfix_expression','parser.py',150),
  ('postfix_expression -> postfix_expression PP','postfix_expression',2,'p_postfix_expression','parser.py',151),
  ('postfix_expression -> postfix_expression MM','postfix_expression',2,'p_postfix_expression','parser.py',152),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','parser.py',165),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','parser.py',166),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',167),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',168),
  ('constant -> ICONST','constant',1,'p_constant','parser.py',174),
  ('constant -> FCONST','constant',1,'p_constant','parser.py',175),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',180),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',181),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',186),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',187),
  ('assignment_expression -> expr','assignment_expression',1,'p_assignment_expression','parser.py',192),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',193),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',198),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',199),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',207),
  ('assignment_operator -> TASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',208),
  ('assignment_operator -> DASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',209),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',210),
  ('assignment_operator -> PASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',211),
  ('assignment_operator -> MINASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',212),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',217),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',218),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',219),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',220),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',221),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',226),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',227),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',232),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','parser.py',237),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',243),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',244),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',249),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',250),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',255),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',256),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',261),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',262),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',267),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',268),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',274),
  ('initializer -> LBRACK initializer_list RBRACK','initializer',3,'p_initializer','parser.py',275),
  ('initializer -> LBRACK initializer_list COMMA RBRACK','initializer',4,'p_initializer','parser.py',276),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',281),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',282),
  ('compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK','compound_statement',4,'p_compound_statement','parser.py',287),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',293),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',294),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',295),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',296),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',297),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',298),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',299),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',300),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',306),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',311),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',312),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',317),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',318),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',319),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','parser.py',329),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','parser.py',330),
  ('assert_statement -> ASSERT expr SEMI','assert_statement',3,'p_assert_statement','parser.py',335),
  ('print_statement -> PRINT LPAREN expr RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',339),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',344),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',348),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',349),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',357),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',358),
  ('statement -> ID ASSIGN expr','statement',3,'p_assign_statement','parser.py',363),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_compound_expr','parser.py',368),
]
