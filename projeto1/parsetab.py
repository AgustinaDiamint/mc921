
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQUALSDIFFleftGTGETLTLETleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CCOMMENT CCONST CHAR COMMA CPPCOMMENT DASSIGN DIFF DIVIDE ELSE EQUALS ERROR FCONST FLOAT FOR GET GT ICONST ID IF INT LBRACE LBRACK LET LPAREN LT MINASSIGN MINUS MM MOD MODASSIGN NOT OR PASSIGN PLUS PP PRINT RBRACE RBRACK READ RETURN RPAREN SEMI STRING_LITERAL TASSIGN TIMES UNMATCHEDQUOTE UNTERMCOMMENT VOID WHILEempty :  program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration \n         function_definition : type_specifier declarator declaration_list_opt compound_statement  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declarator : pointer direct_declarator\n                        | direct_declarator\n         pointer : TIMES pointer_opt\n        pointer_opt : pointer\n                      | empty\n         direct_declarator : ID\n                      | LPAREN declarator RPAREN\n                      | direct_declarator LBRACE constant_expression RBRACE\n                      | direct_declarator LBRACE RBRACE\n                      | direct_declarator LPAREN parameter_list RPAREN\n                      | direct_declarator LPAREN identifier_list_opt RPAREN\n         constant_expression : expr  identifier_list : identifier_list ID\n                            | ID\n         identifier_list_opt : identifier_list\n                                | empty\n        \n        expr :  cast_expression\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr EQUALS expr\n                | expr MOD expr\n                | expr GT expr\n                | expr GET expr\n                | expr LT expr\n                | expr LET expr\n                | expr DIFF expr\n                | expr AND expr\n                | expr OR expr\n        \n        cast_expression : unary_expression\n                    | LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                        | PP unary_expression\n                        | MM unary_expression\n                        | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n                            | postfix_expression LBRACE expression RBRACE\n                            | postfix_expression LPAREN argument_expression RPAREN\n                            | postfix_expression LPAREN RPAREN\n                            | postfix_expression PP\n                            | postfix_expression MM\n        \n        primary_expression : ID\n                            | constant\n                            | STRING_LITERAL\n                            | LPAREN expression RPAREN\n         constant : ICONST\n                    | FCONST\n         expression : assignment_expression\n                        | expression COMMA assignment_expression\n         expression_opt : expression\n                            | empty\n        assignment_expression : expr\n                            | unary_expression assignment_operator assignment_expression\n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n         assignment_operator : ASSIGN\n                                | TASSIGN\n                                | DASSIGN\n                                | MODASSIGN\n                                | PASSIGN\n                                | MINASSIGN\n        unary_operator : ADDRESS\n                    | TIMES\n                    | PLUS\n                    | MINUS\n                    | NOT\n        parameter_list : parameter_declaration\n                        | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n        declaration : type_specifier init_declarator_list_opt SEMI \n         declaration_list : declaration\n                    | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                | empty\n        init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt : init_declarator_list\n                                    | empty\n        initializer : assignment_expression\n                    | LBRACK initializer_list RBRACK\n                    | LBRACK initializer_list COMMA RBRACK\n         initializer_list : initializer\n                    | initializer_list COMMA initializer\n        compound_statement : LBRACK declaration_list_opt statement_list_opt RBRACK\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n            selection_statement : IF LPAREN expression RPAREN statement\n                                    | IF LPAREN expression RPAREN statement ELSE statement\n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                    | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                    | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        jump_statement : BREAK SEMI\n                        | RETURN expression_opt SEMI\n         assert_statement : ASSERT expr SEMI  print_statement : PRINT LPAREN expr RPAREN SEMI \n        read_statement : READ LPAREN argument_expression RPAREN SEMI statement_list : statement_list statement\n                    | statement\n         statement_list_opt : statement_list\n                                | empty\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,11,12,15,19,25,27,28,29,31,38,39,53,62,64,75,110,111,112,113,162,168,],[7,7,-3,-5,-6,-4,7,-13,-17,7,-83,-82,-12,7,-7,7,7,-84,-20,-18,-19,-21,7,-22,-98,7,]),'CHAR':([0,2,3,4,5,11,12,15,19,25,27,28,29,31,38,39,53,62,64,75,110,111,112,113,162,168,],[8,8,-3,-5,-6,-4,8,-13,-17,8,-83,-82,-12,8,-7,8,8,-84,-20,-18,-19,-21,8,-22,-98,8,]),'INT':([0,2,3,4,5,11,12,15,19,25,27,28,29,31,38,39,53,62,64,75,110,111,112,113,162,168,],[9,9,-3,-5,-6,-4,9,-13,-17,9,-83,-82,-12,9,-7,9,9,-84,-20,-18,-19,-21,9,-22,-98,9,]),'FLOAT':([0,2,3,4,5,11,12,15,19,25,27,28,29,31,38,39,53,62,64,75,110,111,112,113,162,168,],[10,10,-3,-5,-6,-4,10,-13,-17,10,-83,-82,-12,10,-7,10,10,-84,-20,-18,-19,-21,10,-22,-98,10,]),'$end':([1,2,3,4,5,11,28,38,162,],[0,-2,-3,-5,-6,-4,-82,-7,-98,]),'TIMES':([6,7,8,9,10,18,20,22,24,25,26,27,28,30,32,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,72,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,117,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,158,159,160,162,163,165,166,167,168,169,171,172,173,176,177,178,179,184,185,186,187,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[18,-8,-9,-10,-11,18,18,18,48,-85,-86,-83,-82,48,18,-1,48,81,-42,-28,-76,-77,-75,-44,48,48,48,48,-48,-74,-78,-54,-55,-56,-58,-59,-84,81,-42,18,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-68,-69,-70,-71,-72,-73,48,48,-52,-53,-45,48,-46,-47,48,-119,-99,-100,-101,-102,-103,-104,-105,-106,48,48,48,81,81,-31,-32,81,-34,81,81,81,81,81,81,81,-51,48,-57,48,-98,-118,-107,48,48,48,-113,81,48,48,-49,-50,48,-43,48,-114,-115,81,48,48,48,-108,-110,48,-116,-117,48,48,-109,48,48,-112,-111,]),'ID':([6,7,8,9,10,14,18,20,22,24,25,26,27,28,30,31,32,33,34,35,39,42,46,47,48,50,51,52,53,55,56,62,70,72,73,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,114,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[19,-8,-9,-10,-11,19,-1,19,19,57,-85,-86,-83,-82,57,73,19,-14,-15,-16,-1,57,-76,-77,-75,57,57,57,57,-74,-78,-84,114,19,-25,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-68,-69,-70,-71,-72,-73,57,57,57,-24,57,-119,-99,-100,-101,-102,-103,-104,-105,-106,57,57,57,57,57,-98,-118,-107,57,57,57,-113,57,57,57,57,-114,-115,57,57,57,-108,-110,57,-116,-117,57,57,-109,57,57,-112,-111,]),'LPAREN':([6,7,8,9,10,14,15,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,39,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,72,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,110,111,113,117,119,120,121,122,123,124,125,126,127,129,131,132,134,135,136,137,139,156,158,159,160,162,163,165,166,167,168,169,172,173,176,177,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[20,-8,-9,-10,-11,20,31,-1,-17,20,20,53,-85,-86,-83,-82,31,53,20,-14,-15,-16,-1,53,-76,-77,-75,100,104,104,53,53,-48,-74,-78,-54,-55,-56,-58,-59,-84,-20,20,-18,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-68,-69,-70,-71,-72,-73,53,53,-52,-53,53,-19,-21,-22,53,-119,-99,-100,-101,-102,-103,-104,-105,-106,166,167,168,53,53,172,173,53,-51,53,-57,53,-98,-118,-107,53,53,53,-113,53,53,-49,-50,53,53,-114,-115,53,53,53,-108,-110,53,-116,-117,53,53,-109,53,53,-112,-111,]),'SEMI':([6,7,8,9,10,12,13,15,16,17,19,21,22,25,26,27,28,29,37,39,40,41,43,44,45,49,54,57,58,59,60,61,62,64,66,74,75,76,101,102,103,105,106,109,110,111,113,117,118,119,120,121,122,123,124,125,126,127,128,130,133,134,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,159,162,163,164,165,168,169,170,171,174,176,177,179,180,183,184,185,186,190,191,192,193,194,195,196,197,198,200,201,202,205,207,208,209,210,],[-1,-8,-9,-10,-11,-87,28,-13,-91,-92,-17,-89,-1,-85,-86,-83,-82,-12,-87,-1,-88,-93,-64,-42,-28,-44,-48,-54,-55,-56,-58,-59,-84,-20,-42,-90,-18,-1,-52,-53,-45,-46,-47,-60,-19,-21,-22,-1,-63,-119,-99,-100,-101,-102,-103,-104,-105,-106,165,-62,169,-1,-94,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-65,-51,-57,-98,-118,-63,-107,-1,-113,185,186,-95,-49,-50,-43,-61,192,-1,-114,-115,-1,-1,-1,199,200,201,-108,-110,203,-116,-117,-1,-109,-1,-1,-112,-111,]),'RPAREN':([7,8,9,10,15,19,29,31,36,43,44,45,49,54,57,58,59,60,61,64,66,67,68,69,70,71,73,75,100,101,102,103,105,106,107,108,109,110,111,113,114,115,130,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,159,161,164,176,177,179,180,181,182,187,188,189,199,203,204,206,],[-8,-9,-10,-11,-13,-17,-12,-1,75,-64,-42,-28,-44,-48,-54,-55,-56,-58,-59,-20,-42,111,113,-79,-26,-27,-25,-18,156,-52,-53,-45,-46,-47,158,159,-60,-19,-21,-22,-24,-81,-62,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-65,177,-51,-66,-57,-80,-63,-49,-50,-43,-61,190,191,194,195,-67,-1,-1,207,208,]),'COMMA':([12,15,16,19,21,29,37,40,41,43,44,45,49,54,57,58,59,60,61,64,66,67,69,74,75,77,78,101,102,103,105,106,108,109,110,111,113,115,130,138,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,174,175,176,177,179,180,181,182,188,189,],[-87,-13,32,-17,-89,-12,-87,-88,-93,-64,-42,-28,-44,-48,-54,-55,-56,-58,-59,-20,-42,112,-79,-90,-18,139,-96,-52,-53,-45,-46,-47,160,-60,-19,-21,-22,-81,160,-94,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-65,160,178,-51,-66,-57,-80,-95,-97,-49,-50,-43,-61,160,160,178,-67,]),'ASSIGN':([12,15,19,29,37,44,49,54,57,58,59,60,61,64,66,75,101,102,103,105,106,110,111,113,156,159,176,177,179,],[24,-13,-17,-12,24,93,-44,-48,-54,-55,-56,-58,-59,-20,-42,-18,-52,-53,-45,-46,-47,-19,-21,-22,-51,-57,-49,-50,-43,]),'LBRACK':([12,15,19,23,24,25,26,27,28,29,39,42,62,64,75,76,110,111,113,117,119,120,121,122,123,124,125,126,127,139,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-1,-13,-17,39,42,-85,-86,-83,-82,-12,-1,42,-84,-20,-18,39,-19,-21,-22,39,-119,-99,-100,-101,-102,-103,-104,-105,-106,42,-98,-118,-107,-113,-114,-115,39,39,-108,-110,-116,-117,39,-109,39,39,-112,-111,]),'LBRACE':([15,19,29,49,54,57,58,59,60,61,64,75,101,102,110,111,113,156,159,176,177,],[30,-17,30,99,-48,-54,-55,-56,-58,-59,-20,-18,-52,-53,-19,-21,-22,-51,-57,-49,-50,]),'PP':([24,25,26,27,28,30,39,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,117,119,120,121,122,123,124,125,126,127,134,135,139,156,158,159,160,162,163,165,166,167,168,169,172,173,176,177,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[50,-85,-86,-83,-82,50,-1,50,-76,-77,-75,101,50,50,50,50,-48,-74,-78,-54,-55,-56,-58,-59,-84,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-68,-69,-70,-71,-72,-73,50,50,-52,-53,50,50,-119,-99,-100,-101,-102,-103,-104,-105,-106,50,50,50,-51,50,-57,50,-98,-118,-107,50,50,50,-113,50,50,-49,-50,50,50,-114,-115,50,50,50,-108,-110,50,-116,-117,50,50,-109,50,50,-112,-111,]),'MM':([24,25,26,27,28,30,39,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,117,119,120,121,122,123,124,125,126,127,134,135,139,156,158,159,160,162,163,165,166,167,168,169,172,173,176,177,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[51,-85,-86,-83,-82,51,-1,51,-76,-77,-75,102,51,51,51,51,-48,-74,-78,-54,-55,-56,-58,-59,-84,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-68,-69,-70,-71,-72,-73,51,51,-52,-53,51,51,-119,-99,-100,-101,-102,-103,-104,-105,-106,51,51,51,-51,51,-57,51,-98,-118,-107,51,51,51,-113,51,51,-49,-50,51,51,-114,-115,51,51,51,-108,-110,51,-116,-117,51,51,-109,51,51,-112,-111,]),'ADDRESS':([24,25,26,27,28,30,39,42,46,47,48,50,51,52,53,55,56,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[55,-85,-86,-83,-82,55,-1,55,-76,-77,-75,55,55,55,55,-74,-78,-84,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-68,-69,-70,-71,-72,-73,55,55,55,55,-119,-99,-100,-101,-102,-103,-104,-105,-106,55,55,55,55,55,-98,-118,-107,55,55,55,-113,55,55,55,55,-114,-115,55,55,55,-108,-110,55,-116,-117,55,55,-109,55,55,-112,-111,]),'PLUS':([24,25,26,27,28,30,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,117,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,158,159,160,162,163,165,166,167,168,169,171,172,173,176,177,178,179,184,185,186,187,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[46,-85,-86,-83,-82,46,-1,46,79,-42,-28,-76,-77,-75,-44,46,46,46,46,-48,-74,-78,-54,-55,-56,-58,-59,-84,79,-42,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-68,-69,-70,-71,-72,-73,46,46,-52,-53,-45,46,-46,-47,46,-119,-99,-100,-101,-102,-103,-104,-105,-106,46,46,46,-29,-30,-31,-32,79,-34,79,79,79,79,79,79,79,-51,46,-57,46,-98,-118,-107,46,46,46,-113,79,46,46,-49,-50,46,-43,46,-114,-115,79,46,46,46,-108,-110,46,-116,-117,46,46,-109,46,46,-112,-111,]),'MINUS':([24,25,26,27,28,30,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,117,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,156,158,159,160,162,163,165,166,167,168,169,171,172,173,176,177,178,179,184,185,186,187,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[47,-85,-86,-83,-82,47,-1,47,80,-42,-28,-76,-77,-75,-44,47,47,47,47,-48,-74,-78,-54,-55,-56,-58,-59,-84,80,-42,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-68,-69,-70,-71,-72,-73,47,47,-52,-53,-45,47,-46,-47,47,-119,-99,-100,-101,-102,-103,-104,-105,-106,47,47,47,-29,-30,-31,-32,80,-34,80,80,80,80,80,80,80,-51,47,-57,47,-98,-118,-107,47,47,47,-113,80,47,47,-49,-50,47,-43,47,-114,-115,80,47,47,47,-108,-110,47,-116,-117,47,47,-109,47,47,-112,-111,]),'NOT':([24,25,26,27,28,30,39,42,46,47,48,50,51,52,53,55,56,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[56,-85,-86,-83,-82,56,-1,56,-76,-77,-75,56,56,56,56,-74,-78,-84,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-68,-69,-70,-71,-72,-73,56,56,56,56,-119,-99,-100,-101,-102,-103,-104,-105,-106,56,56,56,56,56,-98,-118,-107,56,56,56,-113,56,56,56,56,-114,-115,56,56,56,-108,-110,56,-116,-117,56,56,-109,56,56,-112,-111,]),'STRING_LITERAL':([24,25,26,27,28,30,39,42,46,47,48,50,51,52,53,55,56,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[59,-85,-86,-83,-82,59,-1,59,-76,-77,-75,59,59,59,59,-74,-78,-84,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-68,-69,-70,-71,-72,-73,59,59,59,59,-119,-99,-100,-101,-102,-103,-104,-105,-106,59,59,59,59,59,-98,-118,-107,59,59,59,-113,59,59,59,59,-114,-115,59,59,59,-108,-110,59,-116,-117,59,59,-109,59,59,-112,-111,]),'ICONST':([24,25,26,27,28,30,39,42,46,47,48,50,51,52,53,55,56,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[60,-85,-86,-83,-82,60,-1,60,-76,-77,-75,60,60,60,60,-74,-78,-84,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-68,-69,-70,-71,-72,-73,60,60,60,60,-119,-99,-100,-101,-102,-103,-104,-105,-106,60,60,60,60,60,-98,-118,-107,60,60,60,-113,60,60,60,60,-114,-115,60,60,60,-108,-110,60,-116,-117,60,60,-109,60,60,-112,-111,]),'FCONST':([24,25,26,27,28,30,39,42,46,47,48,50,51,52,53,55,56,62,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,117,119,120,121,122,123,124,125,126,127,134,135,139,158,160,162,163,165,166,167,168,169,172,173,178,184,185,186,190,191,192,196,197,199,200,201,202,203,205,207,208,209,210,],[61,-85,-86,-83,-82,61,-1,61,-76,-77,-75,61,61,61,61,-74,-78,-84,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-68,-69,-70,-71,-72,-73,61,61,61,61,-119,-99,-100,-101,-102,-103,-104,-105,-106,61,61,61,61,61,-98,-118,-107,61,61,61,-113,61,61,61,61,-114,-115,61,61,61,-108,-110,61,-116,-117,61,61,-109,61,61,-112,-111,]),'IF':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,129,129,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,129,129,-108,-110,-116,-117,129,-109,129,129,-112,-111,]),'WHILE':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,131,131,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,131,131,-108,-110,-116,-117,131,-109,131,131,-112,-111,]),'FOR':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,132,132,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,132,132,-108,-110,-116,-117,132,-109,132,132,-112,-111,]),'BREAK':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,133,133,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,133,133,-108,-110,-116,-117,133,-109,133,133,-112,-111,]),'RETURN':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,134,134,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,134,134,-108,-110,-116,-117,134,-109,134,134,-112,-111,]),'ASSERT':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,135,135,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,135,135,-108,-110,-116,-117,135,-109,135,135,-112,-111,]),'PRINT':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,136,136,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,136,136,-108,-110,-116,-117,136,-109,136,136,-112,-111,]),'READ':([25,26,27,28,39,62,76,117,119,120,121,122,123,124,125,126,127,162,163,165,169,185,186,190,191,196,197,200,201,202,205,207,208,209,210,],[-85,-86,-83,-82,-1,-84,137,137,-119,-99,-100,-101,-102,-103,-104,-105,-106,-98,-118,-107,-113,-114,-115,137,137,-108,-110,-116,-117,137,-109,137,137,-112,-111,]),'RBRACK':([25,26,27,28,39,41,43,44,45,49,54,57,58,59,60,61,62,66,76,77,78,101,102,103,105,106,116,117,118,119,120,121,122,123,124,125,126,127,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,156,159,162,163,165,169,174,175,176,177,179,185,186,196,197,200,201,205,209,210,],[-85,-86,-83,-82,-1,-93,-64,-42,-28,-44,-48,-54,-55,-56,-58,-59,-84,-42,-1,138,-96,-52,-53,-45,-46,-47,162,-120,-121,-119,-99,-100,-101,-102,-103,-104,-105,-106,-94,174,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-65,-51,-57,-98,-118,-107,-113,-95,-97,-49,-50,-43,-114,-115,-108,-110,-116,-117,-109,-112,-111,]),'RBRACE':([30,43,44,45,49,54,57,58,59,60,61,63,65,66,101,102,103,105,106,109,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,159,176,177,179,180,],[64,-64,-42,-28,-44,-48,-54,-55,-56,-58,-59,110,-23,-42,-52,-53,-45,-46,-47,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-65,176,-51,-57,-49,-50,-43,-61,]),'DIVIDE':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[82,-42,-28,-44,-48,-54,-55,-56,-58,-59,82,-42,-52,-53,-45,-46,-47,82,82,-31,-32,82,-34,82,82,82,82,82,82,82,-51,-57,82,-49,-50,-43,82,]),'EQUALS':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[83,-42,-28,-44,-48,-54,-55,-56,-58,-59,83,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,83,83,-51,-57,83,-49,-50,-43,83,]),'MOD':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[84,-42,-28,-44,-48,-54,-55,-56,-58,-59,84,-42,-52,-53,-45,-46,-47,84,84,-31,-32,84,-34,84,84,84,84,84,84,84,-51,-57,84,-49,-50,-43,84,]),'GT':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[85,-42,-28,-44,-48,-54,-55,-56,-58,-59,85,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,85,-34,-35,-36,-37,-38,85,85,85,-51,-57,85,-49,-50,-43,85,]),'GET':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[86,-42,-28,-44,-48,-54,-55,-56,-58,-59,86,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,86,-34,-35,-36,-37,-38,86,86,86,-51,-57,86,-49,-50,-43,86,]),'LT':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[87,-42,-28,-44,-48,-54,-55,-56,-58,-59,87,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,87,-34,-35,-36,-37,-38,87,87,87,-51,-57,87,-49,-50,-43,87,]),'LET':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[88,-42,-28,-44,-48,-54,-55,-56,-58,-59,88,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,88,-34,-35,-36,-37,-38,88,88,88,-51,-57,88,-49,-50,-43,88,]),'DIFF':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[89,-42,-28,-44,-48,-54,-55,-56,-58,-59,89,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,89,89,-51,-57,89,-49,-50,-43,89,]),'AND':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[90,-42,-28,-44,-48,-54,-55,-56,-58,-59,90,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,90,-51,-57,90,-49,-50,-43,90,]),'OR':([43,44,45,49,54,57,58,59,60,61,65,66,101,102,103,105,106,140,141,142,143,144,145,146,147,148,149,150,151,152,156,159,171,176,177,179,187,],[91,-42,-28,-44,-48,-54,-55,-56,-58,-59,91,-42,-52,-53,-45,-46,-47,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-51,-57,91,-49,-50,-43,91,]),'TASSIGN':([44,49,54,57,58,59,60,61,66,101,102,103,105,106,156,159,176,177,179,],[94,-44,-48,-54,-55,-56,-58,-59,-42,-52,-53,-45,-46,-47,-51,-57,-49,-50,-43,]),'DASSIGN':([44,49,54,57,58,59,60,61,66,101,102,103,105,106,156,159,176,177,179,],[95,-44,-48,-54,-55,-56,-58,-59,-42,-52,-53,-45,-46,-47,-51,-57,-49,-50,-43,]),'MODASSIGN':([44,49,54,57,58,59,60,61,66,101,102,103,105,106,156,159,176,177,179,],[96,-44,-48,-54,-55,-56,-58,-59,-42,-52,-53,-45,-46,-47,-51,-57,-49,-50,-43,]),'PASSIGN':([44,49,54,57,58,59,60,61,66,101,102,103,105,106,156,159,176,177,179,],[97,-44,-48,-54,-55,-56,-58,-59,-42,-52,-53,-45,-46,-47,-51,-57,-49,-50,-43,]),'MINASSIGN':([44,49,54,57,58,59,60,61,66,101,102,103,105,106,156,159,176,177,179,],[98,-44,-48,-54,-55,-56,-58,-59,-42,-52,-53,-45,-46,-47,-51,-57,-49,-50,-43,]),'ELSE':([120,121,122,123,124,125,126,127,162,165,169,185,186,196,197,200,201,205,209,210,],[-99,-100,-101,-102,-103,-104,-105,-106,-98,-107,-113,-114,-115,202,-110,-116,-117,-109,-112,-111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,11,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,12,25,39,168,],[5,5,27,62,27,184,]),'type_specifier':([0,2,12,25,31,39,53,112,168,],[6,6,22,22,72,22,107,72,22,]),'declarator':([6,20,22,32,72,],[12,36,37,37,115,]),'init_declarator_list_opt':([6,22,],[13,13,]),'pointer':([6,18,20,22,32,72,],[14,34,14,14,14,14,]),'direct_declarator':([6,14,20,22,32,72,],[15,29,15,15,15,15,]),'init_declarator_list':([6,22,],[16,16,]),'empty':([6,12,18,22,31,39,76,117,134,168,184,190,191,192,199,202,203,207,208,],[17,26,35,17,71,26,118,164,164,164,164,164,164,164,164,164,164,164,164,]),'init_declarator':([6,22,32,],[21,21,74,]),'declaration_list_opt':([12,39,],[23,76,]),'declaration_list':([12,39,],[25,25,]),'pointer_opt':([18,],[33,]),'compound_statement':([23,76,117,190,191,202,207,208,],[38,121,121,121,121,121,121,121,]),'initializer':([24,42,139,],[40,78,175,]),'assignment_expression':([24,42,53,76,92,99,100,104,117,134,139,160,166,167,168,173,178,184,190,191,192,199,202,203,207,208,],[41,41,109,109,153,109,157,109,109,109,41,180,109,109,109,157,189,109,109,109,109,109,109,109,109,109,]),'expr':([24,30,42,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[43,65,43,43,43,140,141,142,143,144,145,146,147,148,149,150,151,152,43,43,43,43,43,43,171,43,43,43,43,43,187,43,43,43,43,43,43,43,43,43,43,43,]),'unary_expression':([24,30,42,50,51,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[44,66,44,103,105,66,44,44,66,66,66,66,66,66,66,66,66,66,66,66,66,44,44,44,44,44,44,66,44,66,44,44,44,44,66,44,44,44,44,44,44,44,44,44,44,44,]),'cast_expression':([24,30,42,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[45,45,45,106,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,179,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'postfix_expression':([24,30,42,50,51,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'unary_operator':([24,30,42,50,51,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'primary_expression':([24,30,42,50,51,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'constant':([24,30,42,50,51,52,53,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,99,100,104,117,134,135,139,158,160,166,167,168,172,173,178,184,190,191,192,199,202,203,207,208,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'constant_expression':([30,],[63,]),'parameter_list':([31,],[67,]),'identifier_list_opt':([31,],[68,]),'parameter_declaration':([31,112,],[69,161,]),'identifier_list':([31,],[70,]),'initializer_list':([42,],[77,]),'assignment_operator':([44,],[92,]),'expression':([53,76,99,104,117,134,166,167,168,184,190,191,192,199,202,203,207,208,],[108,130,154,108,130,130,181,182,130,130,130,130,130,130,130,130,130,130,]),'statement_list_opt':([76,],[116,]),'statement_list':([76,],[117,]),'statement':([76,117,190,191,202,207,208,],[119,163,196,197,205,209,210,]),'expression_statement':([76,117,190,191,202,207,208,],[120,120,120,120,120,120,120,]),'selection_statement':([76,117,190,191,202,207,208,],[122,122,122,122,122,122,122,]),'iteration_statement':([76,117,190,191,202,207,208,],[123,123,123,123,123,123,123,]),'jump_statement':([76,117,190,191,202,207,208,],[124,124,124,124,124,124,124,]),'assert_statement':([76,117,190,191,202,207,208,],[125,125,125,125,125,125,125,]),'print_statement':([76,117,190,191,202,207,208,],[126,126,126,126,126,126,126,]),'read_statement':([76,117,190,191,202,207,208,],[127,127,127,127,127,127,127,]),'expression_opt':([76,117,134,168,184,190,191,192,199,202,203,207,208,],[128,128,170,183,193,128,128,198,204,128,206,128,128,]),'argument_expression':([100,173,],[155,188,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',19),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',23),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',28),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',29),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',34),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',35),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_defnition','parser.py',40),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',44),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',45),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',46),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',47),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',52),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',53),
  ('pointer -> TIMES pointer_opt','pointer',2,'p_pointer','parser.py',58),
  ('pointer_opt -> pointer','pointer_opt',1,'p_pointer_opt','parser.py',63),
  ('pointer_opt -> empty','pointer_opt',1,'p_pointer_opt','parser.py',64),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',69),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','parser.py',70),
  ('direct_declarator -> direct_declarator LBRACE constant_expression RBRACE','direct_declarator',4,'p_direct_declarator','parser.py',71),
  ('direct_declarator -> direct_declarator LBRACE RBRACE','direct_declarator',3,'p_direct_declarator','parser.py',72),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',73),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',74),
  ('constant_expression -> expr','constant_expression',1,'p_constant_expression','parser.py',87),
  ('identifier_list -> identifier_list ID','identifier_list',2,'p_identifier_list','parser.py',97),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',98),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',103),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',104),
  ('expr -> cast_expression','expr',1,'p_expr','parser.py',110),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',111),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',112),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',113),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',114),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','parser.py',115),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',116),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',117),
  ('expr -> expr GET expr','expr',3,'p_expr','parser.py',118),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',119),
  ('expr -> expr LET expr','expr',3,'p_expr','parser.py',120),
  ('expr -> expr DIFF expr','expr',3,'p_expr','parser.py',121),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',122),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',123),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',129),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',130),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',136),
  ('unary_expression -> PP unary_expression','unary_expression',2,'p_unary_expression','parser.py',137),
  ('unary_expression -> MM unary_expression','unary_expression',2,'p_unary_expression','parser.py',138),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',139),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',145),
  ('postfix_expression -> postfix_expression LBRACE expression RBRACE','postfix_expression',4,'p_postfix_expression','parser.py',146),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',147),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression','parser.py',148),
  ('postfix_expression -> postfix_expression PP','postfix_expression',2,'p_postfix_expression','parser.py',149),
  ('postfix_expression -> postfix_expression MM','postfix_expression',2,'p_postfix_expression','parser.py',150),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','parser.py',163),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','parser.py',164),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',165),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',166),
  ('constant -> ICONST','constant',1,'p_constant','parser.py',172),
  ('constant -> FCONST','constant',1,'p_constant','parser.py',173),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',178),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',179),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',184),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',185),
  ('assignment_expression -> expr','assignment_expression',1,'p_assignment_expression','parser.py',190),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',191),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',196),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',197),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',205),
  ('assignment_operator -> TASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',206),
  ('assignment_operator -> DASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',207),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',208),
  ('assignment_operator -> PASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',209),
  ('assignment_operator -> MINASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',210),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',215),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',216),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',217),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',218),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',219),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',224),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',225),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',230),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','parser.py',235),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',241),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',242),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',247),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',248),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',253),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',254),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',259),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',260),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',265),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',266),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',272),
  ('initializer -> LBRACK initializer_list RBRACK','initializer',3,'p_initializer','parser.py',273),
  ('initializer -> LBRACK initializer_list COMMA RBRACK','initializer',4,'p_initializer','parser.py',274),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',279),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',280),
  ('compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK','compound_statement',4,'p_compound_statement','parser.py',285),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',291),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',292),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',293),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',294),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',295),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',296),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',297),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',298),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',304),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',309),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',310),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',315),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',316),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',317),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','parser.py',327),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','parser.py',328),
  ('assert_statement -> ASSERT expr SEMI','assert_statement',3,'p_assert_statement','parser.py',333),
  ('print_statement -> PRINT LPAREN expr RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',337),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',342),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',346),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',347),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',355),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',356),
]
