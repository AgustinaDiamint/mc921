
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQUALSDIFFleftGTGETLTLETleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CCOMMENT CCONST CHAR COMMA CPPCOMMENT DASSIGN DIFF DIVIDE ELSE EQUALS ERROR FCONST FLOAT FOR GET GT ICONST ID IF INT LBRACE LBRACK LET LPAREN LT MINASSIGN MINUS MM MOD MODASSIGN NOT OR PASSIGN PLUS PP PRINT RBRACE RBRACK READ RETURN RPAREN SEMI STRING_LITERAL TASSIGN TIMES UNMATCHEDQUOTE UNTERMCOMMENT VOID WHILEempty :  program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration \n         function_definition : type_specifier_opt declarator declaration_list_opt compound_statement  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        type_specifier_opt : type_specifier\n                             | empty\n         declarator : pointer direct_declarator\n                        | direct_declarator\n         pointer : TIMES pointer_opt\n        pointer_opt : pointer\n                      | empty\n         direct_declarator : ID\n                      | LPAREN declarator RPAREN\n                      | direct_declarator LBRACE constant_exp_opt RBRACE\n                      | direct_declarator LPAREN parameter_list RPAREN\n                      | direct_declarator LPAREN identifier_list_opt RPAREN\n         constant_expression : expr  constant_exp_opt : constant_expression\n                            | empty\n         identifier_list : identifier_list ID\n                            | ID\n         identifier_list_opt : identifier_list\n                                | empty\n        \n        expr :  cast_expression\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr EQUALS expr\n                | expr MOD expr\n                | expr GT expr\n                | expr GET expr\n                | expr LT expr\n                | expr LET expr\n                | expr DIFF expr\n                | expr AND expr\n                | expr OR expr\n        \n        cast_expression : unary_expression\n                    | LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                        | PP unary_expression\n                        | MM unary_expression\n                        | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n                            | postfix_expression LBRACE expression RBRACE\n                            | postfix_expression LPAREN argument_expression_opt RPAREN\n                            | postfix_expression PP\n                            | postfix_expression MM\n        \n        primary_expression : ID\n                            | constant\n                            | STRING_LITERAL\n                            | LPAREN expression RPAREN\n         constant : ICONST\n                    | FCONST\n         expression : assignment_expression\n                        | expression COMMA assignment_expression\n         expression_opt : expression\n                            | empty\n        assignment_expression : expr\n                            | unary_expression assignment_operator assignment_expression\n         assignment_expression_opt : empty\n                                      | assignment_expression\n                                        \n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n        argument_expression_opt : empty\n                                    | argument_expression\n         assignment_operator : ASSIGN\n                                | TASSIGN\n                                | DASSIGN\n                                | MODASSIGN\n                                | PASSIGN\n                                | MINASSIGN\n        unary_operator : AND\n                    | TIMES\n                    | PLUS\n                    | MINUS\n                    | NOT\n        parameter_list : parameter_declaration\n                        | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n        declaration : type_specifier init_declarator_list_opt SEMI \n         declaration_list : declaration\n                    | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                | empty\n        init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt : init_declarator_list\n                                    | empty\n        initializer : assignment_expression\n                    | LBRACK initializer_list RBRACK\n                    | LBRACK initializer_list COMMA RBRACK\n         initializer_list : initializer\n                    | initializer_list COMMA initializer\n        compound_statement : LBRACK declaration_list_opt statement_list_opt RBRACK\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n            selection_statement : IF LPAREN expression RPAREN statement\n                                    | IF LPAREN expression RPAREN statement ELSE statement\n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                    | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                    | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        jump_statement : BREAK SEMI\n                        | RETURN expression_opt SEMI\n         assert_statement : ASSERT expr SEMI  print_statement : PRINT LPAREN expr RPAREN SEMI \n        read_statement : READ LPAREN argument_expression RPAREN SEMI statement_list : statement_list statement\n                    | statement\n         statement_list_opt : statement_list\n                                | empty\n         statement : ID ASSIGN expr\n         expr : LPAREN expr RPAREN\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,52,72,80,107,108,109,110,171,178,],[9,9,-3,-5,-6,-4,9,-15,-19,9,-89,-14,9,-88,-7,9,-90,9,-20,-21,9,-22,9,-23,-104,9,]),'CHAR':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,52,72,80,107,108,109,110,171,178,],[10,10,-3,-5,-6,-4,10,-15,-19,10,-89,-14,10,-88,-7,10,-90,10,-20,-21,10,-22,10,-23,-104,10,]),'INT':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,52,72,80,107,108,109,110,171,178,],[11,11,-3,-5,-6,-4,11,-15,-19,11,-89,-14,11,-88,-7,11,-90,11,-20,-21,11,-22,11,-23,-104,11,]),'FLOAT':([0,2,3,4,5,13,14,16,18,26,28,30,32,37,40,41,42,52,72,80,107,108,109,110,171,178,],[12,12,-3,-5,-6,-4,12,-15,-19,12,-89,-14,12,-88,-7,12,-90,12,-20,-21,12,-22,12,-23,-104,12,]),'TIMES':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,27,28,29,31,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,181,182,183,184,186,187,188,191,195,196,197,198,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-1,-1,-3,-5,-6,17,17,-13,-8,-9,-10,-11,-4,17,17,-91,-92,-89,17,50,-88,17,50,-7,-1,-90,83,-31,-82,-83,-81,-80,50,-45,-47,50,50,50,-51,-84,-56,-57,-58,-60,-61,17,50,83,-45,50,50,50,50,50,50,50,50,50,50,50,50,50,50,83,-45,50,50,-54,-55,-48,50,-49,-50,50,50,-74,-75,-76,-77,-78,-79,50,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,50,50,83,83,-34,-35,83,-37,83,83,83,83,83,83,83,-129,50,-59,50,50,-104,-124,50,-113,50,50,50,-119,83,50,50,-46,-52,-53,50,83,50,-120,-121,83,50,50,50,-114,-116,50,-122,-123,50,50,-115,50,50,-118,-117,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,19,26,27,28,29,31,32,33,34,35,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,70,71,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,111,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-1,-1,-3,-5,-6,18,18,-13,-8,-9,-10,-11,-4,18,-1,18,-91,-92,-89,18,60,71,-16,-17,-18,-88,18,60,-7,-1,-90,-31,-82,-83,-81,-80,60,-45,-47,60,60,60,-51,-84,-56,-57,-58,-60,-61,111,18,-28,60,134,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-54,-55,-48,60,-49,-50,60,-27,60,-74,-75,-76,-77,-78,-79,134,-125,-105,-106,-107,-108,-109,-110,-111,-112,60,60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,60,-59,60,60,-104,-124,60,-113,60,60,60,-119,60,60,-46,-52,-53,60,-128,60,-120,-121,134,134,60,-114,-116,60,-122,-123,134,60,-115,134,134,-118,-117,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,26,27,28,29,30,31,33,34,35,37,38,39,40,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,70,72,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,108,110,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,136,138,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-1,-1,-3,-5,-6,19,19,-13,-8,-9,-10,-11,-4,19,32,-1,-19,19,-91,-92,-89,19,32,52,-16,-17,-18,-88,19,52,-7,-1,-90,-31,-82,-83,-81,-80,52,-45,100,104,104,107,-51,-84,-56,-57,-58,-60,-61,19,-20,52,52,-21,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-54,-55,-48,52,-49,-50,52,-22,-23,52,-74,-75,-76,-77,-78,-79,52,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,176,177,178,52,52,182,183,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,107,-59,52,52,-104,-124,52,-113,52,52,52,-119,52,52,-46,-52,-53,52,-128,52,-120,-121,52,52,52,-114,-116,52,-122,-123,52,52,-115,52,52,-118,-117,]),'$end':([1,2,3,4,5,13,37,40,171,],[0,-2,-3,-5,-6,-4,-88,-7,-104,]),'SEMI':([7,9,10,11,12,16,18,20,21,22,23,24,26,27,28,29,30,37,41,42,47,53,54,58,60,61,62,63,64,72,73,74,75,77,78,79,80,97,101,102,103,105,106,108,110,123,124,125,126,127,128,129,130,131,132,133,134,135,137,140,141,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,168,170,171,172,173,175,178,179,180,181,184,185,186,187,189,191,194,195,196,197,201,202,203,204,205,206,207,208,209,211,212,213,216,218,219,220,221,],[-1,-8,-9,-10,-11,-15,-19,37,-97,-98,-95,-93,-91,-92,-89,-1,-14,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,-20,-96,-94,-99,-66,-45,-1,-21,-62,-54,-55,-48,-49,-50,-22,-23,-1,-65,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,175,-64,179,-1,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-100,-67,-104,-124,-65,-113,-1,-119,196,197,-46,-63,-52,-53,-101,-128,203,-1,-120,-121,-1,-1,-1,210,211,212,-114,-116,214,-122,-123,-1,-115,-1,-1,-118,-117,]),'RPAREN':([9,10,11,12,16,18,30,32,36,47,53,54,58,60,61,62,63,64,65,66,67,68,69,71,72,77,78,80,94,95,96,97,98,100,101,102,103,105,106,108,110,111,112,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,164,165,166,167,170,173,184,185,186,187,192,193,198,199,200,210,214,215,217,],[-8,-9,-10,-11,-15,-19,-14,-1,72,-31,-45,-47,-51,-56,-57,-58,-60,-61,108,110,-85,-29,-30,-28,-20,-66,-45,-21,158,159,160,-62,-45,-1,-54,-55,-48,-49,-50,-22,-23,-27,-87,-64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,187,-72,-73,-70,-86,-67,-65,-46,-63,-52,-53,201,202,205,206,-71,-1,-1,218,219,]),'LBRACK':([14,16,18,25,26,27,28,30,37,39,41,42,47,53,54,58,60,61,62,63,64,72,76,79,80,101,102,103,105,106,108,110,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,169,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-1,-15,-19,41,-91,-92,-89,-14,-88,76,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,-20,76,41,-21,-54,-55,-48,-49,-50,-22,-23,41,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,76,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,41,41,-114,-116,-122,-123,41,-115,41,41,-118,-117,]),'ASSIGN':([16,18,24,30,53,54,58,60,61,62,63,64,72,78,80,98,101,102,103,105,106,108,110,134,160,184,186,187,],[-15,-19,39,-14,-45,-47,-51,-56,-57,-58,-60,-61,-20,116,-21,116,-54,-55,-48,-49,-50,-22,-23,174,-59,-46,-52,-53,]),'COMMA':([16,18,21,23,24,30,47,53,54,58,60,61,62,63,64,65,67,72,73,74,75,77,78,80,94,96,97,98,101,102,103,105,106,108,110,112,113,114,134,137,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,162,165,166,167,168,170,184,185,186,187,189,190,192,193,199,200,],[-15,-19,38,-95,-93,-14,-31,-45,-47,-51,-56,-57,-58,-60,-61,109,-85,-20,-96,-94,-99,-66,-45,-21,-66,161,-62,-45,-54,-55,-48,-49,-50,-22,-23,-87,169,-102,-56,161,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,161,188,-70,-86,-100,-67,-46,-63,-52,-53,-101,-103,161,161,188,-71,]),'LBRACE':([16,18,30,54,58,60,61,62,63,64,72,80,101,102,108,110,134,160,186,187,],[31,-19,31,99,-51,-56,-57,-58,-60,-61,-20,-21,-54,-55,-22,-23,-56,-59,-52,-53,]),'IF':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,136,-54,-55,-48,-49,-50,136,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,136,136,-114,-116,-122,-123,136,-115,136,136,-118,-117,]),'WHILE':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,138,-54,-55,-48,-49,-50,138,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,138,138,-114,-116,-122,-123,138,-115,138,138,-118,-117,]),'FOR':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,139,-54,-55,-48,-49,-50,139,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,139,139,-114,-116,-122,-123,139,-115,139,139,-118,-117,]),'BREAK':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,140,-54,-55,-48,-49,-50,140,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,140,140,-114,-116,-122,-123,140,-115,140,140,-118,-117,]),'RETURN':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,141,-54,-55,-48,-49,-50,141,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,141,141,-114,-116,-122,-123,141,-115,141,141,-118,-117,]),'ASSERT':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,142,-54,-55,-48,-49,-50,142,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,142,142,-114,-116,-122,-123,142,-115,142,142,-118,-117,]),'PRINT':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,143,-54,-55,-48,-49,-50,143,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,143,143,-114,-116,-122,-123,143,-115,143,143,-118,-117,]),'READ':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,79,101,102,103,105,106,123,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,172,175,179,184,186,187,191,196,197,201,202,207,208,211,212,213,216,218,219,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,144,-54,-55,-48,-49,-50,144,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-124,-113,-119,-46,-52,-53,-128,-120,-121,144,144,-114,-116,-122,-123,144,-115,144,144,-118,-117,]),'PP':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,55,-88,55,-1,-90,-31,-82,-83,-81,-80,55,-45,101,55,55,55,-51,-84,-56,-57,-58,-60,-61,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-54,-55,-48,55,-49,-50,55,55,-74,-75,-76,-77,-78,-79,55,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,55,55,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,55,-59,55,55,-104,-124,55,-113,55,55,55,-119,55,55,-46,-52,-53,55,-128,55,-120,-121,55,55,55,-114,-116,55,-122,-123,55,55,-115,55,55,-118,-117,]),'MM':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,56,-88,56,-1,-90,-31,-82,-83,-81,-80,56,-45,102,56,56,56,-51,-84,-56,-57,-58,-60,-61,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-54,-55,-48,56,-49,-50,56,56,-74,-75,-76,-77,-78,-79,56,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,56,56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,56,-59,56,56,-104,-124,56,-113,56,56,56,-119,56,56,-46,-52,-53,56,-128,56,-120,-121,56,56,56,-114,-116,56,-122,-123,56,56,-115,56,56,-118,-117,]),'AND':([26,27,28,31,37,39,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,181,182,183,184,186,187,188,191,195,196,197,198,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,51,-88,51,-1,-90,92,-31,-82,-83,-81,-80,51,-45,-47,51,51,51,-51,-84,-56,-57,-58,-60,-61,51,92,-45,51,51,51,51,51,51,51,51,51,51,51,51,51,51,92,-45,51,51,-54,-55,-48,51,-49,-50,51,51,-74,-75,-76,-77,-78,-79,51,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,51,51,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,92,-129,51,-59,51,51,-104,-124,51,-113,51,51,51,-119,92,51,51,-46,-52,-53,51,92,51,-120,-121,92,51,51,51,-114,-116,51,-122,-123,51,51,-115,51,51,-118,-117,]),'PLUS':([26,27,28,31,37,39,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,181,182,183,184,186,187,188,191,195,196,197,198,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,48,-88,48,-1,-90,81,-31,-82,-83,-81,-80,48,-45,-47,48,48,48,-51,-84,-56,-57,-58,-60,-61,48,81,-45,48,48,48,48,48,48,48,48,48,48,48,48,48,48,81,-45,48,48,-54,-55,-48,48,-49,-50,48,48,-74,-75,-76,-77,-78,-79,48,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,48,48,-32,-33,-34,-35,81,-37,81,81,81,81,81,81,81,-129,48,-59,48,48,-104,-124,48,-113,48,48,48,-119,81,48,48,-46,-52,-53,48,81,48,-120,-121,81,48,48,48,-114,-116,48,-122,-123,48,48,-115,48,48,-118,-117,]),'MINUS':([26,27,28,31,37,39,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,134,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,181,182,183,184,186,187,188,191,195,196,197,198,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,49,-88,49,-1,-90,82,-31,-82,-83,-81,-80,49,-45,-47,49,49,49,-51,-84,-56,-57,-58,-60,-61,49,82,-45,49,49,49,49,49,49,49,49,49,49,49,49,49,49,82,-45,49,49,-54,-55,-48,49,-49,-50,49,49,-74,-75,-76,-77,-78,-79,49,-125,-105,-106,-107,-108,-109,-110,-111,-112,-56,49,49,-32,-33,-34,-35,82,-37,82,82,82,82,82,82,82,-129,49,-59,49,49,-104,-124,49,-113,49,49,49,-119,82,49,49,-46,-52,-53,49,82,49,-120,-121,82,49,49,49,-114,-116,49,-122,-123,49,49,-115,49,49,-118,-117,]),'NOT':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,59,-88,59,-1,-90,-31,-82,-83,-81,-80,59,-45,-47,59,59,59,-51,-84,-56,-57,-58,-60,-61,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-54,-55,-48,59,-49,-50,59,59,-74,-75,-76,-77,-78,-79,59,-125,-105,-106,-107,-108,-109,-110,-111,-112,59,59,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,59,-59,59,59,-104,-124,59,-113,59,59,59,-119,59,59,-46,-52,-53,59,-128,59,-120,-121,59,59,59,-114,-116,59,-122,-123,59,59,-115,59,59,-118,-117,]),'STRING_LITERAL':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,62,-88,62,-1,-90,-31,-82,-83,-81,-80,62,-45,-47,62,62,62,-51,-84,-56,-57,-58,-60,-61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-54,-55,-48,62,-49,-50,62,62,-74,-75,-76,-77,-78,-79,62,-125,-105,-106,-107,-108,-109,-110,-111,-112,62,62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,62,-59,62,62,-104,-124,62,-113,62,62,62,-119,62,62,-46,-52,-53,62,-128,62,-120,-121,62,62,62,-114,-116,62,-122,-123,62,62,-115,62,62,-118,-117,]),'ICONST':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,63,-88,63,-1,-90,-31,-82,-83,-81,-80,63,-45,-47,63,63,63,-51,-84,-56,-57,-58,-60,-61,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-54,-55,-48,63,-49,-50,63,63,-74,-75,-76,-77,-78,-79,63,-125,-105,-106,-107,-108,-109,-110,-111,-112,63,63,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,63,-59,63,63,-104,-124,63,-113,63,63,63,-119,63,63,-46,-52,-53,63,-128,63,-120,-121,63,63,63,-114,-116,63,-122,-123,63,63,-115,63,63,-118,-117,]),'FCONST':([26,27,28,31,37,39,41,42,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,101,102,103,104,105,106,107,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,132,133,141,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,169,171,172,174,175,176,177,178,179,182,183,184,186,187,188,191,195,196,197,201,202,203,207,208,210,211,212,213,214,216,218,219,220,221,],[-91,-92,-89,64,-88,64,-1,-90,-31,-82,-83,-81,-80,64,-45,-47,64,64,64,-51,-84,-56,-57,-58,-60,-61,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-54,-55,-48,64,-49,-50,64,64,-74,-75,-76,-77,-78,-79,64,-125,-105,-106,-107,-108,-109,-110,-111,-112,64,64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,64,-59,64,64,-104,-124,64,-113,64,64,64,-119,64,64,-46,-52,-53,64,-128,64,-120,-121,64,64,64,-114,-116,64,-122,-123,64,64,-115,64,64,-118,-117,]),'RBRACK':([26,27,28,37,41,42,47,53,54,58,60,61,62,63,64,75,77,78,79,101,102,103,105,106,113,114,122,123,124,125,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,168,169,170,171,172,175,179,184,186,187,189,190,191,196,197,207,208,211,212,216,220,221,],[-91,-92,-89,-88,-1,-90,-31,-45,-47,-51,-56,-57,-58,-60,-61,-99,-66,-45,-1,-54,-55,-48,-49,-50,168,-102,171,-126,-127,-125,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-100,189,-67,-104,-124,-113,-119,-46,-52,-53,-101,-103,-128,-120,-121,-114,-116,-122,-123,-115,-118,-117,]),'RBRACE':([31,43,44,45,46,47,53,54,58,60,61,62,63,64,77,78,97,101,102,103,105,106,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,162,170,184,185,186,187,],[-1,80,-25,-26,-24,-31,-45,-47,-51,-56,-57,-58,-60,-61,-66,-45,-62,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,186,-67,-46,-63,-52,-53,]),'DIVIDE':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[84,-31,-45,-47,-51,-56,-57,-58,-60,-61,84,-45,84,-45,-54,-55,-48,-49,-50,-56,84,84,-34,-35,84,-37,84,84,84,84,84,84,84,-129,-59,84,-46,-52,-53,84,84,]),'EQUALS':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[85,-31,-45,-47,-51,-56,-57,-58,-60,-61,85,-45,85,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,85,85,-129,-59,85,-46,-52,-53,85,85,]),'MOD':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[86,-31,-45,-47,-51,-56,-57,-58,-60,-61,86,-45,86,-45,-54,-55,-48,-49,-50,-56,86,86,-34,-35,86,-37,86,86,86,86,86,86,86,-129,-59,86,-46,-52,-53,86,86,]),'GT':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[87,-31,-45,-47,-51,-56,-57,-58,-60,-61,87,-45,87,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,87,-37,-38,-39,-40,-41,87,87,87,-129,-59,87,-46,-52,-53,87,87,]),'GET':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[88,-31,-45,-47,-51,-56,-57,-58,-60,-61,88,-45,88,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,88,-37,-38,-39,-40,-41,88,88,88,-129,-59,88,-46,-52,-53,88,88,]),'LT':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[89,-31,-45,-47,-51,-56,-57,-58,-60,-61,89,-45,89,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,89,-37,-38,-39,-40,-41,89,89,89,-129,-59,89,-46,-52,-53,89,89,]),'LET':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[90,-31,-45,-47,-51,-56,-57,-58,-60,-61,90,-45,90,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,90,-37,-38,-39,-40,-41,90,90,90,-129,-59,90,-46,-52,-53,90,90,]),'DIFF':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[91,-31,-45,-47,-51,-56,-57,-58,-60,-61,91,-45,91,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,91,91,-129,-59,91,-46,-52,-53,91,91,]),'OR':([46,47,53,54,58,60,61,62,63,64,77,78,94,98,101,102,103,105,106,134,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,181,184,186,187,191,198,],[93,-31,-45,-47,-51,-56,-57,-58,-60,-61,93,-45,93,-45,-54,-55,-48,-49,-50,-56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,93,-46,-52,-53,93,93,]),'ELSE':([47,53,54,58,60,61,62,63,64,101,102,103,105,106,126,127,128,129,130,131,132,133,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,171,175,179,184,186,187,191,196,197,207,208,211,212,216,220,221,],[-31,-45,-47,-51,-56,-57,-58,-60,-61,-54,-55,-48,-49,-50,-105,-106,-107,-108,-109,-110,-111,-112,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-129,-59,-104,-113,-119,-46,-52,-53,-128,-120,-121,213,-116,-122,-123,-115,-118,-117,]),'TASSIGN':([53,54,58,60,61,62,63,64,78,98,101,102,103,105,106,134,160,184,186,187,],[-45,-47,-51,-56,-57,-58,-60,-61,117,117,-54,-55,-48,-49,-50,-56,-59,-46,-52,-53,]),'DASSIGN':([53,54,58,60,61,62,63,64,78,98,101,102,103,105,106,134,160,184,186,187,],[-45,-47,-51,-56,-57,-58,-60,-61,118,118,-54,-55,-48,-49,-50,-56,-59,-46,-52,-53,]),'MODASSIGN':([53,54,58,60,61,62,63,64,78,98,101,102,103,105,106,134,160,184,186,187,],[-45,-47,-51,-56,-57,-58,-60,-61,119,119,-54,-55,-48,-49,-50,-56,-59,-46,-52,-53,]),'PASSIGN':([53,54,58,60,61,62,63,64,78,98,101,102,103,105,106,134,160,184,186,187,],[-45,-47,-51,-56,-57,-58,-60,-61,120,120,-54,-55,-48,-49,-50,-56,-59,-46,-52,-53,]),'MINASSIGN':([53,54,58,60,61,62,63,64,78,98,101,102,103,105,106,134,160,184,186,187,],[-45,-47,-51,-56,-57,-58,-60,-61,121,121,-54,-55,-48,-49,-50,-56,-59,-46,-52,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,13,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,14,26,41,178,],[5,5,28,42,28,195,]),'type_specifier_opt':([0,2,],[6,6,]),'type_specifier':([0,2,14,26,32,41,52,107,109,178,],[7,7,29,29,70,29,95,95,70,29,]),'empty':([0,2,7,14,17,29,31,32,41,79,100,123,141,178,195,201,202,203,210,213,214,218,219,],[8,8,22,27,35,22,45,69,27,124,164,173,173,173,173,173,173,173,173,173,173,173,173,]),'declarator':([6,7,19,29,38,70,],[14,24,36,24,24,112,]),'pointer':([6,7,17,19,29,38,70,],[15,15,34,15,15,15,15,]),'direct_declarator':([6,7,15,19,29,38,70,],[16,16,30,16,16,16,16,]),'init_declarator_list_opt':([7,29,],[20,20,]),'init_declarator_list':([7,29,],[21,21,]),'init_declarator':([7,29,38,],[23,23,73,]),'declaration_list_opt':([14,41,],[25,79,]),'declaration_list':([14,41,],[26,26,]),'pointer_opt':([17,],[33,]),'compound_statement':([25,79,123,201,202,213,218,219,],[40,127,127,127,127,127,127,127,]),'constant_exp_opt':([31,],[43,]),'constant_expression':([31,],[44,]),'expr':([31,39,52,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[46,77,94,77,77,145,146,147,148,149,150,151,152,153,154,155,156,157,77,77,77,77,77,77,77,181,77,77,191,77,77,77,198,77,77,77,77,77,77,77,77,77,77,77,]),'cast_expression':([31,39,52,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[47,47,47,106,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,184,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,39,52,55,56,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[53,78,98,103,105,53,78,78,53,53,53,53,53,53,53,53,53,53,53,53,53,78,78,78,78,78,78,78,53,53,78,78,53,78,78,78,53,78,78,78,78,78,78,78,78,78,78,78,]),'postfix_expression':([31,39,52,55,56,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([31,39,52,55,56,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'primary_expression':([31,39,52,55,56,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'constant':([31,39,52,55,56,57,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,99,100,104,107,115,123,141,142,159,161,169,174,176,177,178,182,183,188,195,201,202,203,210,213,214,218,219,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'parameter_list':([32,],[65,]),'identifier_list_opt':([32,],[66,]),'parameter_declaration':([32,109,],[67,167,]),'identifier_list':([32,],[68,]),'initializer':([39,76,169,],[74,114,190,]),'assignment_expression':([39,52,76,79,99,100,104,107,115,123,141,161,169,176,177,178,183,188,195,201,202,203,210,213,214,218,219,],[75,97,75,97,97,166,97,97,170,97,97,185,75,97,97,97,166,200,97,97,97,97,97,97,97,97,97,]),'expression':([52,79,99,104,107,123,141,176,177,178,195,201,202,203,210,213,214,218,219,],[96,137,162,96,96,137,137,192,193,137,137,137,137,137,137,137,137,137,137,]),'initializer_list':([76,],[113,]),'assignment_operator':([78,98,],[115,115,]),'statement_list_opt':([79,],[122,]),'statement_list':([79,],[123,]),'statement':([79,123,201,202,213,218,219,],[125,172,207,208,216,220,221,]),'expression_statement':([79,123,201,202,213,218,219,],[126,126,126,126,126,126,126,]),'selection_statement':([79,123,201,202,213,218,219,],[128,128,128,128,128,128,128,]),'iteration_statement':([79,123,201,202,213,218,219,],[129,129,129,129,129,129,129,]),'jump_statement':([79,123,201,202,213,218,219,],[130,130,130,130,130,130,130,]),'assert_statement':([79,123,201,202,213,218,219,],[131,131,131,131,131,131,131,]),'print_statement':([79,123,201,202,213,218,219,],[132,132,132,132,132,132,132,]),'read_statement':([79,123,201,202,213,218,219,],[133,133,133,133,133,133,133,]),'expression_opt':([79,123,141,178,195,201,202,203,210,213,214,218,219,],[135,135,180,194,204,135,135,209,215,135,217,135,135,]),'argument_expression_opt':([100,],[163,]),'argument_expression':([100,183,],[165,199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',16),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',20),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',25),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',26),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',31),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',32),
  ('function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement','function_definition',4,'p_function_defnition','parser.py',37),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',41),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',42),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',43),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',44),
  ('type_specifier_opt -> type_specifier','type_specifier_opt',1,'p_type_specifier_opt','parser.py',49),
  ('type_specifier_opt -> empty','type_specifier_opt',1,'p_type_specifier_opt','parser.py',50),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',55),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',56),
  ('pointer -> TIMES pointer_opt','pointer',2,'p_pointer','parser.py',61),
  ('pointer_opt -> pointer','pointer_opt',1,'p_pointer_opt','parser.py',66),
  ('pointer_opt -> empty','pointer_opt',1,'p_pointer_opt','parser.py',67),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',72),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','parser.py',73),
  ('direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE','direct_declarator',4,'p_direct_declarator','parser.py',74),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',75),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',76),
  ('constant_expression -> expr','constant_expression',1,'p_constant_expression','parser.py',86),
  ('constant_exp_opt -> constant_expression','constant_exp_opt',1,'p_constant_exp_opt','parser.py',90),
  ('constant_exp_opt -> empty','constant_exp_opt',1,'p_constant_exp_opt','parser.py',91),
  ('identifier_list -> identifier_list ID','identifier_list',2,'p_identifier_list','parser.py',96),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',97),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',102),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',103),
  ('expr -> cast_expression','expr',1,'p_expr','parser.py',109),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',110),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',111),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',112),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',113),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','parser.py',114),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',115),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',116),
  ('expr -> expr GET expr','expr',3,'p_expr','parser.py',117),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',118),
  ('expr -> expr LET expr','expr',3,'p_expr','parser.py',119),
  ('expr -> expr DIFF expr','expr',3,'p_expr','parser.py',120),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',121),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',122),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',128),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',129),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',135),
  ('unary_expression -> PP unary_expression','unary_expression',2,'p_unary_expression','parser.py',136),
  ('unary_expression -> MM unary_expression','unary_expression',2,'p_unary_expression','parser.py',137),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',138),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',144),
  ('postfix_expression -> postfix_expression LBRACE expression RBRACE','postfix_expression',4,'p_postfix_expression','parser.py',145),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',146),
  ('postfix_expression -> postfix_expression PP','postfix_expression',2,'p_postfix_expression','parser.py',147),
  ('postfix_expression -> postfix_expression MM','postfix_expression',2,'p_postfix_expression','parser.py',148),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','parser.py',159),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','parser.py',160),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',161),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',162),
  ('constant -> ICONST','constant',1,'p_constant','parser.py',168),
  ('constant -> FCONST','constant',1,'p_constant','parser.py',169),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',174),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',175),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',180),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',181),
  ('assignment_expression -> expr','assignment_expression',1,'p_assignment_expression','parser.py',186),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',187),
  ('assignment_expression_opt -> empty','assignment_expression_opt',1,'p_assignment_expression_opt','parser.py',192),
  ('assignment_expression_opt -> assignment_expression','assignment_expression_opt',1,'p_assignment_expression_opt','parser.py',193),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',199),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',200),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','parser.py',208),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','parser.py',209),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',214),
  ('assignment_operator -> TASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',215),
  ('assignment_operator -> DASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',216),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',217),
  ('assignment_operator -> PASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',218),
  ('assignment_operator -> MINASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',219),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','parser.py',224),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',225),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',226),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',227),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',228),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',233),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',234),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',239),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','parser.py',244),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',250),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',251),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',256),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',257),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',262),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',263),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',268),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',269),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',274),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',275),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',281),
  ('initializer -> LBRACK initializer_list RBRACK','initializer',3,'p_initializer','parser.py',282),
  ('initializer -> LBRACK initializer_list COMMA RBRACK','initializer',4,'p_initializer','parser.py',283),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',288),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',289),
  ('compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK','compound_statement',4,'p_compound_statement','parser.py',294),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',300),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',301),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',302),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',303),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',304),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',305),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',306),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',307),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',313),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',318),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',319),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',324),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',325),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',326),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','parser.py',336),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','parser.py',337),
  ('assert_statement -> ASSERT expr SEMI','assert_statement',3,'p_assert_statement','parser.py',342),
  ('print_statement -> PRINT LPAREN expr RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',346),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',351),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',355),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',356),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',364),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',365),
  ('statement -> ID ASSIGN expr','statement',3,'p_assign_statement','parser.py',370),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_compound_expr','parser.py',375),
]
