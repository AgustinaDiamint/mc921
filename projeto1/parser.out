Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CCOMMENT
    CCONST
    CPPCOMMENT
    ERROR
    UNMATCHEDQUOTE
    UNTERMCOMMENT

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> global_declaration_list
Rule 3     global_declaration_list -> global_declaration
Rule 4     global_declaration_list -> global_declaration_list global_declaration
Rule 5     global_declaration -> function_definition
Rule 6     global_declaration -> declaration
Rule 7     function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> FLOAT
Rule 12    declarator -> pointer direct_declarator
Rule 13    declarator -> direct_declarator
Rule 14    pointer -> TIMES pointer_opt
Rule 15    pointer_opt -> pointer
Rule 16    pointer_opt -> empty
Rule 17    direct_declarator -> ID
Rule 18    direct_declarator -> LPAREN declarator RPAREN
Rule 19    direct_declarator -> direct_declarator LBRACE constant_expression RBRACE
Rule 20    direct_declarator -> direct_declarator LBRACE RBRACE
Rule 21    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 22    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 23    constant_expression -> expr
Rule 24    identifier_list -> identifier_list ID
Rule 25    identifier_list -> ID
Rule 26    identifier_list_opt -> identifier_list
Rule 27    identifier_list_opt -> empty
Rule 28    expr -> cast_expression
Rule 29    expr -> expr PLUS expr
Rule 30    expr -> expr MINUS expr
Rule 31    expr -> expr TIMES expr
Rule 32    expr -> expr DIVIDE expr
Rule 33    expr -> expr EQUALS expr
Rule 34    expr -> expr MOD expr
Rule 35    expr -> expr GT expr
Rule 36    expr -> expr GET expr
Rule 37    expr -> expr LT expr
Rule 38    expr -> expr LET expr
Rule 39    expr -> expr DIFF expr
Rule 40    expr -> expr AND expr
Rule 41    expr -> expr OR expr
Rule 42    cast_expression -> unary_expression
Rule 43    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 44    unary_expression -> postfix_expression
Rule 45    unary_expression -> PP unary_expression
Rule 46    unary_expression -> MM unary_expression
Rule 47    unary_expression -> unary_operator cast_expression
Rule 48    postfix_expression -> primary_expression
Rule 49    postfix_expression -> postfix_expression LBRACE expression RBRACE
Rule 50    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 51    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 52    postfix_expression -> postfix_expression PP
Rule 53    postfix_expression -> postfix_expression MM
Rule 54    primary_expression -> ID
Rule 55    primary_expression -> constant
Rule 56    primary_expression -> STRING_LITERAL
Rule 57    primary_expression -> LPAREN expression RPAREN
Rule 58    constant -> ICONST
Rule 59    constant -> FCONST
Rule 60    expression -> assignment_expression
Rule 61    expression -> expression COMMA assignment_expression
Rule 62    expression_opt -> expression
Rule 63    expression_opt -> empty
Rule 64    assignment_expression -> expr
Rule 65    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 66    argument_expression -> assignment_expression
Rule 67    argument_expression -> argument_expression COMMA assignment_expression
Rule 68    assignment_operator -> ASSIGN
Rule 69    assignment_operator -> TASSIGN
Rule 70    assignment_operator -> DASSIGN
Rule 71    assignment_operator -> MODASSIGN
Rule 72    assignment_operator -> PASSIGN
Rule 73    assignment_operator -> MINASSIGN
Rule 74    unary_operator -> ADDRESS
Rule 75    unary_operator -> TIMES
Rule 76    unary_operator -> PLUS
Rule 77    unary_operator -> MINUS
Rule 78    unary_operator -> NOT
Rule 79    parameter_list -> parameter_declaration
Rule 80    parameter_list -> parameter_list COMMA parameter_declaration
Rule 81    parameter_declaration -> type_specifier declarator
Rule 82    declaration -> type_specifier init_declarator_list_opt SEMI
Rule 83    declaration_list -> declaration
Rule 84    declaration_list -> declaration_list declaration
Rule 85    declaration_list_opt -> declaration_list
Rule 86    declaration_list_opt -> empty
Rule 87    init_declarator -> declarator
Rule 88    init_declarator -> declarator ASSIGN initializer
Rule 89    init_declarator_list -> init_declarator
Rule 90    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 91    init_declarator_list_opt -> init_declarator_list
Rule 92    init_declarator_list_opt -> empty
Rule 93    initializer -> assignment_expression
Rule 94    initializer -> LBRACK initializer_list RBRACK
Rule 95    initializer -> LBRACK initializer_list COMMA RBRACK
Rule 96    initializer_list -> initializer
Rule 97    initializer_list -> initializer_list COMMA initializer
Rule 98    compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK
Rule 99    statement -> expression_statement
Rule 100   statement -> compound_statement
Rule 101   statement -> selection_statement
Rule 102   statement -> iteration_statement
Rule 103   statement -> jump_statement
Rule 104   statement -> assert_statement
Rule 105   statement -> print_statement
Rule 106   statement -> read_statement
Rule 107   expression_statement -> expression_opt SEMI
Rule 108   selection_statement -> IF LPAREN expression RPAREN statement
Rule 109   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 110   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 111   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 112   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 113   jump_statement -> BREAK SEMI
Rule 114   jump_statement -> RETURN expression_opt SEMI
Rule 115   assert_statement -> ASSERT expr SEMI
Rule 116   print_statement -> PRINT LPAREN expr RPAREN SEMI
Rule 117   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 118   statement_list -> statement_list statement
Rule 119   statement_list -> statement
Rule 120   statement_list_opt -> statement_list
Rule 121   statement_list_opt -> empty
Rule 122   statement -> ID ASSIGN expr
Rule 123   expr -> LPAREN expr RPAREN

Terminals, with rules where they appear

ADDRESS              : 74
AND                  : 40
ASSERT               : 115
ASSIGN               : 68 88 122
BREAK                : 113
CCOMMENT             : 
CCONST               : 
CHAR                 : 9
COMMA                : 61 67 80 90 95 97
CPPCOMMENT           : 
DASSIGN              : 70
DIFF                 : 39
DIVIDE               : 32
ELSE                 : 109
EQUALS               : 33
ERROR                : 
FCONST               : 59
FLOAT                : 11
FOR                  : 111 112
GET                  : 36
GT                   : 35
ICONST               : 58
ID                   : 17 24 25 54 122
IF                   : 108 109
INT                  : 10
LBRACE               : 19 20 49
LBRACK               : 94 95 98
LET                  : 38
LPAREN               : 18 21 22 43 50 51 57 108 109 110 111 112 116 117 123
LT                   : 37
MINASSIGN            : 73
MINUS                : 30 77
MM                   : 46 53
MOD                  : 34
MODASSIGN            : 71
NOT                  : 78
OR                   : 41
PASSIGN              : 72
PLUS                 : 29 76
PP                   : 45 52
PRINT                : 116
RBRACE               : 19 20 49
RBRACK               : 94 95 98
READ                 : 117
RETURN               : 114
RPAREN               : 18 21 22 43 50 51 57 108 109 110 111 112 116 117 123
SEMI                 : 82 107 111 111 112 113 114 115 116 117
STRING_LITERAL       : 56
TASSIGN              : 69
TIMES                : 14 31 75
UNMATCHEDQUOTE       : 
UNTERMCOMMENT        : 
VOID                 : 8
WHILE                : 110
error                : 

Nonterminals, with rules where they appear

argument_expression  : 50 67 117
assert_statement     : 104
assignment_expression : 60 61 65 66 67 93
assignment_operator  : 65
cast_expression      : 28 43 47
compound_statement   : 7 100
constant             : 55
constant_expression  : 19
declaration          : 6 83 84 112
declaration_list     : 84 85
declaration_list_opt : 7 98
declarator           : 7 18 81 87 88
direct_declarator    : 12 13 19 20 21 22
empty                : 16 27 63 86 92 121
expr                 : 23 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 64 115 116 122 123
expression           : 49 57 61 62 108 109 110
expression_opt       : 107 111 111 111 112 112 114
expression_statement : 99
function_definition  : 5
global_declaration   : 3 4
global_declaration_list : 2 4
identifier_list      : 24 26
identifier_list_opt  : 22
init_declarator      : 89 90
init_declarator_list : 90 91
init_declarator_list_opt : 82
initializer          : 88 96 97
initializer_list     : 94 95 97
iteration_statement  : 102
jump_statement       : 103
parameter_declaration : 79 80
parameter_list       : 21 80
pointer              : 12 15
pointer_opt          : 14
postfix_expression   : 44 49 50 51 52 53
primary_expression   : 48
print_statement      : 105
program              : 0
read_statement       : 106
selection_statement  : 101
statement            : 108 109 109 110 111 112 118 119
statement_list       : 118 120
statement_list_opt   : 98
type_specifier       : 7 43 81 82
unary_expression     : 42 45 46 65
unary_operator       : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . global_declaration_list
    (3) global_declaration_list -> . global_declaration
    (4) global_declaration_list -> . global_declaration_list global_declaration
    (5) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (7) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (2) program -> global_declaration_list .
    (4) global_declaration_list -> global_declaration_list . global_declaration
    (5) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (7) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    $end            reduce using rule 2 (program -> global_declaration_list .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    global_declaration             shift and go to state 11
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6

state 3

    (3) global_declaration_list -> global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration .)


state 4

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 5

    (6) global_declaration -> declaration .

    VOID            reduce using rule 6 (global_declaration -> declaration .)
    CHAR            reduce using rule 6 (global_declaration -> declaration .)
    INT             reduce using rule 6 (global_declaration -> declaration .)
    FLOAT           reduce using rule 6 (global_declaration -> declaration .)
    $end            reduce using rule 6 (global_declaration -> declaration .)


state 6

    (7) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (82) declaration -> type_specifier . init_declarator_list_opt SEMI
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (91) init_declarator_list_opt -> . init_declarator_list
    (92) init_declarator_list_opt -> . empty
    (14) pointer -> . TIMES pointer_opt
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN
    (89) init_declarator_list -> . init_declarator
    (90) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (1) empty -> .
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator ASSIGN initializer

    TIMES           shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 20
    SEMI            reduce using rule 1 (empty -> .)

    declarator                     shift and go to state 12
    init_declarator_list_opt       shift and go to state 13
    pointer                        shift and go to state 14
    direct_declarator              shift and go to state 15
    init_declarator_list           shift and go to state 16
    empty                          shift and go to state 17
    init_declarator                shift and go to state 21

state 7

    (8) type_specifier -> VOID .

    TIMES           reduce using rule 8 (type_specifier -> VOID .)
    ID              reduce using rule 8 (type_specifier -> VOID .)
    LPAREN          reduce using rule 8 (type_specifier -> VOID .)
    SEMI            reduce using rule 8 (type_specifier -> VOID .)
    RPAREN          reduce using rule 8 (type_specifier -> VOID .)


state 8

    (9) type_specifier -> CHAR .

    TIMES           reduce using rule 9 (type_specifier -> CHAR .)
    ID              reduce using rule 9 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 9 (type_specifier -> CHAR .)
    SEMI            reduce using rule 9 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 9 (type_specifier -> CHAR .)


state 9

    (10) type_specifier -> INT .

    TIMES           reduce using rule 10 (type_specifier -> INT .)
    ID              reduce using rule 10 (type_specifier -> INT .)
    LPAREN          reduce using rule 10 (type_specifier -> INT .)
    SEMI            reduce using rule 10 (type_specifier -> INT .)
    RPAREN          reduce using rule 10 (type_specifier -> INT .)


state 10

    (11) type_specifier -> FLOAT .

    TIMES           reduce using rule 11 (type_specifier -> FLOAT .)
    ID              reduce using rule 11 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 11 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 11 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 11 (type_specifier -> FLOAT .)


state 11

    (4) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)


state 12

    (7) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . ASSIGN initializer
    (85) declaration_list_opt -> . declaration_list
    (86) declaration_list_opt -> . empty
    (83) declaration_list -> . declaration
    (84) declaration_list -> . declaration_list declaration
    (1) empty -> .
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    COMMA           reduce using rule 87 (init_declarator -> declarator .)
    SEMI            reduce using rule 87 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 24
    LBRACK          reduce using rule 1 (empty -> .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    type_specifier                 shift and go to state 22
    declaration_list_opt           shift and go to state 23
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27

state 13

    (82) declaration -> type_specifier init_declarator_list_opt . SEMI

    SEMI            shift and go to state 28


state 14

    (12) declarator -> pointer . direct_declarator
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 19
    LPAREN          shift and go to state 20

    direct_declarator              shift and go to state 29

state 15

    (13) declarator -> direct_declarator .
    (19) direct_declarator -> direct_declarator . LBRACE constant_expression RBRACE
    (20) direct_declarator -> direct_declarator . LBRACE RBRACE
    (21) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (22) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    ASSIGN          reduce using rule 13 (declarator -> direct_declarator .)
    VOID            reduce using rule 13 (declarator -> direct_declarator .)
    CHAR            reduce using rule 13 (declarator -> direct_declarator .)
    INT             reduce using rule 13 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 13 (declarator -> direct_declarator .)
    LBRACK          reduce using rule 13 (declarator -> direct_declarator .)
    COMMA           reduce using rule 13 (declarator -> direct_declarator .)
    SEMI            reduce using rule 13 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 13 (declarator -> direct_declarator .)
    LBRACE          shift and go to state 30
    LPAREN          shift and go to state 31


state 16

    (91) init_declarator_list_opt -> init_declarator_list .
    (90) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 91 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 32


state 17

    (92) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 92 (init_declarator_list_opt -> empty .)


state 18

    (14) pointer -> TIMES . pointer_opt
    (15) pointer_opt -> . pointer
    (16) pointer_opt -> . empty
    (14) pointer -> . TIMES pointer_opt
    (1) empty -> .

    TIMES           shift and go to state 18
    ID              reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)

    pointer_opt                    shift and go to state 33
    pointer                        shift and go to state 34
    empty                          shift and go to state 35

state 19

    (17) direct_declarator -> ID .

    LBRACE          reduce using rule 17 (direct_declarator -> ID .)
    LPAREN          reduce using rule 17 (direct_declarator -> ID .)
    ASSIGN          reduce using rule 17 (direct_declarator -> ID .)
    VOID            reduce using rule 17 (direct_declarator -> ID .)
    CHAR            reduce using rule 17 (direct_declarator -> ID .)
    INT             reduce using rule 17 (direct_declarator -> ID .)
    FLOAT           reduce using rule 17 (direct_declarator -> ID .)
    LBRACK          reduce using rule 17 (direct_declarator -> ID .)
    COMMA           reduce using rule 17 (direct_declarator -> ID .)
    SEMI            reduce using rule 17 (direct_declarator -> ID .)
    RPAREN          reduce using rule 17 (direct_declarator -> ID .)


state 20

    (18) direct_declarator -> LPAREN . declarator RPAREN
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (14) pointer -> . TIMES pointer_opt
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 20

    declarator                     shift and go to state 36
    pointer                        shift and go to state 14
    direct_declarator              shift and go to state 15

state 21

    (89) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 89 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 89 (init_declarator_list -> init_declarator .)


state 22

    (82) declaration -> type_specifier . init_declarator_list_opt SEMI
    (91) init_declarator_list_opt -> . init_declarator_list
    (92) init_declarator_list_opt -> . empty
    (89) init_declarator_list -> . init_declarator
    (90) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (1) empty -> .
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator ASSIGN initializer
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (14) pointer -> . TIMES pointer_opt
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    SEMI            reduce using rule 1 (empty -> .)
    TIMES           shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 20

    init_declarator_list_opt       shift and go to state 13
    init_declarator_list           shift and go to state 16
    empty                          shift and go to state 17
    init_declarator                shift and go to state 21
    declarator                     shift and go to state 37
    pointer                        shift and go to state 14
    direct_declarator              shift and go to state 15

state 23

    (7) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK

    LBRACK          shift and go to state 39

    compound_statement             shift and go to state 38

state 24

    (88) init_declarator -> declarator ASSIGN . initializer
    (93) initializer -> . assignment_expression
    (94) initializer -> . LBRACK initializer_list RBRACK
    (95) initializer -> . LBRACK initializer_list COMMA RBRACK
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LBRACK          shift and go to state 42
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    initializer                    shift and go to state 40
    assignment_expression          shift and go to state 41
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 25

    (85) declaration_list_opt -> declaration_list .
    (84) declaration_list -> declaration_list . declaration
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACK          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 85 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 85 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 85 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 85 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 85 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    ASSERT          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    PRINT           reduce using rule 85 (declaration_list_opt -> declaration_list .)
    READ            reduce using rule 85 (declaration_list_opt -> declaration_list .)
    LPAREN          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    PP              reduce using rule 85 (declaration_list_opt -> declaration_list .)
    MM              reduce using rule 85 (declaration_list_opt -> declaration_list .)
    ADDRESS         reduce using rule 85 (declaration_list_opt -> declaration_list .)
    TIMES           reduce using rule 85 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 85 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 85 (declaration_list_opt -> declaration_list .)
    NOT             reduce using rule 85 (declaration_list_opt -> declaration_list .)
    STRING_LITERAL  reduce using rule 85 (declaration_list_opt -> declaration_list .)
    ICONST          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    FCONST          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    RBRACK          reduce using rule 85 (declaration_list_opt -> declaration_list .)
    SEMI            reduce using rule 85 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    declaration                    shift and go to state 62
    type_specifier                 shift and go to state 22

state 26

    (86) declaration_list_opt -> empty .

    LBRACK          reduce using rule 86 (declaration_list_opt -> empty .)
    ID              reduce using rule 86 (declaration_list_opt -> empty .)
    IF              reduce using rule 86 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 86 (declaration_list_opt -> empty .)
    FOR             reduce using rule 86 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 86 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 86 (declaration_list_opt -> empty .)
    ASSERT          reduce using rule 86 (declaration_list_opt -> empty .)
    PRINT           reduce using rule 86 (declaration_list_opt -> empty .)
    READ            reduce using rule 86 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 86 (declaration_list_opt -> empty .)
    PP              reduce using rule 86 (declaration_list_opt -> empty .)
    MM              reduce using rule 86 (declaration_list_opt -> empty .)
    ADDRESS         reduce using rule 86 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 86 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 86 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 86 (declaration_list_opt -> empty .)
    NOT             reduce using rule 86 (declaration_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 86 (declaration_list_opt -> empty .)
    ICONST          reduce using rule 86 (declaration_list_opt -> empty .)
    FCONST          reduce using rule 86 (declaration_list_opt -> empty .)
    RBRACK          reduce using rule 86 (declaration_list_opt -> empty .)
    SEMI            reduce using rule 86 (declaration_list_opt -> empty .)


state 27

    (83) declaration_list -> declaration .

    VOID            reduce using rule 83 (declaration_list -> declaration .)
    CHAR            reduce using rule 83 (declaration_list -> declaration .)
    INT             reduce using rule 83 (declaration_list -> declaration .)
    FLOAT           reduce using rule 83 (declaration_list -> declaration .)
    LBRACK          reduce using rule 83 (declaration_list -> declaration .)
    ID              reduce using rule 83 (declaration_list -> declaration .)
    IF              reduce using rule 83 (declaration_list -> declaration .)
    WHILE           reduce using rule 83 (declaration_list -> declaration .)
    FOR             reduce using rule 83 (declaration_list -> declaration .)
    BREAK           reduce using rule 83 (declaration_list -> declaration .)
    RETURN          reduce using rule 83 (declaration_list -> declaration .)
    ASSERT          reduce using rule 83 (declaration_list -> declaration .)
    PRINT           reduce using rule 83 (declaration_list -> declaration .)
    READ            reduce using rule 83 (declaration_list -> declaration .)
    LPAREN          reduce using rule 83 (declaration_list -> declaration .)
    PP              reduce using rule 83 (declaration_list -> declaration .)
    MM              reduce using rule 83 (declaration_list -> declaration .)
    ADDRESS         reduce using rule 83 (declaration_list -> declaration .)
    TIMES           reduce using rule 83 (declaration_list -> declaration .)
    PLUS            reduce using rule 83 (declaration_list -> declaration .)
    MINUS           reduce using rule 83 (declaration_list -> declaration .)
    NOT             reduce using rule 83 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 83 (declaration_list -> declaration .)
    ICONST          reduce using rule 83 (declaration_list -> declaration .)
    FCONST          reduce using rule 83 (declaration_list -> declaration .)
    RBRACK          reduce using rule 83 (declaration_list -> declaration .)
    SEMI            reduce using rule 83 (declaration_list -> declaration .)


state 28

    (82) declaration -> type_specifier init_declarator_list_opt SEMI .

    VOID            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT             reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    $end            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LBRACK          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ID              reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    IF              reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    WHILE           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FOR             reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    BREAK           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RETURN          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ASSERT          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PRINT           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    READ            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LPAREN          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PP              reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MM              reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ADDRESS         reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    TIMES           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PLUS            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MINUS           reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    NOT             reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    STRING_LITERAL  reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ICONST          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FCONST          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RBRACK          reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    SEMI            reduce using rule 82 (declaration -> type_specifier init_declarator_list_opt SEMI .)


state 29

    (12) declarator -> pointer direct_declarator .
    (19) direct_declarator -> direct_declarator . LBRACE constant_expression RBRACE
    (20) direct_declarator -> direct_declarator . LBRACE RBRACE
    (21) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (22) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    ASSIGN          reduce using rule 12 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 12 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 12 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 12 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 12 (declarator -> pointer direct_declarator .)
    LBRACK          reduce using rule 12 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 12 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 12 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 12 (declarator -> pointer direct_declarator .)
    LBRACE          shift and go to state 30
    LPAREN          shift and go to state 31


state 30

    (19) direct_declarator -> direct_declarator LBRACE . constant_expression RBRACE
    (20) direct_declarator -> direct_declarator LBRACE . RBRACE
    (23) constant_expression -> . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RBRACE          shift and go to state 64
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    constant_expression            shift and go to state 63
    expr                           shift and go to state 65
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 31

    (21) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (22) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (79) parameter_list -> . parameter_declaration
    (80) parameter_list -> . parameter_list COMMA parameter_declaration
    (26) identifier_list_opt -> . identifier_list
    (27) identifier_list_opt -> . empty
    (81) parameter_declaration -> . type_specifier declarator
    (24) identifier_list -> . identifier_list ID
    (25) identifier_list -> . ID
    (1) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    ID              shift and go to state 73
    RPAREN          reduce using rule 1 (empty -> .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    parameter_list                 shift and go to state 67
    identifier_list_opt            shift and go to state 68
    parameter_declaration          shift and go to state 69
    identifier_list                shift and go to state 70
    empty                          shift and go to state 71
    type_specifier                 shift and go to state 72

state 32

    (90) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator ASSIGN initializer
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (14) pointer -> . TIMES pointer_opt
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 20

    init_declarator                shift and go to state 74
    declarator                     shift and go to state 37
    pointer                        shift and go to state 14
    direct_declarator              shift and go to state 15

state 33

    (14) pointer -> TIMES pointer_opt .

    ID              reduce using rule 14 (pointer -> TIMES pointer_opt .)
    LPAREN          reduce using rule 14 (pointer -> TIMES pointer_opt .)


state 34

    (15) pointer_opt -> pointer .

    ID              reduce using rule 15 (pointer_opt -> pointer .)
    LPAREN          reduce using rule 15 (pointer_opt -> pointer .)


state 35

    (16) pointer_opt -> empty .

    ID              reduce using rule 16 (pointer_opt -> empty .)
    LPAREN          reduce using rule 16 (pointer_opt -> empty .)


state 36

    (18) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 75


state 37

    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . ASSIGN initializer

    COMMA           reduce using rule 87 (init_declarator -> declarator .)
    SEMI            reduce using rule 87 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 24


state 38

    (7) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 39

    (98) compound_statement -> LBRACK . declaration_list_opt statement_list_opt RBRACK
    (85) declaration_list_opt -> . declaration_list
    (86) declaration_list_opt -> . empty
    (83) declaration_list -> . declaration
    (84) declaration_list -> . declaration_list declaration
    (1) empty -> .
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    ID              reduce using rule 1 (empty -> .)
    LBRACK          reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    BREAK           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ASSERT          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    READ            reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    PP              reduce using rule 1 (empty -> .)
    MM              reduce using rule 1 (empty -> .)
    ADDRESS         reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    NOT             reduce using rule 1 (empty -> .)
    STRING_LITERAL  reduce using rule 1 (empty -> .)
    ICONST          reduce using rule 1 (empty -> .)
    FCONST          reduce using rule 1 (empty -> .)
    RBRACK          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    declaration_list_opt           shift and go to state 76
    declaration_list               shift and go to state 25
    empty                          shift and go to state 26
    declaration                    shift and go to state 27
    type_specifier                 shift and go to state 22

state 40

    (88) init_declarator -> declarator ASSIGN initializer .

    COMMA           reduce using rule 88 (init_declarator -> declarator ASSIGN initializer .)
    SEMI            reduce using rule 88 (init_declarator -> declarator ASSIGN initializer .)


state 41

    (93) initializer -> assignment_expression .

    COMMA           reduce using rule 93 (initializer -> assignment_expression .)
    SEMI            reduce using rule 93 (initializer -> assignment_expression .)
    RBRACK          reduce using rule 93 (initializer -> assignment_expression .)


state 42

    (94) initializer -> LBRACK . initializer_list RBRACK
    (95) initializer -> LBRACK . initializer_list COMMA RBRACK
    (96) initializer_list -> . initializer
    (97) initializer_list -> . initializer_list COMMA initializer
    (93) initializer -> . assignment_expression
    (94) initializer -> . LBRACK initializer_list RBRACK
    (95) initializer -> . LBRACK initializer_list COMMA RBRACK
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LBRACK          shift and go to state 42
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    initializer_list               shift and go to state 77
    initializer                    shift and go to state 78
    assignment_expression          shift and go to state 41
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 43

    (64) assignment_expression -> expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    COMMA           reduce using rule 64 (assignment_expression -> expr .)
    SEMI            reduce using rule 64 (assignment_expression -> expr .)
    RBRACK          reduce using rule 64 (assignment_expression -> expr .)
    RPAREN          reduce using rule 64 (assignment_expression -> expr .)
    RBRACE          reduce using rule 64 (assignment_expression -> expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 44

    (65) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (42) cast_expression -> unary_expression .
    (68) assignment_operator -> . ASSIGN
    (69) assignment_operator -> . TASSIGN
    (70) assignment_operator -> . DASSIGN
    (71) assignment_operator -> . MODASSIGN
    (72) assignment_operator -> . PASSIGN
    (73) assignment_operator -> . MINASSIGN

    PLUS            reduce using rule 42 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 42 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    MOD             reduce using rule 42 (cast_expression -> unary_expression .)
    GT              reduce using rule 42 (cast_expression -> unary_expression .)
    GET             reduce using rule 42 (cast_expression -> unary_expression .)
    LT              reduce using rule 42 (cast_expression -> unary_expression .)
    LET             reduce using rule 42 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 42 (cast_expression -> unary_expression .)
    AND             reduce using rule 42 (cast_expression -> unary_expression .)
    OR              reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 42 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 42 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 93
    TASSIGN         shift and go to state 94
    DASSIGN         shift and go to state 95
    MODASSIGN       shift and go to state 96
    PASSIGN         shift and go to state 97
    MINASSIGN       shift and go to state 98

    assignment_operator            shift and go to state 92

state 45

    (28) expr -> cast_expression .

    PLUS            reduce using rule 28 (expr -> cast_expression .)
    MINUS           reduce using rule 28 (expr -> cast_expression .)
    TIMES           reduce using rule 28 (expr -> cast_expression .)
    DIVIDE          reduce using rule 28 (expr -> cast_expression .)
    EQUALS          reduce using rule 28 (expr -> cast_expression .)
    MOD             reduce using rule 28 (expr -> cast_expression .)
    GT              reduce using rule 28 (expr -> cast_expression .)
    GET             reduce using rule 28 (expr -> cast_expression .)
    LT              reduce using rule 28 (expr -> cast_expression .)
    LET             reduce using rule 28 (expr -> cast_expression .)
    DIFF            reduce using rule 28 (expr -> cast_expression .)
    AND             reduce using rule 28 (expr -> cast_expression .)
    OR              reduce using rule 28 (expr -> cast_expression .)
    COMMA           reduce using rule 28 (expr -> cast_expression .)
    SEMI            reduce using rule 28 (expr -> cast_expression .)
    RBRACE          reduce using rule 28 (expr -> cast_expression .)
    RBRACK          reduce using rule 28 (expr -> cast_expression .)
    RPAREN          reduce using rule 28 (expr -> cast_expression .)
    ID              reduce using rule 28 (expr -> cast_expression .)
    LBRACK          reduce using rule 28 (expr -> cast_expression .)
    IF              reduce using rule 28 (expr -> cast_expression .)
    WHILE           reduce using rule 28 (expr -> cast_expression .)
    FOR             reduce using rule 28 (expr -> cast_expression .)
    BREAK           reduce using rule 28 (expr -> cast_expression .)
    RETURN          reduce using rule 28 (expr -> cast_expression .)
    ASSERT          reduce using rule 28 (expr -> cast_expression .)
    PRINT           reduce using rule 28 (expr -> cast_expression .)
    READ            reduce using rule 28 (expr -> cast_expression .)
    LPAREN          reduce using rule 28 (expr -> cast_expression .)
    PP              reduce using rule 28 (expr -> cast_expression .)
    MM              reduce using rule 28 (expr -> cast_expression .)
    ADDRESS         reduce using rule 28 (expr -> cast_expression .)
    NOT             reduce using rule 28 (expr -> cast_expression .)
    STRING_LITERAL  reduce using rule 28 (expr -> cast_expression .)
    ICONST          reduce using rule 28 (expr -> cast_expression .)
    FCONST          reduce using rule 28 (expr -> cast_expression .)
    ELSE            reduce using rule 28 (expr -> cast_expression .)


state 46

    (76) unary_operator -> PLUS .

    LPAREN          reduce using rule 76 (unary_operator -> PLUS .)
    PP              reduce using rule 76 (unary_operator -> PLUS .)
    MM              reduce using rule 76 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 76 (unary_operator -> PLUS .)
    TIMES           reduce using rule 76 (unary_operator -> PLUS .)
    PLUS            reduce using rule 76 (unary_operator -> PLUS .)
    MINUS           reduce using rule 76 (unary_operator -> PLUS .)
    NOT             reduce using rule 76 (unary_operator -> PLUS .)
    ID              reduce using rule 76 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 76 (unary_operator -> PLUS .)
    ICONST          reduce using rule 76 (unary_operator -> PLUS .)
    FCONST          reduce using rule 76 (unary_operator -> PLUS .)


state 47

    (77) unary_operator -> MINUS .

    LPAREN          reduce using rule 77 (unary_operator -> MINUS .)
    PP              reduce using rule 77 (unary_operator -> MINUS .)
    MM              reduce using rule 77 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 77 (unary_operator -> MINUS .)
    TIMES           reduce using rule 77 (unary_operator -> MINUS .)
    PLUS            reduce using rule 77 (unary_operator -> MINUS .)
    MINUS           reduce using rule 77 (unary_operator -> MINUS .)
    NOT             reduce using rule 77 (unary_operator -> MINUS .)
    ID              reduce using rule 77 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 77 (unary_operator -> MINUS .)
    ICONST          reduce using rule 77 (unary_operator -> MINUS .)
    FCONST          reduce using rule 77 (unary_operator -> MINUS .)


state 48

    (75) unary_operator -> TIMES .

    LPAREN          reduce using rule 75 (unary_operator -> TIMES .)
    PP              reduce using rule 75 (unary_operator -> TIMES .)
    MM              reduce using rule 75 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 75 (unary_operator -> TIMES .)
    TIMES           reduce using rule 75 (unary_operator -> TIMES .)
    PLUS            reduce using rule 75 (unary_operator -> TIMES .)
    MINUS           reduce using rule 75 (unary_operator -> TIMES .)
    NOT             reduce using rule 75 (unary_operator -> TIMES .)
    ID              reduce using rule 75 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 75 (unary_operator -> TIMES .)
    ICONST          reduce using rule 75 (unary_operator -> TIMES .)
    FCONST          reduce using rule 75 (unary_operator -> TIMES .)


state 49

    (123) expr -> LPAREN . expr RPAREN
    (43) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (57) primary_expression -> LPAREN . expression RPAREN
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 99
    type_specifier                 shift and go to state 100
    cast_expression                shift and go to state 45
    expression                     shift and go to state 101
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 50

    (44) unary_expression -> postfix_expression .
    (49) postfix_expression -> postfix_expression . LBRACE expression RBRACE
    (50) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (51) postfix_expression -> postfix_expression . LPAREN RPAREN
    (52) postfix_expression -> postfix_expression . PP
    (53) postfix_expression -> postfix_expression . MM

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PP resolved as shift
  ! shift/reduce conflict for MM resolved as shift
    ASSIGN          reduce using rule 44 (unary_expression -> postfix_expression .)
    TASSIGN         reduce using rule 44 (unary_expression -> postfix_expression .)
    DASSIGN         reduce using rule 44 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 44 (unary_expression -> postfix_expression .)
    PASSIGN         reduce using rule 44 (unary_expression -> postfix_expression .)
    MINASSIGN       reduce using rule 44 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 44 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 44 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 44 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 44 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 44 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 44 (unary_expression -> postfix_expression .)
    GT              reduce using rule 44 (unary_expression -> postfix_expression .)
    GET             reduce using rule 44 (unary_expression -> postfix_expression .)
    LT              reduce using rule 44 (unary_expression -> postfix_expression .)
    LET             reduce using rule 44 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 44 (unary_expression -> postfix_expression .)
    AND             reduce using rule 44 (unary_expression -> postfix_expression .)
    OR              reduce using rule 44 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 44 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 44 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 44 (unary_expression -> postfix_expression .)
    RBRACK          reduce using rule 44 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 44 (unary_expression -> postfix_expression .)
    ID              reduce using rule 44 (unary_expression -> postfix_expression .)
    LBRACK          reduce using rule 44 (unary_expression -> postfix_expression .)
    IF              reduce using rule 44 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 44 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 44 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 44 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 44 (unary_expression -> postfix_expression .)
    ASSERT          reduce using rule 44 (unary_expression -> postfix_expression .)
    PRINT           reduce using rule 44 (unary_expression -> postfix_expression .)
    READ            reduce using rule 44 (unary_expression -> postfix_expression .)
    ADDRESS         reduce using rule 44 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 44 (unary_expression -> postfix_expression .)
    STRING_LITERAL  reduce using rule 44 (unary_expression -> postfix_expression .)
    ICONST          reduce using rule 44 (unary_expression -> postfix_expression .)
    FCONST          reduce using rule 44 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 44 (unary_expression -> postfix_expression .)
    LBRACE          shift and go to state 104
    LPAREN          shift and go to state 105
    PP              shift and go to state 106
    MM              shift and go to state 107

  ! LPAREN          [ reduce using rule 44 (unary_expression -> postfix_expression .) ]
  ! PP              [ reduce using rule 44 (unary_expression -> postfix_expression .) ]
  ! MM              [ reduce using rule 44 (unary_expression -> postfix_expression .) ]


state 51

    (45) unary_expression -> PP . unary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    LPAREN          shift and go to state 109
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    unary_expression               shift and go to state 108
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 52

    (46) unary_expression -> MM . unary_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    LPAREN          shift and go to state 109
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    unary_expression               shift and go to state 110
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 53

    (47) unary_expression -> unary_operator . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 112
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    unary_operator                 shift and go to state 53
    cast_expression                shift and go to state 111
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 54

    (48) postfix_expression -> primary_expression .

    LBRACE          reduce using rule 48 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 48 (postfix_expression -> primary_expression .)
    PP              reduce using rule 48 (postfix_expression -> primary_expression .)
    MM              reduce using rule 48 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 48 (postfix_expression -> primary_expression .)
    TASSIGN         reduce using rule 48 (postfix_expression -> primary_expression .)
    DASSIGN         reduce using rule 48 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 48 (postfix_expression -> primary_expression .)
    PASSIGN         reduce using rule 48 (postfix_expression -> primary_expression .)
    MINASSIGN       reduce using rule 48 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 48 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 48 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 48 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 48 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 48 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 48 (postfix_expression -> primary_expression .)
    GT              reduce using rule 48 (postfix_expression -> primary_expression .)
    GET             reduce using rule 48 (postfix_expression -> primary_expression .)
    LT              reduce using rule 48 (postfix_expression -> primary_expression .)
    LET             reduce using rule 48 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 48 (postfix_expression -> primary_expression .)
    AND             reduce using rule 48 (postfix_expression -> primary_expression .)
    OR              reduce using rule 48 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 48 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 48 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 48 (postfix_expression -> primary_expression .)
    RBRACK          reduce using rule 48 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 48 (postfix_expression -> primary_expression .)
    ID              reduce using rule 48 (postfix_expression -> primary_expression .)
    LBRACK          reduce using rule 48 (postfix_expression -> primary_expression .)
    IF              reduce using rule 48 (postfix_expression -> primary_expression .)
    WHILE           reduce using rule 48 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 48 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 48 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 48 (postfix_expression -> primary_expression .)
    ASSERT          reduce using rule 48 (postfix_expression -> primary_expression .)
    PRINT           reduce using rule 48 (postfix_expression -> primary_expression .)
    READ            reduce using rule 48 (postfix_expression -> primary_expression .)
    ADDRESS         reduce using rule 48 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 48 (postfix_expression -> primary_expression .)
    STRING_LITERAL  reduce using rule 48 (postfix_expression -> primary_expression .)
    ICONST          reduce using rule 48 (postfix_expression -> primary_expression .)
    FCONST          reduce using rule 48 (postfix_expression -> primary_expression .)
    ELSE            reduce using rule 48 (postfix_expression -> primary_expression .)


state 55

    (74) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 74 (unary_operator -> ADDRESS .)
    PP              reduce using rule 74 (unary_operator -> ADDRESS .)
    MM              reduce using rule 74 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 74 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 74 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 74 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 74 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 74 (unary_operator -> ADDRESS .)
    ID              reduce using rule 74 (unary_operator -> ADDRESS .)
    STRING_LITERAL  reduce using rule 74 (unary_operator -> ADDRESS .)
    ICONST          reduce using rule 74 (unary_operator -> ADDRESS .)
    FCONST          reduce using rule 74 (unary_operator -> ADDRESS .)


state 56

    (78) unary_operator -> NOT .

    LPAREN          reduce using rule 78 (unary_operator -> NOT .)
    PP              reduce using rule 78 (unary_operator -> NOT .)
    MM              reduce using rule 78 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 78 (unary_operator -> NOT .)
    TIMES           reduce using rule 78 (unary_operator -> NOT .)
    PLUS            reduce using rule 78 (unary_operator -> NOT .)
    MINUS           reduce using rule 78 (unary_operator -> NOT .)
    NOT             reduce using rule 78 (unary_operator -> NOT .)
    ID              reduce using rule 78 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 78 (unary_operator -> NOT .)
    ICONST          reduce using rule 78 (unary_operator -> NOT .)
    FCONST          reduce using rule 78 (unary_operator -> NOT .)


state 57

    (54) primary_expression -> ID .

    LBRACE          reduce using rule 54 (primary_expression -> ID .)
    LPAREN          reduce using rule 54 (primary_expression -> ID .)
    PP              reduce using rule 54 (primary_expression -> ID .)
    MM              reduce using rule 54 (primary_expression -> ID .)
    ASSIGN          reduce using rule 54 (primary_expression -> ID .)
    TASSIGN         reduce using rule 54 (primary_expression -> ID .)
    DASSIGN         reduce using rule 54 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 54 (primary_expression -> ID .)
    PASSIGN         reduce using rule 54 (primary_expression -> ID .)
    MINASSIGN       reduce using rule 54 (primary_expression -> ID .)
    PLUS            reduce using rule 54 (primary_expression -> ID .)
    MINUS           reduce using rule 54 (primary_expression -> ID .)
    TIMES           reduce using rule 54 (primary_expression -> ID .)
    DIVIDE          reduce using rule 54 (primary_expression -> ID .)
    EQUALS          reduce using rule 54 (primary_expression -> ID .)
    MOD             reduce using rule 54 (primary_expression -> ID .)
    GT              reduce using rule 54 (primary_expression -> ID .)
    GET             reduce using rule 54 (primary_expression -> ID .)
    LT              reduce using rule 54 (primary_expression -> ID .)
    LET             reduce using rule 54 (primary_expression -> ID .)
    DIFF            reduce using rule 54 (primary_expression -> ID .)
    AND             reduce using rule 54 (primary_expression -> ID .)
    OR              reduce using rule 54 (primary_expression -> ID .)
    COMMA           reduce using rule 54 (primary_expression -> ID .)
    SEMI            reduce using rule 54 (primary_expression -> ID .)
    RBRACE          reduce using rule 54 (primary_expression -> ID .)
    RBRACK          reduce using rule 54 (primary_expression -> ID .)
    RPAREN          reduce using rule 54 (primary_expression -> ID .)
    ID              reduce using rule 54 (primary_expression -> ID .)
    LBRACK          reduce using rule 54 (primary_expression -> ID .)
    IF              reduce using rule 54 (primary_expression -> ID .)
    WHILE           reduce using rule 54 (primary_expression -> ID .)
    FOR             reduce using rule 54 (primary_expression -> ID .)
    BREAK           reduce using rule 54 (primary_expression -> ID .)
    RETURN          reduce using rule 54 (primary_expression -> ID .)
    ASSERT          reduce using rule 54 (primary_expression -> ID .)
    PRINT           reduce using rule 54 (primary_expression -> ID .)
    READ            reduce using rule 54 (primary_expression -> ID .)
    ADDRESS         reduce using rule 54 (primary_expression -> ID .)
    NOT             reduce using rule 54 (primary_expression -> ID .)
    STRING_LITERAL  reduce using rule 54 (primary_expression -> ID .)
    ICONST          reduce using rule 54 (primary_expression -> ID .)
    FCONST          reduce using rule 54 (primary_expression -> ID .)
    ELSE            reduce using rule 54 (primary_expression -> ID .)


state 58

    (55) primary_expression -> constant .

    LBRACE          reduce using rule 55 (primary_expression -> constant .)
    LPAREN          reduce using rule 55 (primary_expression -> constant .)
    PP              reduce using rule 55 (primary_expression -> constant .)
    MM              reduce using rule 55 (primary_expression -> constant .)
    ASSIGN          reduce using rule 55 (primary_expression -> constant .)
    TASSIGN         reduce using rule 55 (primary_expression -> constant .)
    DASSIGN         reduce using rule 55 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 55 (primary_expression -> constant .)
    PASSIGN         reduce using rule 55 (primary_expression -> constant .)
    MINASSIGN       reduce using rule 55 (primary_expression -> constant .)
    PLUS            reduce using rule 55 (primary_expression -> constant .)
    MINUS           reduce using rule 55 (primary_expression -> constant .)
    TIMES           reduce using rule 55 (primary_expression -> constant .)
    DIVIDE          reduce using rule 55 (primary_expression -> constant .)
    EQUALS          reduce using rule 55 (primary_expression -> constant .)
    MOD             reduce using rule 55 (primary_expression -> constant .)
    GT              reduce using rule 55 (primary_expression -> constant .)
    GET             reduce using rule 55 (primary_expression -> constant .)
    LT              reduce using rule 55 (primary_expression -> constant .)
    LET             reduce using rule 55 (primary_expression -> constant .)
    DIFF            reduce using rule 55 (primary_expression -> constant .)
    AND             reduce using rule 55 (primary_expression -> constant .)
    OR              reduce using rule 55 (primary_expression -> constant .)
    COMMA           reduce using rule 55 (primary_expression -> constant .)
    SEMI            reduce using rule 55 (primary_expression -> constant .)
    RBRACE          reduce using rule 55 (primary_expression -> constant .)
    RBRACK          reduce using rule 55 (primary_expression -> constant .)
    RPAREN          reduce using rule 55 (primary_expression -> constant .)
    ID              reduce using rule 55 (primary_expression -> constant .)
    LBRACK          reduce using rule 55 (primary_expression -> constant .)
    IF              reduce using rule 55 (primary_expression -> constant .)
    WHILE           reduce using rule 55 (primary_expression -> constant .)
    FOR             reduce using rule 55 (primary_expression -> constant .)
    BREAK           reduce using rule 55 (primary_expression -> constant .)
    RETURN          reduce using rule 55 (primary_expression -> constant .)
    ASSERT          reduce using rule 55 (primary_expression -> constant .)
    PRINT           reduce using rule 55 (primary_expression -> constant .)
    READ            reduce using rule 55 (primary_expression -> constant .)
    ADDRESS         reduce using rule 55 (primary_expression -> constant .)
    NOT             reduce using rule 55 (primary_expression -> constant .)
    STRING_LITERAL  reduce using rule 55 (primary_expression -> constant .)
    ICONST          reduce using rule 55 (primary_expression -> constant .)
    FCONST          reduce using rule 55 (primary_expression -> constant .)
    ELSE            reduce using rule 55 (primary_expression -> constant .)


state 59

    (56) primary_expression -> STRING_LITERAL .

    LBRACE          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    PP              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    MM              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ASSIGN          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    TASSIGN         reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    DASSIGN         reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    MODASSIGN       reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    PASSIGN         reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    MINASSIGN       reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    TIMES           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    EQUALS          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    GET             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    LET             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    DIFF            reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    SEMI            reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    RBRACK          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ID              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    LBRACK          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    IF              reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    WHILE           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    FOR             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    BREAK           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    RETURN          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ASSERT          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    PRINT           reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    READ            reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ADDRESS         reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    NOT             reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ICONST          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    FCONST          reduce using rule 56 (primary_expression -> STRING_LITERAL .)
    ELSE            reduce using rule 56 (primary_expression -> STRING_LITERAL .)


state 60

    (58) constant -> ICONST .

    LBRACE          reduce using rule 58 (constant -> ICONST .)
    LPAREN          reduce using rule 58 (constant -> ICONST .)
    PP              reduce using rule 58 (constant -> ICONST .)
    MM              reduce using rule 58 (constant -> ICONST .)
    ASSIGN          reduce using rule 58 (constant -> ICONST .)
    TASSIGN         reduce using rule 58 (constant -> ICONST .)
    DASSIGN         reduce using rule 58 (constant -> ICONST .)
    MODASSIGN       reduce using rule 58 (constant -> ICONST .)
    PASSIGN         reduce using rule 58 (constant -> ICONST .)
    MINASSIGN       reduce using rule 58 (constant -> ICONST .)
    PLUS            reduce using rule 58 (constant -> ICONST .)
    MINUS           reduce using rule 58 (constant -> ICONST .)
    TIMES           reduce using rule 58 (constant -> ICONST .)
    DIVIDE          reduce using rule 58 (constant -> ICONST .)
    EQUALS          reduce using rule 58 (constant -> ICONST .)
    MOD             reduce using rule 58 (constant -> ICONST .)
    GT              reduce using rule 58 (constant -> ICONST .)
    GET             reduce using rule 58 (constant -> ICONST .)
    LT              reduce using rule 58 (constant -> ICONST .)
    LET             reduce using rule 58 (constant -> ICONST .)
    DIFF            reduce using rule 58 (constant -> ICONST .)
    AND             reduce using rule 58 (constant -> ICONST .)
    OR              reduce using rule 58 (constant -> ICONST .)
    COMMA           reduce using rule 58 (constant -> ICONST .)
    SEMI            reduce using rule 58 (constant -> ICONST .)
    RBRACE          reduce using rule 58 (constant -> ICONST .)
    RBRACK          reduce using rule 58 (constant -> ICONST .)
    RPAREN          reduce using rule 58 (constant -> ICONST .)
    ID              reduce using rule 58 (constant -> ICONST .)
    LBRACK          reduce using rule 58 (constant -> ICONST .)
    IF              reduce using rule 58 (constant -> ICONST .)
    WHILE           reduce using rule 58 (constant -> ICONST .)
    FOR             reduce using rule 58 (constant -> ICONST .)
    BREAK           reduce using rule 58 (constant -> ICONST .)
    RETURN          reduce using rule 58 (constant -> ICONST .)
    ASSERT          reduce using rule 58 (constant -> ICONST .)
    PRINT           reduce using rule 58 (constant -> ICONST .)
    READ            reduce using rule 58 (constant -> ICONST .)
    ADDRESS         reduce using rule 58 (constant -> ICONST .)
    NOT             reduce using rule 58 (constant -> ICONST .)
    STRING_LITERAL  reduce using rule 58 (constant -> ICONST .)
    ICONST          reduce using rule 58 (constant -> ICONST .)
    FCONST          reduce using rule 58 (constant -> ICONST .)
    ELSE            reduce using rule 58 (constant -> ICONST .)


state 61

    (59) constant -> FCONST .

    LBRACE          reduce using rule 59 (constant -> FCONST .)
    LPAREN          reduce using rule 59 (constant -> FCONST .)
    PP              reduce using rule 59 (constant -> FCONST .)
    MM              reduce using rule 59 (constant -> FCONST .)
    ASSIGN          reduce using rule 59 (constant -> FCONST .)
    TASSIGN         reduce using rule 59 (constant -> FCONST .)
    DASSIGN         reduce using rule 59 (constant -> FCONST .)
    MODASSIGN       reduce using rule 59 (constant -> FCONST .)
    PASSIGN         reduce using rule 59 (constant -> FCONST .)
    MINASSIGN       reduce using rule 59 (constant -> FCONST .)
    PLUS            reduce using rule 59 (constant -> FCONST .)
    MINUS           reduce using rule 59 (constant -> FCONST .)
    TIMES           reduce using rule 59 (constant -> FCONST .)
    DIVIDE          reduce using rule 59 (constant -> FCONST .)
    EQUALS          reduce using rule 59 (constant -> FCONST .)
    MOD             reduce using rule 59 (constant -> FCONST .)
    GT              reduce using rule 59 (constant -> FCONST .)
    GET             reduce using rule 59 (constant -> FCONST .)
    LT              reduce using rule 59 (constant -> FCONST .)
    LET             reduce using rule 59 (constant -> FCONST .)
    DIFF            reduce using rule 59 (constant -> FCONST .)
    AND             reduce using rule 59 (constant -> FCONST .)
    OR              reduce using rule 59 (constant -> FCONST .)
    COMMA           reduce using rule 59 (constant -> FCONST .)
    SEMI            reduce using rule 59 (constant -> FCONST .)
    RBRACE          reduce using rule 59 (constant -> FCONST .)
    RBRACK          reduce using rule 59 (constant -> FCONST .)
    RPAREN          reduce using rule 59 (constant -> FCONST .)
    ID              reduce using rule 59 (constant -> FCONST .)
    LBRACK          reduce using rule 59 (constant -> FCONST .)
    IF              reduce using rule 59 (constant -> FCONST .)
    WHILE           reduce using rule 59 (constant -> FCONST .)
    FOR             reduce using rule 59 (constant -> FCONST .)
    BREAK           reduce using rule 59 (constant -> FCONST .)
    RETURN          reduce using rule 59 (constant -> FCONST .)
    ASSERT          reduce using rule 59 (constant -> FCONST .)
    PRINT           reduce using rule 59 (constant -> FCONST .)
    READ            reduce using rule 59 (constant -> FCONST .)
    ADDRESS         reduce using rule 59 (constant -> FCONST .)
    NOT             reduce using rule 59 (constant -> FCONST .)
    STRING_LITERAL  reduce using rule 59 (constant -> FCONST .)
    ICONST          reduce using rule 59 (constant -> FCONST .)
    FCONST          reduce using rule 59 (constant -> FCONST .)
    ELSE            reduce using rule 59 (constant -> FCONST .)


state 62

    (84) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 84 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 84 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 84 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    LBRACK          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 84 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 84 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 84 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 84 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 84 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 84 (declaration_list -> declaration_list declaration .)
    ADDRESS         reduce using rule 84 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 84 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 84 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 84 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 84 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    RBRACK          reduce using rule 84 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 84 (declaration_list -> declaration_list declaration .)


state 63

    (19) direct_declarator -> direct_declarator LBRACE constant_expression . RBRACE

    RBRACE          shift and go to state 113


state 64

    (20) direct_declarator -> direct_declarator LBRACE RBRACE .

    LBRACE          reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    LPAREN          reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    ASSIGN          reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    VOID            reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    CHAR            reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    INT             reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    FLOAT           reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    LBRACK          reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    COMMA           reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    SEMI            reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)
    RPAREN          reduce using rule 20 (direct_declarator -> direct_declarator LBRACE RBRACE .)


state 65

    (23) constant_expression -> expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    RBRACE          reduce using rule 23 (constant_expression -> expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 66

    (42) cast_expression -> unary_expression .

    PLUS            reduce using rule 42 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 42 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    MOD             reduce using rule 42 (cast_expression -> unary_expression .)
    GT              reduce using rule 42 (cast_expression -> unary_expression .)
    GET             reduce using rule 42 (cast_expression -> unary_expression .)
    LT              reduce using rule 42 (cast_expression -> unary_expression .)
    LET             reduce using rule 42 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 42 (cast_expression -> unary_expression .)
    AND             reduce using rule 42 (cast_expression -> unary_expression .)
    OR              reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 42 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 42 (cast_expression -> unary_expression .)
    TASSIGN         reduce using rule 42 (cast_expression -> unary_expression .)
    DASSIGN         reduce using rule 42 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 42 (cast_expression -> unary_expression .)
    PASSIGN         reduce using rule 42 (cast_expression -> unary_expression .)
    MINASSIGN       reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 42 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 42 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    ID              reduce using rule 42 (cast_expression -> unary_expression .)
    LBRACK          reduce using rule 42 (cast_expression -> unary_expression .)
    IF              reduce using rule 42 (cast_expression -> unary_expression .)
    WHILE           reduce using rule 42 (cast_expression -> unary_expression .)
    FOR             reduce using rule 42 (cast_expression -> unary_expression .)
    BREAK           reduce using rule 42 (cast_expression -> unary_expression .)
    RETURN          reduce using rule 42 (cast_expression -> unary_expression .)
    ASSERT          reduce using rule 42 (cast_expression -> unary_expression .)
    PRINT           reduce using rule 42 (cast_expression -> unary_expression .)
    READ            reduce using rule 42 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    PP              reduce using rule 42 (cast_expression -> unary_expression .)
    MM              reduce using rule 42 (cast_expression -> unary_expression .)
    ADDRESS         reduce using rule 42 (cast_expression -> unary_expression .)
    NOT             reduce using rule 42 (cast_expression -> unary_expression .)
    STRING_LITERAL  reduce using rule 42 (cast_expression -> unary_expression .)
    ICONST          reduce using rule 42 (cast_expression -> unary_expression .)
    FCONST          reduce using rule 42 (cast_expression -> unary_expression .)
    ELSE            reduce using rule 42 (cast_expression -> unary_expression .)


state 67

    (21) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (80) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 68

    (22) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 116


state 69

    (79) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 79 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 79 (parameter_list -> parameter_declaration .)


state 70

    (26) identifier_list_opt -> identifier_list .
    (24) identifier_list -> identifier_list . ID

    RPAREN          reduce using rule 26 (identifier_list_opt -> identifier_list .)
    ID              shift and go to state 117


state 71

    (27) identifier_list_opt -> empty .

    RPAREN          reduce using rule 27 (identifier_list_opt -> empty .)


state 72

    (81) parameter_declaration -> type_specifier . declarator
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (14) pointer -> . TIMES pointer_opt
    (17) direct_declarator -> . ID
    (18) direct_declarator -> . LPAREN declarator RPAREN
    (19) direct_declarator -> . direct_declarator LBRACE constant_expression RBRACE
    (20) direct_declarator -> . direct_declarator LBRACE RBRACE
    (21) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 18
    ID              shift and go to state 19
    LPAREN          shift and go to state 20

    declarator                     shift and go to state 118
    pointer                        shift and go to state 14
    direct_declarator              shift and go to state 15

state 73

    (25) identifier_list -> ID .

    ID              reduce using rule 25 (identifier_list -> ID .)
    RPAREN          reduce using rule 25 (identifier_list -> ID .)


state 74

    (90) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 90 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 90 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 75

    (18) direct_declarator -> LPAREN declarator RPAREN .

    LBRACE          reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACK          reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 18 (direct_declarator -> LPAREN declarator RPAREN .)


state 76

    (98) compound_statement -> LBRACK declaration_list_opt . statement_list_opt RBRACK
    (120) statement_list_opt -> . statement_list
    (121) statement_list_opt -> . empty
    (118) statement_list -> . statement_list statement
    (119) statement_list -> . statement
    (1) empty -> .
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RBRACK          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    statement_list_opt             shift and go to state 119
    statement_list                 shift and go to state 120
    empty                          shift and go to state 121
    statement                      shift and go to state 122
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression_opt                 shift and go to state 132
    expression                     shift and go to state 134
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 77

    (94) initializer -> LBRACK initializer_list . RBRACK
    (95) initializer -> LBRACK initializer_list . COMMA RBRACK
    (97) initializer_list -> initializer_list . COMMA initializer

    RBRACK          shift and go to state 142
    COMMA           shift and go to state 143


state 78

    (96) initializer_list -> initializer .

    RBRACK          reduce using rule 96 (initializer_list -> initializer .)
    COMMA           reduce using rule 96 (initializer_list -> initializer .)


state 79

    (29) expr -> expr PLUS . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 144
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 80

    (30) expr -> expr MINUS . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 145
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 81

    (31) expr -> expr TIMES . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 146
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 82

    (32) expr -> expr DIVIDE . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 147
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 83

    (33) expr -> expr EQUALS . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 148
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 84

    (34) expr -> expr MOD . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 149
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 85

    (35) expr -> expr GT . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 150
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 86

    (36) expr -> expr GET . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 151
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 87

    (37) expr -> expr LT . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 152
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 88

    (38) expr -> expr LET . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 153
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 89

    (39) expr -> expr DIFF . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 154
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 90

    (40) expr -> expr AND . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 155
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 91

    (41) expr -> expr OR . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 156
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 92

    (65) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    unary_expression               shift and go to state 44
    assignment_expression          shift and go to state 157
    expr                           shift and go to state 43
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 93

    (68) assignment_operator -> ASSIGN .

    LPAREN          reduce using rule 68 (assignment_operator -> ASSIGN .)
    PP              reduce using rule 68 (assignment_operator -> ASSIGN .)
    MM              reduce using rule 68 (assignment_operator -> ASSIGN .)
    ADDRESS         reduce using rule 68 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 68 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 68 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 68 (assignment_operator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> ASSIGN .)
    ICONST          reduce using rule 68 (assignment_operator -> ASSIGN .)
    FCONST          reduce using rule 68 (assignment_operator -> ASSIGN .)


state 94

    (69) assignment_operator -> TASSIGN .

    LPAREN          reduce using rule 69 (assignment_operator -> TASSIGN .)
    PP              reduce using rule 69 (assignment_operator -> TASSIGN .)
    MM              reduce using rule 69 (assignment_operator -> TASSIGN .)
    ADDRESS         reduce using rule 69 (assignment_operator -> TASSIGN .)
    TIMES           reduce using rule 69 (assignment_operator -> TASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> TASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> TASSIGN .)
    NOT             reduce using rule 69 (assignment_operator -> TASSIGN .)
    ID              reduce using rule 69 (assignment_operator -> TASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> TASSIGN .)
    ICONST          reduce using rule 69 (assignment_operator -> TASSIGN .)
    FCONST          reduce using rule 69 (assignment_operator -> TASSIGN .)


state 95

    (70) assignment_operator -> DASSIGN .

    LPAREN          reduce using rule 70 (assignment_operator -> DASSIGN .)
    PP              reduce using rule 70 (assignment_operator -> DASSIGN .)
    MM              reduce using rule 70 (assignment_operator -> DASSIGN .)
    ADDRESS         reduce using rule 70 (assignment_operator -> DASSIGN .)
    TIMES           reduce using rule 70 (assignment_operator -> DASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> DASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> DASSIGN .)
    NOT             reduce using rule 70 (assignment_operator -> DASSIGN .)
    ID              reduce using rule 70 (assignment_operator -> DASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> DASSIGN .)
    ICONST          reduce using rule 70 (assignment_operator -> DASSIGN .)
    FCONST          reduce using rule 70 (assignment_operator -> DASSIGN .)


state 96

    (71) assignment_operator -> MODASSIGN .

    LPAREN          reduce using rule 71 (assignment_operator -> MODASSIGN .)
    PP              reduce using rule 71 (assignment_operator -> MODASSIGN .)
    MM              reduce using rule 71 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 71 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 71 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> MODASSIGN .)
    NOT             reduce using rule 71 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 71 (assignment_operator -> MODASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> MODASSIGN .)
    ICONST          reduce using rule 71 (assignment_operator -> MODASSIGN .)
    FCONST          reduce using rule 71 (assignment_operator -> MODASSIGN .)


state 97

    (72) assignment_operator -> PASSIGN .

    LPAREN          reduce using rule 72 (assignment_operator -> PASSIGN .)
    PP              reduce using rule 72 (assignment_operator -> PASSIGN .)
    MM              reduce using rule 72 (assignment_operator -> PASSIGN .)
    ADDRESS         reduce using rule 72 (assignment_operator -> PASSIGN .)
    TIMES           reduce using rule 72 (assignment_operator -> PASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> PASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> PASSIGN .)
    NOT             reduce using rule 72 (assignment_operator -> PASSIGN .)
    ID              reduce using rule 72 (assignment_operator -> PASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> PASSIGN .)
    ICONST          reduce using rule 72 (assignment_operator -> PASSIGN .)
    FCONST          reduce using rule 72 (assignment_operator -> PASSIGN .)


state 98

    (73) assignment_operator -> MINASSIGN .

    LPAREN          reduce using rule 73 (assignment_operator -> MINASSIGN .)
    PP              reduce using rule 73 (assignment_operator -> MINASSIGN .)
    MM              reduce using rule 73 (assignment_operator -> MINASSIGN .)
    ADDRESS         reduce using rule 73 (assignment_operator -> MINASSIGN .)
    TIMES           reduce using rule 73 (assignment_operator -> MINASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> MINASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> MINASSIGN .)
    NOT             reduce using rule 73 (assignment_operator -> MINASSIGN .)
    ID              reduce using rule 73 (assignment_operator -> MINASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> MINASSIGN .)
    ICONST          reduce using rule 73 (assignment_operator -> MINASSIGN .)
    FCONST          reduce using rule 73 (assignment_operator -> MINASSIGN .)


state 99

    (123) expr -> LPAREN expr . RPAREN
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr
    (64) assignment_expression -> expr .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 158
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    COMMA           reduce using rule 64 (assignment_expression -> expr .)

  ! RPAREN          [ reduce using rule 64 (assignment_expression -> expr .) ]


state 100

    (43) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 159


state 101

    (57) primary_expression -> LPAREN expression . RPAREN
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161


state 102

    (60) expression -> assignment_expression .

    RPAREN          reduce using rule 60 (expression -> assignment_expression .)
    COMMA           reduce using rule 60 (expression -> assignment_expression .)
    SEMI            reduce using rule 60 (expression -> assignment_expression .)
    RBRACE          reduce using rule 60 (expression -> assignment_expression .)


state 103

    (42) cast_expression -> unary_expression .
    (65) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (68) assignment_operator -> . ASSIGN
    (69) assignment_operator -> . TASSIGN
    (70) assignment_operator -> . DASSIGN
    (71) assignment_operator -> . MODASSIGN
    (72) assignment_operator -> . PASSIGN
    (73) assignment_operator -> . MINASSIGN

    RPAREN          reduce using rule 42 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 42 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 42 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    MOD             reduce using rule 42 (cast_expression -> unary_expression .)
    GT              reduce using rule 42 (cast_expression -> unary_expression .)
    GET             reduce using rule 42 (cast_expression -> unary_expression .)
    LT              reduce using rule 42 (cast_expression -> unary_expression .)
    LET             reduce using rule 42 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 42 (cast_expression -> unary_expression .)
    AND             reduce using rule 42 (cast_expression -> unary_expression .)
    OR              reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 93
    TASSIGN         shift and go to state 94
    DASSIGN         shift and go to state 95
    MODASSIGN       shift and go to state 96
    PASSIGN         shift and go to state 97
    MINASSIGN       shift and go to state 98

    assignment_operator            shift and go to state 92

state 104

    (49) postfix_expression -> postfix_expression LBRACE . expression RBRACE
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    postfix_expression             shift and go to state 50
    expression                     shift and go to state 162
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 105

    (50) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (51) postfix_expression -> postfix_expression LPAREN . RPAREN
    (66) argument_expression -> . assignment_expression
    (67) argument_expression -> . argument_expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RPAREN          shift and go to state 164
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    postfix_expression             shift and go to state 50
    argument_expression            shift and go to state 163
    assignment_expression          shift and go to state 165
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 106

    (52) postfix_expression -> postfix_expression PP .

    LBRACE          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    LPAREN          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    PP              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    MM              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ASSIGN          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    TASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    DASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    MODASSIGN       reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    PASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    MINASSIGN       reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    PLUS            reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    MINUS           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    TIMES           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    DIVIDE          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    EQUALS          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    MOD             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    GT              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    GET             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    LT              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    LET             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    DIFF            reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    AND             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    OR              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    COMMA           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    SEMI            reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    RBRACE          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    RBRACK          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    RPAREN          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ID              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    LBRACK          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    IF              reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    WHILE           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    FOR             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    BREAK           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    RETURN          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ASSERT          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    PRINT           reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    READ            reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ADDRESS         reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    NOT             reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    STRING_LITERAL  reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ICONST          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    FCONST          reduce using rule 52 (postfix_expression -> postfix_expression PP .)
    ELSE            reduce using rule 52 (postfix_expression -> postfix_expression PP .)


state 107

    (53) postfix_expression -> postfix_expression MM .

    LBRACE          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    LPAREN          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    PP              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    MM              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ASSIGN          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    TASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    DASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    MODASSIGN       reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    PASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    MINASSIGN       reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    PLUS            reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    MINUS           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    TIMES           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    DIVIDE          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    EQUALS          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    MOD             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    GT              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    GET             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    LT              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    LET             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    DIFF            reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    AND             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    OR              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    COMMA           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    SEMI            reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    RBRACE          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    RBRACK          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    RPAREN          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ID              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    LBRACK          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    IF              reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    WHILE           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    FOR             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    BREAK           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    RETURN          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ASSERT          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    PRINT           reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    READ            reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ADDRESS         reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    NOT             reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    STRING_LITERAL  reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ICONST          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    FCONST          reduce using rule 53 (postfix_expression -> postfix_expression MM .)
    ELSE            reduce using rule 53 (postfix_expression -> postfix_expression MM .)


state 108

    (45) unary_expression -> PP unary_expression .

    ASSIGN          reduce using rule 45 (unary_expression -> PP unary_expression .)
    TASSIGN         reduce using rule 45 (unary_expression -> PP unary_expression .)
    DASSIGN         reduce using rule 45 (unary_expression -> PP unary_expression .)
    MODASSIGN       reduce using rule 45 (unary_expression -> PP unary_expression .)
    PASSIGN         reduce using rule 45 (unary_expression -> PP unary_expression .)
    MINASSIGN       reduce using rule 45 (unary_expression -> PP unary_expression .)
    PLUS            reduce using rule 45 (unary_expression -> PP unary_expression .)
    MINUS           reduce using rule 45 (unary_expression -> PP unary_expression .)
    TIMES           reduce using rule 45 (unary_expression -> PP unary_expression .)
    DIVIDE          reduce using rule 45 (unary_expression -> PP unary_expression .)
    EQUALS          reduce using rule 45 (unary_expression -> PP unary_expression .)
    MOD             reduce using rule 45 (unary_expression -> PP unary_expression .)
    GT              reduce using rule 45 (unary_expression -> PP unary_expression .)
    GET             reduce using rule 45 (unary_expression -> PP unary_expression .)
    LT              reduce using rule 45 (unary_expression -> PP unary_expression .)
    LET             reduce using rule 45 (unary_expression -> PP unary_expression .)
    DIFF            reduce using rule 45 (unary_expression -> PP unary_expression .)
    AND             reduce using rule 45 (unary_expression -> PP unary_expression .)
    OR              reduce using rule 45 (unary_expression -> PP unary_expression .)
    COMMA           reduce using rule 45 (unary_expression -> PP unary_expression .)
    SEMI            reduce using rule 45 (unary_expression -> PP unary_expression .)
    RBRACE          reduce using rule 45 (unary_expression -> PP unary_expression .)
    RBRACK          reduce using rule 45 (unary_expression -> PP unary_expression .)
    RPAREN          reduce using rule 45 (unary_expression -> PP unary_expression .)
    ID              reduce using rule 45 (unary_expression -> PP unary_expression .)
    LBRACK          reduce using rule 45 (unary_expression -> PP unary_expression .)
    IF              reduce using rule 45 (unary_expression -> PP unary_expression .)
    WHILE           reduce using rule 45 (unary_expression -> PP unary_expression .)
    FOR             reduce using rule 45 (unary_expression -> PP unary_expression .)
    BREAK           reduce using rule 45 (unary_expression -> PP unary_expression .)
    RETURN          reduce using rule 45 (unary_expression -> PP unary_expression .)
    ASSERT          reduce using rule 45 (unary_expression -> PP unary_expression .)
    PRINT           reduce using rule 45 (unary_expression -> PP unary_expression .)
    READ            reduce using rule 45 (unary_expression -> PP unary_expression .)
    LPAREN          reduce using rule 45 (unary_expression -> PP unary_expression .)
    PP              reduce using rule 45 (unary_expression -> PP unary_expression .)
    MM              reduce using rule 45 (unary_expression -> PP unary_expression .)
    ADDRESS         reduce using rule 45 (unary_expression -> PP unary_expression .)
    NOT             reduce using rule 45 (unary_expression -> PP unary_expression .)
    STRING_LITERAL  reduce using rule 45 (unary_expression -> PP unary_expression .)
    ICONST          reduce using rule 45 (unary_expression -> PP unary_expression .)
    FCONST          reduce using rule 45 (unary_expression -> PP unary_expression .)
    ELSE            reduce using rule 45 (unary_expression -> PP unary_expression .)


state 109

    (57) primary_expression -> LPAREN . expression RPAREN
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 101
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 110

    (46) unary_expression -> MM unary_expression .

    ASSIGN          reduce using rule 46 (unary_expression -> MM unary_expression .)
    TASSIGN         reduce using rule 46 (unary_expression -> MM unary_expression .)
    DASSIGN         reduce using rule 46 (unary_expression -> MM unary_expression .)
    MODASSIGN       reduce using rule 46 (unary_expression -> MM unary_expression .)
    PASSIGN         reduce using rule 46 (unary_expression -> MM unary_expression .)
    MINASSIGN       reduce using rule 46 (unary_expression -> MM unary_expression .)
    PLUS            reduce using rule 46 (unary_expression -> MM unary_expression .)
    MINUS           reduce using rule 46 (unary_expression -> MM unary_expression .)
    TIMES           reduce using rule 46 (unary_expression -> MM unary_expression .)
    DIVIDE          reduce using rule 46 (unary_expression -> MM unary_expression .)
    EQUALS          reduce using rule 46 (unary_expression -> MM unary_expression .)
    MOD             reduce using rule 46 (unary_expression -> MM unary_expression .)
    GT              reduce using rule 46 (unary_expression -> MM unary_expression .)
    GET             reduce using rule 46 (unary_expression -> MM unary_expression .)
    LT              reduce using rule 46 (unary_expression -> MM unary_expression .)
    LET             reduce using rule 46 (unary_expression -> MM unary_expression .)
    DIFF            reduce using rule 46 (unary_expression -> MM unary_expression .)
    AND             reduce using rule 46 (unary_expression -> MM unary_expression .)
    OR              reduce using rule 46 (unary_expression -> MM unary_expression .)
    COMMA           reduce using rule 46 (unary_expression -> MM unary_expression .)
    SEMI            reduce using rule 46 (unary_expression -> MM unary_expression .)
    RBRACE          reduce using rule 46 (unary_expression -> MM unary_expression .)
    RBRACK          reduce using rule 46 (unary_expression -> MM unary_expression .)
    RPAREN          reduce using rule 46 (unary_expression -> MM unary_expression .)
    ID              reduce using rule 46 (unary_expression -> MM unary_expression .)
    LBRACK          reduce using rule 46 (unary_expression -> MM unary_expression .)
    IF              reduce using rule 46 (unary_expression -> MM unary_expression .)
    WHILE           reduce using rule 46 (unary_expression -> MM unary_expression .)
    FOR             reduce using rule 46 (unary_expression -> MM unary_expression .)
    BREAK           reduce using rule 46 (unary_expression -> MM unary_expression .)
    RETURN          reduce using rule 46 (unary_expression -> MM unary_expression .)
    ASSERT          reduce using rule 46 (unary_expression -> MM unary_expression .)
    PRINT           reduce using rule 46 (unary_expression -> MM unary_expression .)
    READ            reduce using rule 46 (unary_expression -> MM unary_expression .)
    LPAREN          reduce using rule 46 (unary_expression -> MM unary_expression .)
    PP              reduce using rule 46 (unary_expression -> MM unary_expression .)
    MM              reduce using rule 46 (unary_expression -> MM unary_expression .)
    ADDRESS         reduce using rule 46 (unary_expression -> MM unary_expression .)
    NOT             reduce using rule 46 (unary_expression -> MM unary_expression .)
    STRING_LITERAL  reduce using rule 46 (unary_expression -> MM unary_expression .)
    ICONST          reduce using rule 46 (unary_expression -> MM unary_expression .)
    FCONST          reduce using rule 46 (unary_expression -> MM unary_expression .)
    ELSE            reduce using rule 46 (unary_expression -> MM unary_expression .)


state 111

    (47) unary_expression -> unary_operator cast_expression .

    ASSIGN          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    TASSIGN         reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    DASSIGN         reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    PASSIGN         reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    MINASSIGN       reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    GET             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    LET             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    RBRACK          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    LBRACK          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    IF              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    WHILE           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    FOR             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    BREAK           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    RETURN          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    ASSERT          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    PRINT           reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    READ            reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    PP              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    MM              reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    ADDRESS         reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    STRING_LITERAL  reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    ICONST          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    FCONST          reduce using rule 47 (unary_expression -> unary_operator cast_expression .)
    ELSE            reduce using rule 47 (unary_expression -> unary_operator cast_expression .)


state 112

    (43) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (57) primary_expression -> LPAREN . expression RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    type_specifier                 shift and go to state 100
    cast_expression                shift and go to state 45
    expression                     shift and go to state 101
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 113

    (19) direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .

    LBRACE          reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    LPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    ASSIGN          reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    VOID            reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    CHAR            reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    INT             reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    FLOAT           reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    LBRACK          reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    COMMA           reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    SEMI            reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)
    RPAREN          reduce using rule 19 (direct_declarator -> direct_declarator LBRACE constant_expression RBRACE .)


state 114

    (21) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACE          reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACK          reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 115

    (80) parameter_list -> parameter_list COMMA . parameter_declaration
    (81) parameter_declaration -> . type_specifier declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10

    parameter_declaration          shift and go to state 166
    type_specifier                 shift and go to state 72

state 116

    (22) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ASSIGN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACK          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 117

    (24) identifier_list -> identifier_list ID .

    ID              reduce using rule 24 (identifier_list -> identifier_list ID .)
    RPAREN          reduce using rule 24 (identifier_list -> identifier_list ID .)


state 118

    (81) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 81 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 81 (parameter_declaration -> type_specifier declarator .)


state 119

    (98) compound_statement -> LBRACK declaration_list_opt statement_list_opt . RBRACK

    RBRACK          shift and go to state 167


state 120

    (120) statement_list_opt -> statement_list .
    (118) statement_list -> statement_list . statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RBRACK          reduce using rule 120 (statement_list_opt -> statement_list .)
    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    statement                      shift and go to state 168
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression_opt                 shift and go to state 132
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 121

    (121) statement_list_opt -> empty .
    (63) expression_opt -> empty .

    RBRACK          reduce using rule 121 (statement_list_opt -> empty .)
    SEMI            reduce using rule 63 (expression_opt -> empty .)


state 122

    (119) statement_list -> statement .

    ID              reduce using rule 119 (statement_list -> statement .)
    LBRACK          reduce using rule 119 (statement_list -> statement .)
    IF              reduce using rule 119 (statement_list -> statement .)
    WHILE           reduce using rule 119 (statement_list -> statement .)
    FOR             reduce using rule 119 (statement_list -> statement .)
    BREAK           reduce using rule 119 (statement_list -> statement .)
    RETURN          reduce using rule 119 (statement_list -> statement .)
    ASSERT          reduce using rule 119 (statement_list -> statement .)
    PRINT           reduce using rule 119 (statement_list -> statement .)
    READ            reduce using rule 119 (statement_list -> statement .)
    LPAREN          reduce using rule 119 (statement_list -> statement .)
    PP              reduce using rule 119 (statement_list -> statement .)
    MM              reduce using rule 119 (statement_list -> statement .)
    ADDRESS         reduce using rule 119 (statement_list -> statement .)
    TIMES           reduce using rule 119 (statement_list -> statement .)
    PLUS            reduce using rule 119 (statement_list -> statement .)
    MINUS           reduce using rule 119 (statement_list -> statement .)
    NOT             reduce using rule 119 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 119 (statement_list -> statement .)
    ICONST          reduce using rule 119 (statement_list -> statement .)
    FCONST          reduce using rule 119 (statement_list -> statement .)
    SEMI            reduce using rule 119 (statement_list -> statement .)
    RBRACK          reduce using rule 119 (statement_list -> statement .)


state 123

    (99) statement -> expression_statement .

    ID              reduce using rule 99 (statement -> expression_statement .)
    LBRACK          reduce using rule 99 (statement -> expression_statement .)
    IF              reduce using rule 99 (statement -> expression_statement .)
    WHILE           reduce using rule 99 (statement -> expression_statement .)
    FOR             reduce using rule 99 (statement -> expression_statement .)
    BREAK           reduce using rule 99 (statement -> expression_statement .)
    RETURN          reduce using rule 99 (statement -> expression_statement .)
    ASSERT          reduce using rule 99 (statement -> expression_statement .)
    PRINT           reduce using rule 99 (statement -> expression_statement .)
    READ            reduce using rule 99 (statement -> expression_statement .)
    LPAREN          reduce using rule 99 (statement -> expression_statement .)
    PP              reduce using rule 99 (statement -> expression_statement .)
    MM              reduce using rule 99 (statement -> expression_statement .)
    ADDRESS         reduce using rule 99 (statement -> expression_statement .)
    TIMES           reduce using rule 99 (statement -> expression_statement .)
    PLUS            reduce using rule 99 (statement -> expression_statement .)
    MINUS           reduce using rule 99 (statement -> expression_statement .)
    NOT             reduce using rule 99 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 99 (statement -> expression_statement .)
    ICONST          reduce using rule 99 (statement -> expression_statement .)
    FCONST          reduce using rule 99 (statement -> expression_statement .)
    SEMI            reduce using rule 99 (statement -> expression_statement .)
    RBRACK          reduce using rule 99 (statement -> expression_statement .)
    ELSE            reduce using rule 99 (statement -> expression_statement .)


state 124

    (100) statement -> compound_statement .

    ID              reduce using rule 100 (statement -> compound_statement .)
    LBRACK          reduce using rule 100 (statement -> compound_statement .)
    IF              reduce using rule 100 (statement -> compound_statement .)
    WHILE           reduce using rule 100 (statement -> compound_statement .)
    FOR             reduce using rule 100 (statement -> compound_statement .)
    BREAK           reduce using rule 100 (statement -> compound_statement .)
    RETURN          reduce using rule 100 (statement -> compound_statement .)
    ASSERT          reduce using rule 100 (statement -> compound_statement .)
    PRINT           reduce using rule 100 (statement -> compound_statement .)
    READ            reduce using rule 100 (statement -> compound_statement .)
    LPAREN          reduce using rule 100 (statement -> compound_statement .)
    PP              reduce using rule 100 (statement -> compound_statement .)
    MM              reduce using rule 100 (statement -> compound_statement .)
    ADDRESS         reduce using rule 100 (statement -> compound_statement .)
    TIMES           reduce using rule 100 (statement -> compound_statement .)
    PLUS            reduce using rule 100 (statement -> compound_statement .)
    MINUS           reduce using rule 100 (statement -> compound_statement .)
    NOT             reduce using rule 100 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 100 (statement -> compound_statement .)
    ICONST          reduce using rule 100 (statement -> compound_statement .)
    FCONST          reduce using rule 100 (statement -> compound_statement .)
    SEMI            reduce using rule 100 (statement -> compound_statement .)
    RBRACK          reduce using rule 100 (statement -> compound_statement .)
    ELSE            reduce using rule 100 (statement -> compound_statement .)


state 125

    (101) statement -> selection_statement .

    ID              reduce using rule 101 (statement -> selection_statement .)
    LBRACK          reduce using rule 101 (statement -> selection_statement .)
    IF              reduce using rule 101 (statement -> selection_statement .)
    WHILE           reduce using rule 101 (statement -> selection_statement .)
    FOR             reduce using rule 101 (statement -> selection_statement .)
    BREAK           reduce using rule 101 (statement -> selection_statement .)
    RETURN          reduce using rule 101 (statement -> selection_statement .)
    ASSERT          reduce using rule 101 (statement -> selection_statement .)
    PRINT           reduce using rule 101 (statement -> selection_statement .)
    READ            reduce using rule 101 (statement -> selection_statement .)
    LPAREN          reduce using rule 101 (statement -> selection_statement .)
    PP              reduce using rule 101 (statement -> selection_statement .)
    MM              reduce using rule 101 (statement -> selection_statement .)
    ADDRESS         reduce using rule 101 (statement -> selection_statement .)
    TIMES           reduce using rule 101 (statement -> selection_statement .)
    PLUS            reduce using rule 101 (statement -> selection_statement .)
    MINUS           reduce using rule 101 (statement -> selection_statement .)
    NOT             reduce using rule 101 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 101 (statement -> selection_statement .)
    ICONST          reduce using rule 101 (statement -> selection_statement .)
    FCONST          reduce using rule 101 (statement -> selection_statement .)
    SEMI            reduce using rule 101 (statement -> selection_statement .)
    RBRACK          reduce using rule 101 (statement -> selection_statement .)
    ELSE            reduce using rule 101 (statement -> selection_statement .)


state 126

    (102) statement -> iteration_statement .

    ID              reduce using rule 102 (statement -> iteration_statement .)
    LBRACK          reduce using rule 102 (statement -> iteration_statement .)
    IF              reduce using rule 102 (statement -> iteration_statement .)
    WHILE           reduce using rule 102 (statement -> iteration_statement .)
    FOR             reduce using rule 102 (statement -> iteration_statement .)
    BREAK           reduce using rule 102 (statement -> iteration_statement .)
    RETURN          reduce using rule 102 (statement -> iteration_statement .)
    ASSERT          reduce using rule 102 (statement -> iteration_statement .)
    PRINT           reduce using rule 102 (statement -> iteration_statement .)
    READ            reduce using rule 102 (statement -> iteration_statement .)
    LPAREN          reduce using rule 102 (statement -> iteration_statement .)
    PP              reduce using rule 102 (statement -> iteration_statement .)
    MM              reduce using rule 102 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 102 (statement -> iteration_statement .)
    TIMES           reduce using rule 102 (statement -> iteration_statement .)
    PLUS            reduce using rule 102 (statement -> iteration_statement .)
    MINUS           reduce using rule 102 (statement -> iteration_statement .)
    NOT             reduce using rule 102 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 102 (statement -> iteration_statement .)
    ICONST          reduce using rule 102 (statement -> iteration_statement .)
    FCONST          reduce using rule 102 (statement -> iteration_statement .)
    SEMI            reduce using rule 102 (statement -> iteration_statement .)
    RBRACK          reduce using rule 102 (statement -> iteration_statement .)
    ELSE            reduce using rule 102 (statement -> iteration_statement .)


state 127

    (103) statement -> jump_statement .

    ID              reduce using rule 103 (statement -> jump_statement .)
    LBRACK          reduce using rule 103 (statement -> jump_statement .)
    IF              reduce using rule 103 (statement -> jump_statement .)
    WHILE           reduce using rule 103 (statement -> jump_statement .)
    FOR             reduce using rule 103 (statement -> jump_statement .)
    BREAK           reduce using rule 103 (statement -> jump_statement .)
    RETURN          reduce using rule 103 (statement -> jump_statement .)
    ASSERT          reduce using rule 103 (statement -> jump_statement .)
    PRINT           reduce using rule 103 (statement -> jump_statement .)
    READ            reduce using rule 103 (statement -> jump_statement .)
    LPAREN          reduce using rule 103 (statement -> jump_statement .)
    PP              reduce using rule 103 (statement -> jump_statement .)
    MM              reduce using rule 103 (statement -> jump_statement .)
    ADDRESS         reduce using rule 103 (statement -> jump_statement .)
    TIMES           reduce using rule 103 (statement -> jump_statement .)
    PLUS            reduce using rule 103 (statement -> jump_statement .)
    MINUS           reduce using rule 103 (statement -> jump_statement .)
    NOT             reduce using rule 103 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 103 (statement -> jump_statement .)
    ICONST          reduce using rule 103 (statement -> jump_statement .)
    FCONST          reduce using rule 103 (statement -> jump_statement .)
    SEMI            reduce using rule 103 (statement -> jump_statement .)
    RBRACK          reduce using rule 103 (statement -> jump_statement .)
    ELSE            reduce using rule 103 (statement -> jump_statement .)


state 128

    (104) statement -> assert_statement .

    ID              reduce using rule 104 (statement -> assert_statement .)
    LBRACK          reduce using rule 104 (statement -> assert_statement .)
    IF              reduce using rule 104 (statement -> assert_statement .)
    WHILE           reduce using rule 104 (statement -> assert_statement .)
    FOR             reduce using rule 104 (statement -> assert_statement .)
    BREAK           reduce using rule 104 (statement -> assert_statement .)
    RETURN          reduce using rule 104 (statement -> assert_statement .)
    ASSERT          reduce using rule 104 (statement -> assert_statement .)
    PRINT           reduce using rule 104 (statement -> assert_statement .)
    READ            reduce using rule 104 (statement -> assert_statement .)
    LPAREN          reduce using rule 104 (statement -> assert_statement .)
    PP              reduce using rule 104 (statement -> assert_statement .)
    MM              reduce using rule 104 (statement -> assert_statement .)
    ADDRESS         reduce using rule 104 (statement -> assert_statement .)
    TIMES           reduce using rule 104 (statement -> assert_statement .)
    PLUS            reduce using rule 104 (statement -> assert_statement .)
    MINUS           reduce using rule 104 (statement -> assert_statement .)
    NOT             reduce using rule 104 (statement -> assert_statement .)
    STRING_LITERAL  reduce using rule 104 (statement -> assert_statement .)
    ICONST          reduce using rule 104 (statement -> assert_statement .)
    FCONST          reduce using rule 104 (statement -> assert_statement .)
    SEMI            reduce using rule 104 (statement -> assert_statement .)
    RBRACK          reduce using rule 104 (statement -> assert_statement .)
    ELSE            reduce using rule 104 (statement -> assert_statement .)


state 129

    (105) statement -> print_statement .

    ID              reduce using rule 105 (statement -> print_statement .)
    LBRACK          reduce using rule 105 (statement -> print_statement .)
    IF              reduce using rule 105 (statement -> print_statement .)
    WHILE           reduce using rule 105 (statement -> print_statement .)
    FOR             reduce using rule 105 (statement -> print_statement .)
    BREAK           reduce using rule 105 (statement -> print_statement .)
    RETURN          reduce using rule 105 (statement -> print_statement .)
    ASSERT          reduce using rule 105 (statement -> print_statement .)
    PRINT           reduce using rule 105 (statement -> print_statement .)
    READ            reduce using rule 105 (statement -> print_statement .)
    LPAREN          reduce using rule 105 (statement -> print_statement .)
    PP              reduce using rule 105 (statement -> print_statement .)
    MM              reduce using rule 105 (statement -> print_statement .)
    ADDRESS         reduce using rule 105 (statement -> print_statement .)
    TIMES           reduce using rule 105 (statement -> print_statement .)
    PLUS            reduce using rule 105 (statement -> print_statement .)
    MINUS           reduce using rule 105 (statement -> print_statement .)
    NOT             reduce using rule 105 (statement -> print_statement .)
    STRING_LITERAL  reduce using rule 105 (statement -> print_statement .)
    ICONST          reduce using rule 105 (statement -> print_statement .)
    FCONST          reduce using rule 105 (statement -> print_statement .)
    SEMI            reduce using rule 105 (statement -> print_statement .)
    RBRACK          reduce using rule 105 (statement -> print_statement .)
    ELSE            reduce using rule 105 (statement -> print_statement .)


state 130

    (106) statement -> read_statement .

    ID              reduce using rule 106 (statement -> read_statement .)
    LBRACK          reduce using rule 106 (statement -> read_statement .)
    IF              reduce using rule 106 (statement -> read_statement .)
    WHILE           reduce using rule 106 (statement -> read_statement .)
    FOR             reduce using rule 106 (statement -> read_statement .)
    BREAK           reduce using rule 106 (statement -> read_statement .)
    RETURN          reduce using rule 106 (statement -> read_statement .)
    ASSERT          reduce using rule 106 (statement -> read_statement .)
    PRINT           reduce using rule 106 (statement -> read_statement .)
    READ            reduce using rule 106 (statement -> read_statement .)
    LPAREN          reduce using rule 106 (statement -> read_statement .)
    PP              reduce using rule 106 (statement -> read_statement .)
    MM              reduce using rule 106 (statement -> read_statement .)
    ADDRESS         reduce using rule 106 (statement -> read_statement .)
    TIMES           reduce using rule 106 (statement -> read_statement .)
    PLUS            reduce using rule 106 (statement -> read_statement .)
    MINUS           reduce using rule 106 (statement -> read_statement .)
    NOT             reduce using rule 106 (statement -> read_statement .)
    STRING_LITERAL  reduce using rule 106 (statement -> read_statement .)
    ICONST          reduce using rule 106 (statement -> read_statement .)
    FCONST          reduce using rule 106 (statement -> read_statement .)
    SEMI            reduce using rule 106 (statement -> read_statement .)
    RBRACK          reduce using rule 106 (statement -> read_statement .)
    ELSE            reduce using rule 106 (statement -> read_statement .)


state 131

    (122) statement -> ID . ASSIGN expr
    (54) primary_expression -> ID .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 170
    LBRACE          reduce using rule 54 (primary_expression -> ID .)
    LPAREN          reduce using rule 54 (primary_expression -> ID .)
    PP              reduce using rule 54 (primary_expression -> ID .)
    MM              reduce using rule 54 (primary_expression -> ID .)
    TASSIGN         reduce using rule 54 (primary_expression -> ID .)
    DASSIGN         reduce using rule 54 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 54 (primary_expression -> ID .)
    PASSIGN         reduce using rule 54 (primary_expression -> ID .)
    MINASSIGN       reduce using rule 54 (primary_expression -> ID .)
    PLUS            reduce using rule 54 (primary_expression -> ID .)
    MINUS           reduce using rule 54 (primary_expression -> ID .)
    TIMES           reduce using rule 54 (primary_expression -> ID .)
    DIVIDE          reduce using rule 54 (primary_expression -> ID .)
    EQUALS          reduce using rule 54 (primary_expression -> ID .)
    MOD             reduce using rule 54 (primary_expression -> ID .)
    GT              reduce using rule 54 (primary_expression -> ID .)
    GET             reduce using rule 54 (primary_expression -> ID .)
    LT              reduce using rule 54 (primary_expression -> ID .)
    LET             reduce using rule 54 (primary_expression -> ID .)
    DIFF            reduce using rule 54 (primary_expression -> ID .)
    AND             reduce using rule 54 (primary_expression -> ID .)
    OR              reduce using rule 54 (primary_expression -> ID .)
    COMMA           reduce using rule 54 (primary_expression -> ID .)
    SEMI            reduce using rule 54 (primary_expression -> ID .)

  ! ASSIGN          [ reduce using rule 54 (primary_expression -> ID .) ]


state 132

    (107) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 171


state 133

    (108) selection_statement -> IF . LPAREN expression RPAREN statement
    (109) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 172


state 134

    (62) expression_opt -> expression .
    (61) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 62 (expression_opt -> expression .)
    RPAREN          reduce using rule 62 (expression_opt -> expression .)
    COMMA           shift and go to state 161


state 135

    (110) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 173


state 136

    (111) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 174


state 137

    (113) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 175


state 138

    (114) jump_statement -> RETURN . expression_opt SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 176
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 139

    (115) assert_statement -> ASSERT . expr SEMI
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 177
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 140

    (116) print_statement -> PRINT . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 178


state 141

    (117) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 179


state 142

    (94) initializer -> LBRACK initializer_list RBRACK .

    COMMA           reduce using rule 94 (initializer -> LBRACK initializer_list RBRACK .)
    SEMI            reduce using rule 94 (initializer -> LBRACK initializer_list RBRACK .)
    RBRACK          reduce using rule 94 (initializer -> LBRACK initializer_list RBRACK .)


state 143

    (95) initializer -> LBRACK initializer_list COMMA . RBRACK
    (97) initializer_list -> initializer_list COMMA . initializer
    (93) initializer -> . assignment_expression
    (94) initializer -> . LBRACK initializer_list RBRACK
    (95) initializer -> . LBRACK initializer_list COMMA RBRACK
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RBRACK          shift and go to state 180
    LBRACK          shift and go to state 42
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    initializer                    shift and go to state 181
    assignment_expression          shift and go to state 41
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 144

    (29) expr -> expr PLUS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    PLUS            reduce using rule 29 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 29 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 29 (expr -> expr PLUS expr .)
    GT              reduce using rule 29 (expr -> expr PLUS expr .)
    GET             reduce using rule 29 (expr -> expr PLUS expr .)
    LT              reduce using rule 29 (expr -> expr PLUS expr .)
    LET             reduce using rule 29 (expr -> expr PLUS expr .)
    DIFF            reduce using rule 29 (expr -> expr PLUS expr .)
    AND             reduce using rule 29 (expr -> expr PLUS expr .)
    OR              reduce using rule 29 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 29 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 29 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 29 (expr -> expr PLUS expr .)
    RBRACK          reduce using rule 29 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 29 (expr -> expr PLUS expr .)
    ID              reduce using rule 29 (expr -> expr PLUS expr .)
    LBRACK          reduce using rule 29 (expr -> expr PLUS expr .)
    IF              reduce using rule 29 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 29 (expr -> expr PLUS expr .)
    FOR             reduce using rule 29 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 29 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 29 (expr -> expr PLUS expr .)
    ASSERT          reduce using rule 29 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 29 (expr -> expr PLUS expr .)
    READ            reduce using rule 29 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 29 (expr -> expr PLUS expr .)
    PP              reduce using rule 29 (expr -> expr PLUS expr .)
    MM              reduce using rule 29 (expr -> expr PLUS expr .)
    ADDRESS         reduce using rule 29 (expr -> expr PLUS expr .)
    NOT             reduce using rule 29 (expr -> expr PLUS expr .)
    STRING_LITERAL  reduce using rule 29 (expr -> expr PLUS expr .)
    ICONST          reduce using rule 29 (expr -> expr PLUS expr .)
    FCONST          reduce using rule 29 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 29 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! TIMES           [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 145

    (30) expr -> expr MINUS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    PLUS            reduce using rule 30 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 30 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 30 (expr -> expr MINUS expr .)
    GT              reduce using rule 30 (expr -> expr MINUS expr .)
    GET             reduce using rule 30 (expr -> expr MINUS expr .)
    LT              reduce using rule 30 (expr -> expr MINUS expr .)
    LET             reduce using rule 30 (expr -> expr MINUS expr .)
    DIFF            reduce using rule 30 (expr -> expr MINUS expr .)
    AND             reduce using rule 30 (expr -> expr MINUS expr .)
    OR              reduce using rule 30 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 30 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 30 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 30 (expr -> expr MINUS expr .)
    RBRACK          reduce using rule 30 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 30 (expr -> expr MINUS expr .)
    ID              reduce using rule 30 (expr -> expr MINUS expr .)
    LBRACK          reduce using rule 30 (expr -> expr MINUS expr .)
    IF              reduce using rule 30 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 30 (expr -> expr MINUS expr .)
    FOR             reduce using rule 30 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 30 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 30 (expr -> expr MINUS expr .)
    ASSERT          reduce using rule 30 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 30 (expr -> expr MINUS expr .)
    READ            reduce using rule 30 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 30 (expr -> expr MINUS expr .)
    PP              reduce using rule 30 (expr -> expr MINUS expr .)
    MM              reduce using rule 30 (expr -> expr MINUS expr .)
    ADDRESS         reduce using rule 30 (expr -> expr MINUS expr .)
    NOT             reduce using rule 30 (expr -> expr MINUS expr .)
    STRING_LITERAL  reduce using rule 30 (expr -> expr MINUS expr .)
    ICONST          reduce using rule 30 (expr -> expr MINUS expr .)
    FCONST          reduce using rule 30 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 30 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! TIMES           [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 146

    (31) expr -> expr TIMES expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    PLUS            reduce using rule 31 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 31 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 31 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 31 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 31 (expr -> expr TIMES expr .)
    MOD             reduce using rule 31 (expr -> expr TIMES expr .)
    GT              reduce using rule 31 (expr -> expr TIMES expr .)
    GET             reduce using rule 31 (expr -> expr TIMES expr .)
    LT              reduce using rule 31 (expr -> expr TIMES expr .)
    LET             reduce using rule 31 (expr -> expr TIMES expr .)
    DIFF            reduce using rule 31 (expr -> expr TIMES expr .)
    AND             reduce using rule 31 (expr -> expr TIMES expr .)
    OR              reduce using rule 31 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 31 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 31 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 31 (expr -> expr TIMES expr .)
    RBRACK          reduce using rule 31 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 31 (expr -> expr TIMES expr .)
    ID              reduce using rule 31 (expr -> expr TIMES expr .)
    LBRACK          reduce using rule 31 (expr -> expr TIMES expr .)
    IF              reduce using rule 31 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 31 (expr -> expr TIMES expr .)
    FOR             reduce using rule 31 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 31 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 31 (expr -> expr TIMES expr .)
    ASSERT          reduce using rule 31 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 31 (expr -> expr TIMES expr .)
    READ            reduce using rule 31 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 31 (expr -> expr TIMES expr .)
    PP              reduce using rule 31 (expr -> expr TIMES expr .)
    MM              reduce using rule 31 (expr -> expr TIMES expr .)
    ADDRESS         reduce using rule 31 (expr -> expr TIMES expr .)
    NOT             reduce using rule 31 (expr -> expr TIMES expr .)
    STRING_LITERAL  reduce using rule 31 (expr -> expr TIMES expr .)
    ICONST          reduce using rule 31 (expr -> expr TIMES expr .)
    FCONST          reduce using rule 31 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 31 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! EQUALS          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 147

    (32) expr -> expr DIVIDE expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    PLUS            reduce using rule 32 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 32 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 32 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 32 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 32 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 32 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 32 (expr -> expr DIVIDE expr .)
    GET             reduce using rule 32 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 32 (expr -> expr DIVIDE expr .)
    LET             reduce using rule 32 (expr -> expr DIVIDE expr .)
    DIFF            reduce using rule 32 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 32 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 32 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 32 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 32 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 32 (expr -> expr DIVIDE expr .)
    RBRACK          reduce using rule 32 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 32 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 32 (expr -> expr DIVIDE expr .)
    LBRACK          reduce using rule 32 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 32 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 32 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 32 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 32 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 32 (expr -> expr DIVIDE expr .)
    ASSERT          reduce using rule 32 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 32 (expr -> expr DIVIDE expr .)
    READ            reduce using rule 32 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 32 (expr -> expr DIVIDE expr .)
    PP              reduce using rule 32 (expr -> expr DIVIDE expr .)
    MM              reduce using rule 32 (expr -> expr DIVIDE expr .)
    ADDRESS         reduce using rule 32 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 32 (expr -> expr DIVIDE expr .)
    STRING_LITERAL  reduce using rule 32 (expr -> expr DIVIDE expr .)
    ICONST          reduce using rule 32 (expr -> expr DIVIDE expr .)
    FCONST          reduce using rule 32 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 32 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! EQUALS          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 148

    (33) expr -> expr EQUALS expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 33 (expr -> expr EQUALS expr .)
    DIFF            reduce using rule 33 (expr -> expr EQUALS expr .)
    AND             reduce using rule 33 (expr -> expr EQUALS expr .)
    OR              reduce using rule 33 (expr -> expr EQUALS expr .)
    COMMA           reduce using rule 33 (expr -> expr EQUALS expr .)
    SEMI            reduce using rule 33 (expr -> expr EQUALS expr .)
    RBRACE          reduce using rule 33 (expr -> expr EQUALS expr .)
    RBRACK          reduce using rule 33 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 33 (expr -> expr EQUALS expr .)
    ID              reduce using rule 33 (expr -> expr EQUALS expr .)
    LBRACK          reduce using rule 33 (expr -> expr EQUALS expr .)
    IF              reduce using rule 33 (expr -> expr EQUALS expr .)
    WHILE           reduce using rule 33 (expr -> expr EQUALS expr .)
    FOR             reduce using rule 33 (expr -> expr EQUALS expr .)
    BREAK           reduce using rule 33 (expr -> expr EQUALS expr .)
    RETURN          reduce using rule 33 (expr -> expr EQUALS expr .)
    ASSERT          reduce using rule 33 (expr -> expr EQUALS expr .)
    PRINT           reduce using rule 33 (expr -> expr EQUALS expr .)
    READ            reduce using rule 33 (expr -> expr EQUALS expr .)
    LPAREN          reduce using rule 33 (expr -> expr EQUALS expr .)
    PP              reduce using rule 33 (expr -> expr EQUALS expr .)
    MM              reduce using rule 33 (expr -> expr EQUALS expr .)
    ADDRESS         reduce using rule 33 (expr -> expr EQUALS expr .)
    NOT             reduce using rule 33 (expr -> expr EQUALS expr .)
    STRING_LITERAL  reduce using rule 33 (expr -> expr EQUALS expr .)
    ICONST          reduce using rule 33 (expr -> expr EQUALS expr .)
    FCONST          reduce using rule 33 (expr -> expr EQUALS expr .)
    ELSE            reduce using rule 33 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88

  ! PLUS            [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! GT              [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! GET             [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! LT              [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! LET             [ reduce using rule 33 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 149

    (34) expr -> expr MOD expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    PLUS            reduce using rule 34 (expr -> expr MOD expr .)
    MINUS           reduce using rule 34 (expr -> expr MOD expr .)
    TIMES           reduce using rule 34 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 34 (expr -> expr MOD expr .)
    EQUALS          reduce using rule 34 (expr -> expr MOD expr .)
    MOD             reduce using rule 34 (expr -> expr MOD expr .)
    GT              reduce using rule 34 (expr -> expr MOD expr .)
    GET             reduce using rule 34 (expr -> expr MOD expr .)
    LT              reduce using rule 34 (expr -> expr MOD expr .)
    LET             reduce using rule 34 (expr -> expr MOD expr .)
    DIFF            reduce using rule 34 (expr -> expr MOD expr .)
    AND             reduce using rule 34 (expr -> expr MOD expr .)
    OR              reduce using rule 34 (expr -> expr MOD expr .)
    COMMA           reduce using rule 34 (expr -> expr MOD expr .)
    SEMI            reduce using rule 34 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 34 (expr -> expr MOD expr .)
    RBRACK          reduce using rule 34 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 34 (expr -> expr MOD expr .)
    ID              reduce using rule 34 (expr -> expr MOD expr .)
    LBRACK          reduce using rule 34 (expr -> expr MOD expr .)
    IF              reduce using rule 34 (expr -> expr MOD expr .)
    WHILE           reduce using rule 34 (expr -> expr MOD expr .)
    FOR             reduce using rule 34 (expr -> expr MOD expr .)
    BREAK           reduce using rule 34 (expr -> expr MOD expr .)
    RETURN          reduce using rule 34 (expr -> expr MOD expr .)
    ASSERT          reduce using rule 34 (expr -> expr MOD expr .)
    PRINT           reduce using rule 34 (expr -> expr MOD expr .)
    READ            reduce using rule 34 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 34 (expr -> expr MOD expr .)
    PP              reduce using rule 34 (expr -> expr MOD expr .)
    MM              reduce using rule 34 (expr -> expr MOD expr .)
    ADDRESS         reduce using rule 34 (expr -> expr MOD expr .)
    NOT             reduce using rule 34 (expr -> expr MOD expr .)
    STRING_LITERAL  reduce using rule 34 (expr -> expr MOD expr .)
    ICONST          reduce using rule 34 (expr -> expr MOD expr .)
    FCONST          reduce using rule 34 (expr -> expr MOD expr .)
    ELSE            reduce using rule 34 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 81 ]
  ! DIVIDE          [ shift and go to state 82 ]
  ! EQUALS          [ shift and go to state 83 ]
  ! MOD             [ shift and go to state 84 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 150

    (35) expr -> expr GT expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 35 (expr -> expr GT expr .)
    GT              reduce using rule 35 (expr -> expr GT expr .)
    GET             reduce using rule 35 (expr -> expr GT expr .)
    LT              reduce using rule 35 (expr -> expr GT expr .)
    LET             reduce using rule 35 (expr -> expr GT expr .)
    DIFF            reduce using rule 35 (expr -> expr GT expr .)
    AND             reduce using rule 35 (expr -> expr GT expr .)
    OR              reduce using rule 35 (expr -> expr GT expr .)
    COMMA           reduce using rule 35 (expr -> expr GT expr .)
    SEMI            reduce using rule 35 (expr -> expr GT expr .)
    RBRACE          reduce using rule 35 (expr -> expr GT expr .)
    RBRACK          reduce using rule 35 (expr -> expr GT expr .)
    RPAREN          reduce using rule 35 (expr -> expr GT expr .)
    ID              reduce using rule 35 (expr -> expr GT expr .)
    LBRACK          reduce using rule 35 (expr -> expr GT expr .)
    IF              reduce using rule 35 (expr -> expr GT expr .)
    WHILE           reduce using rule 35 (expr -> expr GT expr .)
    FOR             reduce using rule 35 (expr -> expr GT expr .)
    BREAK           reduce using rule 35 (expr -> expr GT expr .)
    RETURN          reduce using rule 35 (expr -> expr GT expr .)
    ASSERT          reduce using rule 35 (expr -> expr GT expr .)
    PRINT           reduce using rule 35 (expr -> expr GT expr .)
    READ            reduce using rule 35 (expr -> expr GT expr .)
    LPAREN          reduce using rule 35 (expr -> expr GT expr .)
    PP              reduce using rule 35 (expr -> expr GT expr .)
    MM              reduce using rule 35 (expr -> expr GT expr .)
    ADDRESS         reduce using rule 35 (expr -> expr GT expr .)
    NOT             reduce using rule 35 (expr -> expr GT expr .)
    STRING_LITERAL  reduce using rule 35 (expr -> expr GT expr .)
    ICONST          reduce using rule 35 (expr -> expr GT expr .)
    FCONST          reduce using rule 35 (expr -> expr GT expr .)
    ELSE            reduce using rule 35 (expr -> expr GT expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! PLUS            [ reduce using rule 35 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr GT expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 151

    (36) expr -> expr GET expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 36 (expr -> expr GET expr .)
    GT              reduce using rule 36 (expr -> expr GET expr .)
    GET             reduce using rule 36 (expr -> expr GET expr .)
    LT              reduce using rule 36 (expr -> expr GET expr .)
    LET             reduce using rule 36 (expr -> expr GET expr .)
    DIFF            reduce using rule 36 (expr -> expr GET expr .)
    AND             reduce using rule 36 (expr -> expr GET expr .)
    OR              reduce using rule 36 (expr -> expr GET expr .)
    COMMA           reduce using rule 36 (expr -> expr GET expr .)
    SEMI            reduce using rule 36 (expr -> expr GET expr .)
    RBRACE          reduce using rule 36 (expr -> expr GET expr .)
    RBRACK          reduce using rule 36 (expr -> expr GET expr .)
    RPAREN          reduce using rule 36 (expr -> expr GET expr .)
    ID              reduce using rule 36 (expr -> expr GET expr .)
    LBRACK          reduce using rule 36 (expr -> expr GET expr .)
    IF              reduce using rule 36 (expr -> expr GET expr .)
    WHILE           reduce using rule 36 (expr -> expr GET expr .)
    FOR             reduce using rule 36 (expr -> expr GET expr .)
    BREAK           reduce using rule 36 (expr -> expr GET expr .)
    RETURN          reduce using rule 36 (expr -> expr GET expr .)
    ASSERT          reduce using rule 36 (expr -> expr GET expr .)
    PRINT           reduce using rule 36 (expr -> expr GET expr .)
    READ            reduce using rule 36 (expr -> expr GET expr .)
    LPAREN          reduce using rule 36 (expr -> expr GET expr .)
    PP              reduce using rule 36 (expr -> expr GET expr .)
    MM              reduce using rule 36 (expr -> expr GET expr .)
    ADDRESS         reduce using rule 36 (expr -> expr GET expr .)
    NOT             reduce using rule 36 (expr -> expr GET expr .)
    STRING_LITERAL  reduce using rule 36 (expr -> expr GET expr .)
    ICONST          reduce using rule 36 (expr -> expr GET expr .)
    FCONST          reduce using rule 36 (expr -> expr GET expr .)
    ELSE            reduce using rule 36 (expr -> expr GET expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! PLUS            [ reduce using rule 36 (expr -> expr GET expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr GET expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr GET expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr GET expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr GET expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 152

    (37) expr -> expr LT expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 37 (expr -> expr LT expr .)
    GT              reduce using rule 37 (expr -> expr LT expr .)
    GET             reduce using rule 37 (expr -> expr LT expr .)
    LT              reduce using rule 37 (expr -> expr LT expr .)
    LET             reduce using rule 37 (expr -> expr LT expr .)
    DIFF            reduce using rule 37 (expr -> expr LT expr .)
    AND             reduce using rule 37 (expr -> expr LT expr .)
    OR              reduce using rule 37 (expr -> expr LT expr .)
    COMMA           reduce using rule 37 (expr -> expr LT expr .)
    SEMI            reduce using rule 37 (expr -> expr LT expr .)
    RBRACE          reduce using rule 37 (expr -> expr LT expr .)
    RBRACK          reduce using rule 37 (expr -> expr LT expr .)
    RPAREN          reduce using rule 37 (expr -> expr LT expr .)
    ID              reduce using rule 37 (expr -> expr LT expr .)
    LBRACK          reduce using rule 37 (expr -> expr LT expr .)
    IF              reduce using rule 37 (expr -> expr LT expr .)
    WHILE           reduce using rule 37 (expr -> expr LT expr .)
    FOR             reduce using rule 37 (expr -> expr LT expr .)
    BREAK           reduce using rule 37 (expr -> expr LT expr .)
    RETURN          reduce using rule 37 (expr -> expr LT expr .)
    ASSERT          reduce using rule 37 (expr -> expr LT expr .)
    PRINT           reduce using rule 37 (expr -> expr LT expr .)
    READ            reduce using rule 37 (expr -> expr LT expr .)
    LPAREN          reduce using rule 37 (expr -> expr LT expr .)
    PP              reduce using rule 37 (expr -> expr LT expr .)
    MM              reduce using rule 37 (expr -> expr LT expr .)
    ADDRESS         reduce using rule 37 (expr -> expr LT expr .)
    NOT             reduce using rule 37 (expr -> expr LT expr .)
    STRING_LITERAL  reduce using rule 37 (expr -> expr LT expr .)
    ICONST          reduce using rule 37 (expr -> expr LT expr .)
    FCONST          reduce using rule 37 (expr -> expr LT expr .)
    ELSE            reduce using rule 37 (expr -> expr LT expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! PLUS            [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr LT expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 153

    (38) expr -> expr LET expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 38 (expr -> expr LET expr .)
    GT              reduce using rule 38 (expr -> expr LET expr .)
    GET             reduce using rule 38 (expr -> expr LET expr .)
    LT              reduce using rule 38 (expr -> expr LET expr .)
    LET             reduce using rule 38 (expr -> expr LET expr .)
    DIFF            reduce using rule 38 (expr -> expr LET expr .)
    AND             reduce using rule 38 (expr -> expr LET expr .)
    OR              reduce using rule 38 (expr -> expr LET expr .)
    COMMA           reduce using rule 38 (expr -> expr LET expr .)
    SEMI            reduce using rule 38 (expr -> expr LET expr .)
    RBRACE          reduce using rule 38 (expr -> expr LET expr .)
    RBRACK          reduce using rule 38 (expr -> expr LET expr .)
    RPAREN          reduce using rule 38 (expr -> expr LET expr .)
    ID              reduce using rule 38 (expr -> expr LET expr .)
    LBRACK          reduce using rule 38 (expr -> expr LET expr .)
    IF              reduce using rule 38 (expr -> expr LET expr .)
    WHILE           reduce using rule 38 (expr -> expr LET expr .)
    FOR             reduce using rule 38 (expr -> expr LET expr .)
    BREAK           reduce using rule 38 (expr -> expr LET expr .)
    RETURN          reduce using rule 38 (expr -> expr LET expr .)
    ASSERT          reduce using rule 38 (expr -> expr LET expr .)
    PRINT           reduce using rule 38 (expr -> expr LET expr .)
    READ            reduce using rule 38 (expr -> expr LET expr .)
    LPAREN          reduce using rule 38 (expr -> expr LET expr .)
    PP              reduce using rule 38 (expr -> expr LET expr .)
    MM              reduce using rule 38 (expr -> expr LET expr .)
    ADDRESS         reduce using rule 38 (expr -> expr LET expr .)
    NOT             reduce using rule 38 (expr -> expr LET expr .)
    STRING_LITERAL  reduce using rule 38 (expr -> expr LET expr .)
    ICONST          reduce using rule 38 (expr -> expr LET expr .)
    FCONST          reduce using rule 38 (expr -> expr LET expr .)
    ELSE            reduce using rule 38 (expr -> expr LET expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84

  ! PLUS            [ reduce using rule 38 (expr -> expr LET expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr LET expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr LET expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr LET expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr LET expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! GT              [ shift and go to state 85 ]
  ! GET             [ shift and go to state 86 ]
  ! LT              [ shift and go to state 87 ]
  ! LET             [ shift and go to state 88 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 154

    (39) expr -> expr DIFF expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    EQUALS          reduce using rule 39 (expr -> expr DIFF expr .)
    DIFF            reduce using rule 39 (expr -> expr DIFF expr .)
    AND             reduce using rule 39 (expr -> expr DIFF expr .)
    OR              reduce using rule 39 (expr -> expr DIFF expr .)
    COMMA           reduce using rule 39 (expr -> expr DIFF expr .)
    SEMI            reduce using rule 39 (expr -> expr DIFF expr .)
    RBRACE          reduce using rule 39 (expr -> expr DIFF expr .)
    RBRACK          reduce using rule 39 (expr -> expr DIFF expr .)
    RPAREN          reduce using rule 39 (expr -> expr DIFF expr .)
    ID              reduce using rule 39 (expr -> expr DIFF expr .)
    LBRACK          reduce using rule 39 (expr -> expr DIFF expr .)
    IF              reduce using rule 39 (expr -> expr DIFF expr .)
    WHILE           reduce using rule 39 (expr -> expr DIFF expr .)
    FOR             reduce using rule 39 (expr -> expr DIFF expr .)
    BREAK           reduce using rule 39 (expr -> expr DIFF expr .)
    RETURN          reduce using rule 39 (expr -> expr DIFF expr .)
    ASSERT          reduce using rule 39 (expr -> expr DIFF expr .)
    PRINT           reduce using rule 39 (expr -> expr DIFF expr .)
    READ            reduce using rule 39 (expr -> expr DIFF expr .)
    LPAREN          reduce using rule 39 (expr -> expr DIFF expr .)
    PP              reduce using rule 39 (expr -> expr DIFF expr .)
    MM              reduce using rule 39 (expr -> expr DIFF expr .)
    ADDRESS         reduce using rule 39 (expr -> expr DIFF expr .)
    NOT             reduce using rule 39 (expr -> expr DIFF expr .)
    STRING_LITERAL  reduce using rule 39 (expr -> expr DIFF expr .)
    ICONST          reduce using rule 39 (expr -> expr DIFF expr .)
    FCONST          reduce using rule 39 (expr -> expr DIFF expr .)
    ELSE            reduce using rule 39 (expr -> expr DIFF expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88

  ! PLUS            [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! GT              [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! GET             [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! LT              [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! LET             [ reduce using rule 39 (expr -> expr DIFF expr .) ]
  ! EQUALS          [ shift and go to state 83 ]
  ! DIFF            [ shift and go to state 89 ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 155

    (40) expr -> expr AND expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    AND             reduce using rule 40 (expr -> expr AND expr .)
    OR              reduce using rule 40 (expr -> expr AND expr .)
    COMMA           reduce using rule 40 (expr -> expr AND expr .)
    SEMI            reduce using rule 40 (expr -> expr AND expr .)
    RBRACE          reduce using rule 40 (expr -> expr AND expr .)
    RBRACK          reduce using rule 40 (expr -> expr AND expr .)
    RPAREN          reduce using rule 40 (expr -> expr AND expr .)
    ID              reduce using rule 40 (expr -> expr AND expr .)
    LBRACK          reduce using rule 40 (expr -> expr AND expr .)
    IF              reduce using rule 40 (expr -> expr AND expr .)
    WHILE           reduce using rule 40 (expr -> expr AND expr .)
    FOR             reduce using rule 40 (expr -> expr AND expr .)
    BREAK           reduce using rule 40 (expr -> expr AND expr .)
    RETURN          reduce using rule 40 (expr -> expr AND expr .)
    ASSERT          reduce using rule 40 (expr -> expr AND expr .)
    PRINT           reduce using rule 40 (expr -> expr AND expr .)
    READ            reduce using rule 40 (expr -> expr AND expr .)
    LPAREN          reduce using rule 40 (expr -> expr AND expr .)
    PP              reduce using rule 40 (expr -> expr AND expr .)
    MM              reduce using rule 40 (expr -> expr AND expr .)
    ADDRESS         reduce using rule 40 (expr -> expr AND expr .)
    NOT             reduce using rule 40 (expr -> expr AND expr .)
    STRING_LITERAL  reduce using rule 40 (expr -> expr AND expr .)
    ICONST          reduce using rule 40 (expr -> expr AND expr .)
    FCONST          reduce using rule 40 (expr -> expr AND expr .)
    ELSE            reduce using rule 40 (expr -> expr AND expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89

  ! PLUS            [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! EQUALS          [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! GET             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! LET             [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! DIFF            [ reduce using rule 40 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 90 ]
  ! OR              [ shift and go to state 91 ]


state 156

    (41) expr -> expr OR expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    OR              reduce using rule 41 (expr -> expr OR expr .)
    COMMA           reduce using rule 41 (expr -> expr OR expr .)
    SEMI            reduce using rule 41 (expr -> expr OR expr .)
    RBRACE          reduce using rule 41 (expr -> expr OR expr .)
    RBRACK          reduce using rule 41 (expr -> expr OR expr .)
    RPAREN          reduce using rule 41 (expr -> expr OR expr .)
    ID              reduce using rule 41 (expr -> expr OR expr .)
    LBRACK          reduce using rule 41 (expr -> expr OR expr .)
    IF              reduce using rule 41 (expr -> expr OR expr .)
    WHILE           reduce using rule 41 (expr -> expr OR expr .)
    FOR             reduce using rule 41 (expr -> expr OR expr .)
    BREAK           reduce using rule 41 (expr -> expr OR expr .)
    RETURN          reduce using rule 41 (expr -> expr OR expr .)
    ASSERT          reduce using rule 41 (expr -> expr OR expr .)
    PRINT           reduce using rule 41 (expr -> expr OR expr .)
    READ            reduce using rule 41 (expr -> expr OR expr .)
    LPAREN          reduce using rule 41 (expr -> expr OR expr .)
    PP              reduce using rule 41 (expr -> expr OR expr .)
    MM              reduce using rule 41 (expr -> expr OR expr .)
    ADDRESS         reduce using rule 41 (expr -> expr OR expr .)
    NOT             reduce using rule 41 (expr -> expr OR expr .)
    STRING_LITERAL  reduce using rule 41 (expr -> expr OR expr .)
    ICONST          reduce using rule 41 (expr -> expr OR expr .)
    FCONST          reduce using rule 41 (expr -> expr OR expr .)
    ELSE            reduce using rule 41 (expr -> expr OR expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90

  ! PLUS            [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! EQUALS          [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! GET             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! LET             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! DIFF            [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 41 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 91 ]


state 157

    (65) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACK          reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 65 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 158

    (123) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    GET             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LET             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    DIFF            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RBRACK          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LBRACK          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ASSERT          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PRINT           reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    READ            reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    PP              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    MM              reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ADDRESS         reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    STRING_LITERAL  reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ICONST          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    FCONST          reduce using rule 123 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 123 (expr -> LPAREN expr RPAREN .)


state 159

    (43) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 112
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    cast_expression                shift and go to state 182
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 160

    (57) primary_expression -> LPAREN expression RPAREN .

    LBRACE          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    PP              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MM              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    TASSIGN         reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    DASSIGN         reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    PASSIGN         reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MINASSIGN       reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    GET             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ADDRESS         reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ICONST          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    FCONST          reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 57 (primary_expression -> LPAREN expression RPAREN .)


state 161

    (61) expression -> expression COMMA . assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    assignment_expression          shift and go to state 183
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 162

    (49) postfix_expression -> postfix_expression LBRACE expression . RBRACE
    (61) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 184
    COMMA           shift and go to state 161


state 163

    (50) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (67) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 185
    COMMA           shift and go to state 186


state 164

    (51) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACE          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PP              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MM              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TASSIGN         reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DASSIGN         reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODASSIGN       reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PASSIGN         reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINASSIGN       reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GET             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LET             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIFF            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACK          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ID              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LBRACK          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    IF              reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    WHILE           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FOR             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    BREAK           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RETURN          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSERT          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PRINT           reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    READ            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ADDRESS         reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NOT             reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    STRING_LITERAL  reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ICONST          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    FCONST          reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ELSE            reduce using rule 51 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 165

    (66) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 66 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 66 (argument_expression -> assignment_expression .)


state 166

    (80) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 80 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 80 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 167

    (98) compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .

    VOID            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    CHAR            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    INT             reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FLOAT           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    $end            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ID              reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    LBRACK          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    IF              reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    WHILE           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FOR             reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    BREAK           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    RETURN          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ASSERT          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PRINT           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    READ            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    LPAREN          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PP              reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    MM              reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ADDRESS         reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    TIMES           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PLUS            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    MINUS           reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    NOT             reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    STRING_LITERAL  reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ICONST          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FCONST          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    SEMI            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    RBRACK          reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ELSE            reduce using rule 98 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)


state 168

    (118) statement_list -> statement_list statement .

    ID              reduce using rule 118 (statement_list -> statement_list statement .)
    LBRACK          reduce using rule 118 (statement_list -> statement_list statement .)
    IF              reduce using rule 118 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 118 (statement_list -> statement_list statement .)
    FOR             reduce using rule 118 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 118 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 118 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 118 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 118 (statement_list -> statement_list statement .)
    READ            reduce using rule 118 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 118 (statement_list -> statement_list statement .)
    PP              reduce using rule 118 (statement_list -> statement_list statement .)
    MM              reduce using rule 118 (statement_list -> statement_list statement .)
    ADDRESS         reduce using rule 118 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 118 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 118 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 118 (statement_list -> statement_list statement .)
    NOT             reduce using rule 118 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 118 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 118 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 118 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 118 (statement_list -> statement_list statement .)
    RBRACK          reduce using rule 118 (statement_list -> statement_list statement .)


state 169

    (63) expression_opt -> empty .

    SEMI            reduce using rule 63 (expression_opt -> empty .)
    RPAREN          reduce using rule 63 (expression_opt -> empty .)


state 170

    (122) statement -> ID ASSIGN . expr
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 187
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 171

    (107) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    LBRACK          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    PP              reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    MM              reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    ICONST          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    FCONST          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    RBRACK          reduce using rule 107 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 107 (expression_statement -> expression_opt SEMI .)


state 172

    (108) selection_statement -> IF LPAREN . expression RPAREN statement
    (109) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 188
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 173

    (110) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 189
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 174

    (111) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (82) declaration -> . type_specifier init_declarator_list_opt SEMI
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    VOID            shift and go to state 7
    CHAR            shift and go to state 8
    INT             shift and go to state 9
    FLOAT           shift and go to state 10
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 190
    declaration                    shift and go to state 191
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    type_specifier                 shift and go to state 22
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 175

    (113) jump_statement -> BREAK SEMI .

    ID              reduce using rule 113 (jump_statement -> BREAK SEMI .)
    LBRACK          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 113 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 113 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 113 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 113 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 113 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 113 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 113 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 113 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 113 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 113 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 113 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 113 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 113 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 113 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 113 (jump_statement -> BREAK SEMI .)
    RBRACK          reduce using rule 113 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 113 (jump_statement -> BREAK SEMI .)


state 176

    (114) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 192


state 177

    (115) assert_statement -> ASSERT expr . SEMI
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    SEMI            shift and go to state 193
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 178

    (116) print_statement -> PRINT LPAREN . expr RPAREN SEMI
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expr                           shift and go to state 194
    cast_expression                shift and go to state 45
    unary_expression               shift and go to state 66
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 179

    (117) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (66) argument_expression -> . assignment_expression
    (67) argument_expression -> . argument_expression COMMA assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    argument_expression            shift and go to state 195
    assignment_expression          shift and go to state 165
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 180

    (95) initializer -> LBRACK initializer_list COMMA RBRACK .

    COMMA           reduce using rule 95 (initializer -> LBRACK initializer_list COMMA RBRACK .)
    SEMI            reduce using rule 95 (initializer -> LBRACK initializer_list COMMA RBRACK .)
    RBRACK          reduce using rule 95 (initializer -> LBRACK initializer_list COMMA RBRACK .)


state 181

    (97) initializer_list -> initializer_list COMMA initializer .

    RBRACK          reduce using rule 97 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 97 (initializer_list -> initializer_list COMMA initializer .)


state 182

    (43) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    PLUS            reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GET             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LET             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACK          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TASSIGN         reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DASSIGN         reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PASSIGN         reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINASSIGN       reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LBRACK          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    IF              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    WHILE           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FOR             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BREAK           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RETURN          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSERT          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PRINT           reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    READ            reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PP              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MM              reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ADDRESS         reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    STRING_LITERAL  reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ICONST          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FCONST          reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ELSE            reduce using rule 43 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 183

    (61) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 61 (expression -> expression COMMA assignment_expression .)
    RBRACE          reduce using rule 61 (expression -> expression COMMA assignment_expression .)


state 184

    (49) postfix_expression -> postfix_expression LBRACE expression RBRACE .

    LBRACE          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PP              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MM              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ASSIGN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    TASSIGN         reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DASSIGN         reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MODASSIGN       reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PASSIGN         reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MINASSIGN       reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PLUS            reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MINUS           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    TIMES           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    EQUALS          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MOD             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    GT              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    GET             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LT              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LET             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DIFF            reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    AND             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    OR              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    COMMA           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    SEMI            reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RBRACE          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RBRACK          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RPAREN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ID              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LBRACK          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    IF              reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    WHILE           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    FOR             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    BREAK           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RETURN          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ASSERT          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PRINT           reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    READ            reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ADDRESS         reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    NOT             reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    STRING_LITERAL  reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ICONST          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    FCONST          reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ELSE            reduce using rule 49 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)


state 185

    (50) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACE          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PP              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MM              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TASSIGN         reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DASSIGN         reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODASSIGN       reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PASSIGN         reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINASSIGN       reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GET             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LET             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIFF            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACK          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ID              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACK          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    IF              reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    WHILE           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FOR             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    BREAK           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RETURN          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSERT          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PRINT           reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    READ            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ADDRESS         reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NOT             reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    STRING_LITERAL  reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ICONST          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FCONST          reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ELSE            reduce using rule 50 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 186

    (67) argument_expression -> argument_expression COMMA . assignment_expression
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    assignment_expression          shift and go to state 196
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 187

    (122) statement -> ID ASSIGN expr .
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 122 (statement -> ID ASSIGN expr .)
    LBRACK          reduce using rule 122 (statement -> ID ASSIGN expr .)
    IF              reduce using rule 122 (statement -> ID ASSIGN expr .)
    WHILE           reduce using rule 122 (statement -> ID ASSIGN expr .)
    FOR             reduce using rule 122 (statement -> ID ASSIGN expr .)
    BREAK           reduce using rule 122 (statement -> ID ASSIGN expr .)
    RETURN          reduce using rule 122 (statement -> ID ASSIGN expr .)
    ASSERT          reduce using rule 122 (statement -> ID ASSIGN expr .)
    PRINT           reduce using rule 122 (statement -> ID ASSIGN expr .)
    READ            reduce using rule 122 (statement -> ID ASSIGN expr .)
    LPAREN          reduce using rule 122 (statement -> ID ASSIGN expr .)
    PP              reduce using rule 122 (statement -> ID ASSIGN expr .)
    MM              reduce using rule 122 (statement -> ID ASSIGN expr .)
    ADDRESS         reduce using rule 122 (statement -> ID ASSIGN expr .)
    NOT             reduce using rule 122 (statement -> ID ASSIGN expr .)
    STRING_LITERAL  reduce using rule 122 (statement -> ID ASSIGN expr .)
    ICONST          reduce using rule 122 (statement -> ID ASSIGN expr .)
    FCONST          reduce using rule 122 (statement -> ID ASSIGN expr .)
    SEMI            reduce using rule 122 (statement -> ID ASSIGN expr .)
    RBRACK          reduce using rule 122 (statement -> ID ASSIGN expr .)
    ELSE            reduce using rule 122 (statement -> ID ASSIGN expr .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! TIMES           [ reduce using rule 122 (statement -> ID ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 122 (statement -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 122 (statement -> ID ASSIGN expr .) ]


state 188

    (108) selection_statement -> IF LPAREN expression . RPAREN statement
    (109) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 161


state 189

    (110) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (61) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 161


state 190

    (111) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 199


state 191

    (112) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 200
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 192

    (114) jump_statement -> RETURN expression_opt SEMI .

    ID              reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACK          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    PP              reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    MM              reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    ICONST          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    FCONST          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACK          reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 114 (jump_statement -> RETURN expression_opt SEMI .)


state 193

    (115) assert_statement -> ASSERT expr SEMI .

    ID              reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    LBRACK          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    IF              reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    WHILE           reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    FOR             reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    BREAK           reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    RETURN          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    ASSERT          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    PRINT           reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    READ            reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    LPAREN          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    PP              reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    MM              reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    ADDRESS         reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    TIMES           reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    PLUS            reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    MINUS           reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    NOT             reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    STRING_LITERAL  reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    ICONST          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    FCONST          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    SEMI            reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    RBRACK          reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)
    ELSE            reduce using rule 115 (assert_statement -> ASSERT expr SEMI .)


state 194

    (116) print_statement -> PRINT LPAREN expr . RPAREN SEMI
    (29) expr -> expr . PLUS expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . TIMES expr
    (32) expr -> expr . DIVIDE expr
    (33) expr -> expr . EQUALS expr
    (34) expr -> expr . MOD expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . GET expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . LET expr
    (39) expr -> expr . DIFF expr
    (40) expr -> expr . AND expr
    (41) expr -> expr . OR expr

    RPAREN          shift and go to state 201
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIVIDE          shift and go to state 82
    EQUALS          shift and go to state 83
    MOD             shift and go to state 84
    GT              shift and go to state 85
    GET             shift and go to state 86
    LT              shift and go to state 87
    LET             shift and go to state 88
    DIFF            shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91


state 195

    (117) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (67) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 202
    COMMA           shift and go to state 186


state 196

    (67) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 67 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 67 (argument_expression -> argument_expression COMMA assignment_expression .)


state 197

    (108) selection_statement -> IF LPAREN expression RPAREN . statement
    (109) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 134
    statement                      shift and go to state 203
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression_opt                 shift and go to state 132
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 198

    (110) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 134
    statement                      shift and go to state 204
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression_opt                 shift and go to state 132
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 199

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 205
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 200

    (112) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 206


state 201

    (116) print_statement -> PRINT LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 207


state 202

    (117) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 208


state 203

    (108) selection_statement -> IF LPAREN expression RPAREN statement .
    (109) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACK          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACK          reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 209

  ! ELSE            [ reduce using rule 108 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 204

    (110) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ID              reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACK          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACK          reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 110 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 205

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 210


state 206

    (112) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 211
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 207

    (116) print_statement -> PRINT LPAREN expr RPAREN SEMI .

    ID              reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    LBRACK          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    FOR             reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    BREAK           reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ASSERT          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    READ            reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PP              reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    MM              reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ADDRESS         reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    TIMES           reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PLUS            reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    NOT             reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ICONST          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    FCONST          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    SEMI            reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RBRACK          reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ELSE            reduce using rule 116 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)


state 208

    (117) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    ID              reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACK          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PP              reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MM              reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ICONST          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FCONST          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACK          reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 117 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 209

    (109) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression                     shift and go to state 134
    statement                      shift and go to state 212
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression_opt                 shift and go to state 132
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 210

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    ID              shift and go to state 57
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 213
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    expr                           shift and go to state 43
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 211

    (112) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 214


state 212

    (109) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    ID              reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACK          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PP              reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MM              reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACK          reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 109 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 213

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 215


state 214

    (112) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 132
    statement                      shift and go to state 216
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 215

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (99) statement -> . expression_statement
    (100) statement -> . compound_statement
    (101) statement -> . selection_statement
    (102) statement -> . iteration_statement
    (103) statement -> . jump_statement
    (104) statement -> . assert_statement
    (105) statement -> . print_statement
    (106) statement -> . read_statement
    (122) statement -> . ID ASSIGN expr
    (107) expression_statement -> . expression_opt SEMI
    (98) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (108) selection_statement -> . IF LPAREN expression RPAREN statement
    (109) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (110) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (111) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (112) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (113) jump_statement -> . BREAK SEMI
    (114) jump_statement -> . RETURN expression_opt SEMI
    (115) assert_statement -> . ASSERT expr SEMI
    (116) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (117) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (62) expression_opt -> . expression
    (63) expression_opt -> . empty
    (60) expression -> . assignment_expression
    (61) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (64) assignment_expression -> . expr
    (65) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (28) expr -> . cast_expression
    (29) expr -> . expr PLUS expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr TIMES expr
    (32) expr -> . expr DIVIDE expr
    (33) expr -> . expr EQUALS expr
    (34) expr -> . expr MOD expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr GET expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr LET expr
    (39) expr -> . expr DIFF expr
    (40) expr -> . expr AND expr
    (41) expr -> . expr OR expr
    (123) expr -> . LPAREN expr RPAREN
    (44) unary_expression -> . postfix_expression
    (45) unary_expression -> . PP unary_expression
    (46) unary_expression -> . MM unary_expression
    (47) unary_expression -> . unary_operator cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (48) postfix_expression -> . primary_expression
    (49) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (50) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (51) postfix_expression -> . postfix_expression LPAREN RPAREN
    (52) postfix_expression -> . postfix_expression PP
    (53) postfix_expression -> . postfix_expression MM
    (74) unary_operator -> . ADDRESS
    (75) unary_operator -> . TIMES
    (76) unary_operator -> . PLUS
    (77) unary_operator -> . MINUS
    (78) unary_operator -> . NOT
    (54) primary_expression -> . ID
    (55) primary_expression -> . constant
    (56) primary_expression -> . STRING_LITERAL
    (57) primary_expression -> . LPAREN expression RPAREN
    (58) constant -> . ICONST
    (59) constant -> . FCONST

    ID              shift and go to state 131
    LBRACK          shift and go to state 39
    IF              shift and go to state 133
    WHILE           shift and go to state 135
    FOR             shift and go to state 136
    BREAK           shift and go to state 137
    RETURN          shift and go to state 138
    ASSERT          shift and go to state 139
    PRINT           shift and go to state 140
    READ            shift and go to state 141
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 49
    PP              shift and go to state 51
    MM              shift and go to state 52
    ADDRESS         shift and go to state 55
    TIMES           shift and go to state 48
    PLUS            shift and go to state 46
    MINUS           shift and go to state 47
    NOT             shift and go to state 56
    STRING_LITERAL  shift and go to state 59
    ICONST          shift and go to state 60
    FCONST          shift and go to state 61

    expression_opt                 shift and go to state 132
    statement                      shift and go to state 217
    expression_statement           shift and go to state 123
    compound_statement             shift and go to state 124
    selection_statement            shift and go to state 125
    iteration_statement            shift and go to state 126
    jump_statement                 shift and go to state 127
    assert_statement               shift and go to state 128
    print_statement                shift and go to state 129
    read_statement                 shift and go to state 130
    expr                           shift and go to state 43
    expression                     shift and go to state 134
    empty                          shift and go to state 169
    assignment_expression          shift and go to state 102
    unary_expression               shift and go to state 44
    cast_expression                shift and go to state 45
    postfix_expression             shift and go to state 50
    unary_operator                 shift and go to state 53
    primary_expression             shift and go to state 54
    constant                       shift and go to state 58

state 216

    (112) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACK          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PP              reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MM              reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACK          reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 112 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 217

    (111) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACK          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PP              reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MM              reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACK          reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 111 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 50 resolved as shift
WARNING: shift/reduce conflict for PP in state 50 resolved as shift
WARNING: shift/reduce conflict for MM in state 50 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 99 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 187 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 203 resolved as shift
