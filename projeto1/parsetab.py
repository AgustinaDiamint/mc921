
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQUALSDIFFleftGTGETLTLETleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CCOMMENT CCONST CHAR COMMA CPPCOMMENT DASSIGN DIFF DIVIDE ELSE EQUALS ERROR FCONST FLOAT FOR GET GT ICONST ID IF INT LBRACE LBRACK LET LPAREN LT MINASSIGN MINUS MM MOD MODASSIGN NOT OR PASSIGN PLUS PP PRINT RBRACE RBRACK READ RETURN RPAREN SEMI STRING_LITERAL TASSIGN TIMES UNMATCHEDQUOTE UNTERMCOMMENT VOID WHILEempty :  program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        global_declaration : function_definition\n                              | declaration\n         function_definition : type_specifier declarator declaration_list_opt compound_statement  type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declarator : pointer direct_declarator\n                        | direct_declarator\n         pointer : TIMES pointer_opt\n        pointer_opt : pointer\n                      | empty\n         direct_declarator : ID\n                      | LPAREN declarator RPAREN\n                      | direct_declarator LBRACK constant_expression_opt RBRACK\n                      | direct_declarator LPAREN parameter_list RPAREN\n                      | direct_declarator LPAREN identifier_list_opt RPAREN\n         constant_expression : expr  constant_expression_opt : constant_expression\n                                    | empty\n         identifier_list : identifier_list ID\n                            | ID\n         identifier_list_opt : identifier_list\n                                | empty\n        \n        expr :  cast_expression\n                | expr PLUS expr\n                | expr MINUS expr\n                | expr TIMES expr\n                | expr DIVIDE expr\n                | expr EQUALS expr\n                | expr MOD expr\n                | expr GT expr\n                | expr GET expr\n                | expr LT expr\n                | expr LET expr\n                | expr DIFF expr\n                | expr AND expr\n                | expr OR expr\n        \n        cast_expression : unary_expression\n                    | LPAREN type_specifier RPAREN cast_expression\n        \n        unary_expression : postfix_expression\n                        | PP unary_expression\n                        | MM unary_expression\n                        | unary_operator cast_expression\n        \n        postfix_expression : primary_expression\n                            | postfix_expression LBRACK expression RBRACK\n                            | postfix_expression LPAREN argument_expression RPAREN\n                            | postfix_expression LPAREN RPAREN\n                            | postfix_expression PP\n                            | postfix_expression MM\n        \n        primary_expression : ID\n                            | constant\n                            | STRING_LITERAL\n                            | LPAREN expression RPAREN\n         constant : ICONST\n                     | FCONST\n         expression : assignment_expression\n                        | assignment_expression COMMA expression\n         expression_opt : expression\n                            | empty\n        assignment_expression : expr\n                            | unary_expression assignment_operator assignment_expression\n        argument_expression : assignment_expression\n                            | argument_expression COMMA assignment_expression\n         assignment_operator : ASSIGN\n                                | TASSIGN\n                                | DASSIGN\n                                | MODASSIGN\n                                | PASSIGN\n                                | MINASSIGN\n        unary_operator : ADDRESS\n                          | TIMES\n                          | PLUS\n                          | MINUS\n                          | NOT\n        parameter_list : parameter_declaration\n                          | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n        declaration : type_specifier init_declarator_list SEMI\n         declaration_list : declaration\n                    | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                | empty\n        init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                | init_declarator_list COMMA init_declarator\n        initializer : assignment_expression\n                    | LBRACE initializer_list RBRACE\n                    | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                    | initializer_list COMMA initializer\n        compound_statement : LBRACE declaration_list_opt statement_list_opt RBRACE\n        \n        statement : expression_statement\n                | compound_statement\n                | selection_statement\n                | iteration_statement\n                | jump_statement\n                | assert_statement\n                | print_statement\n                | read_statement\n        \n        expression_statement : expression_opt SEMI\n            selection_statement : IF LPAREN expression RPAREN statement\n                                    | IF LPAREN expression RPAREN statement ELSE statement\n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                    | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                    | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        jump_statement : BREAK SEMI\n                        | RETURN expression_opt SEMI\n         assert_statement : ASSERT expr SEMI  print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        read_statement : READ LPAREN argument_expression RPAREN SEMI statement_list : statement_list statement\n                    | statement\n         statement_list_opt : statement_list\n                                | empty\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,109,110,111,112,161,167,],[7,7,-3,-5,-6,-4,7,-13,-17,7,-84,-83,-12,7,-7,7,7,-85,-18,-19,-20,7,-21,-97,7,]),'CHAR':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,109,110,111,112,161,167,],[8,8,-3,-5,-6,-4,8,-13,-17,8,-84,-83,-12,8,-7,8,8,-85,-18,-19,-20,8,-21,-97,8,]),'INT':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,109,110,111,112,161,167,],[9,9,-3,-5,-6,-4,9,-13,-17,9,-84,-83,-12,9,-7,9,9,-85,-18,-19,-20,9,-21,-97,9,]),'FLOAT':([0,2,3,4,5,11,12,15,18,23,25,26,28,30,36,37,51,60,74,109,110,111,112,161,167,],[10,10,-3,-5,-6,-4,10,-13,-17,10,-84,-83,-12,10,-7,10,10,-85,-18,-19,-20,10,-21,-97,10,]),'$end':([1,2,3,4,5,11,26,36,161,],[0,-2,-3,-5,-6,-4,-83,-7,-97,]),'TIMES':([6,7,8,9,10,17,19,20,22,23,24,25,26,27,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,72,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,119,120,121,122,123,124,125,126,133,134,138,139,140,141,142,143,144,145,146,147,148,149,150,151,155,157,158,159,161,162,164,165,166,167,168,170,171,172,175,176,177,178,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[17,-8,-9,-10,-11,17,17,17,46,-86,-87,-84,-83,17,46,-1,46,80,-43,-29,-77,-78,-76,-45,46,46,46,46,-49,-75,-79,-55,-56,-57,-59,-60,-85,80,-43,17,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-69,-70,-71,-72,-73,-74,46,46,-53,-54,-46,46,-47,-48,46,-118,-98,-99,-100,-101,-102,-103,-104,-105,46,46,46,80,80,-32,-33,80,-35,80,80,80,80,80,80,80,-52,46,-58,46,-97,-117,-106,46,46,46,-112,80,46,46,-50,-51,46,-44,46,-113,-114,46,46,46,-107,-109,46,-115,-116,46,46,-108,46,46,-111,-110,]),'ID':([6,7,8,9,10,14,17,19,20,22,23,24,25,26,27,29,30,31,32,33,37,40,44,45,46,48,49,50,51,53,54,60,70,72,73,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,113,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[18,-8,-9,-10,-11,18,-1,18,18,55,-86,-87,-84,-83,18,55,73,-14,-15,-16,-1,55,-77,-78,-76,55,55,55,55,-75,-79,-85,113,18,-26,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-69,-70,-71,-72,-73,-74,55,55,55,-25,55,-118,-98,-99,-100,-101,-102,-103,-104,-105,55,55,55,55,55,-97,-117,-106,55,55,55,-112,55,55,55,55,-113,-114,55,55,55,-107,-109,55,-115,-116,55,55,-108,55,55,-111,-110,]),'LPAREN':([6,7,8,9,10,14,15,17,18,19,20,22,23,24,25,26,27,28,29,31,32,33,37,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,72,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,109,110,112,116,118,119,120,121,122,123,124,125,126,128,130,131,133,134,135,136,138,155,157,158,159,161,162,164,165,166,167,168,171,172,175,176,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[19,-8,-9,-10,-11,19,30,-1,-17,19,19,51,-86,-87,-84,-83,19,30,51,-14,-15,-16,-1,51,-77,-78,-76,99,103,103,51,51,-49,-75,-79,-55,-56,-57,-59,-60,-85,19,-18,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-69,-70,-71,-72,-73,-74,51,51,-53,-54,51,-19,-20,-21,51,-118,-98,-99,-100,-101,-102,-103,-104,-105,165,166,167,51,51,171,172,51,-52,51,-58,51,-97,-117,-106,51,51,51,-112,51,51,-50,-51,51,51,-113,-114,51,51,51,-107,-109,51,-115,-116,51,51,-108,51,51,-111,-110,]),'RPAREN':([7,8,9,10,15,18,28,30,34,41,42,43,47,52,55,56,57,58,59,66,67,68,69,70,71,73,74,99,100,101,102,104,105,106,107,108,109,110,112,113,114,129,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,158,160,163,171,175,176,178,179,180,181,186,187,188,198,202,203,205,],[-8,-9,-10,-11,-13,-17,-12,-1,74,-65,-43,-29,-45,-49,-55,-56,-57,-59,-60,-43,110,112,-80,-27,-28,-26,-18,155,-53,-54,-46,-47,-48,157,158,-61,-19,-20,-21,-25,-82,-63,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-66,176,-52,-67,-58,-81,-64,-1,-50,-51,-44,-62,189,190,193,194,-68,-1,-1,206,207,]),'SEMI':([12,13,15,16,18,23,24,25,26,28,35,37,38,39,41,42,43,47,52,55,56,57,58,59,60,61,66,74,75,100,101,102,104,105,108,109,110,112,116,117,118,119,120,121,122,123,124,125,126,127,129,132,133,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,163,164,167,168,169,170,173,175,176,178,179,182,183,184,185,189,190,191,192,193,194,195,196,197,199,200,201,204,206,207,208,209,],[-88,26,-13,-90,-17,-86,-87,-84,-83,-12,-88,-1,-89,-92,-65,-43,-29,-45,-49,-55,-56,-57,-59,-60,-85,-91,-43,-18,-1,-53,-54,-46,-47,-48,-61,-19,-20,-21,-1,-64,-118,-98,-99,-100,-101,-102,-103,-104,-105,164,-63,168,-1,-93,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-66,-52,-58,-97,-117,-64,-106,-1,-112,184,185,-94,-50,-51,-44,-62,191,-1,-113,-114,-1,-1,-1,198,199,200,-107,-109,202,-115,-116,-1,-108,-1,-1,-111,-110,]),'COMMA':([12,13,15,16,18,28,35,38,39,41,42,43,47,52,55,56,57,58,59,61,66,67,69,74,76,77,100,101,102,104,105,108,109,110,112,114,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,156,158,160,173,174,175,176,178,187,188,],[-88,27,-13,-90,-17,-12,-88,-89,-92,-65,-43,-29,-45,-49,-55,-56,-57,-59,-60,-91,-43,111,-80,-18,138,-95,-53,-54,-46,-47,-48,159,-19,-20,-21,-82,-93,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-66,177,-52,-67,-58,-81,-94,-96,-50,-51,-44,177,-68,]),'ASSIGN':([12,15,18,28,35,42,47,52,55,56,57,58,59,66,74,100,101,102,104,105,109,110,112,155,158,175,176,178,],[22,-13,-17,-12,22,92,-45,-49,-55,-56,-57,-59,-60,-43,-18,-53,-54,-46,-47,-48,-19,-20,-21,-52,-58,-50,-51,-44,]),'LBRACE':([12,15,18,21,22,23,24,25,26,28,37,40,60,74,75,109,110,112,116,118,119,120,121,122,123,124,125,126,138,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-1,-13,-17,37,40,-86,-87,-84,-83,-12,-1,40,-85,-18,37,-19,-20,-21,37,-118,-98,-99,-100,-101,-102,-103,-104,-105,40,-97,-117,-106,-112,-113,-114,37,37,-107,-109,-115,-116,37,-108,37,37,-111,-110,]),'LBRACK':([15,18,28,47,52,55,56,57,58,59,74,100,101,109,110,112,155,158,175,176,],[29,-17,29,98,-49,-55,-56,-57,-59,-60,-18,-53,-54,-19,-20,-21,-52,-58,-50,-51,]),'PP':([22,23,24,25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,116,118,119,120,121,122,123,124,125,126,133,134,138,155,157,158,159,161,162,164,165,166,167,168,171,172,175,176,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[48,-86,-87,-84,-83,48,-1,48,-77,-78,-76,100,48,48,48,48,-49,-75,-79,-55,-56,-57,-59,-60,-85,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-69,-70,-71,-72,-73,-74,48,48,-53,-54,48,48,-118,-98,-99,-100,-101,-102,-103,-104,-105,48,48,48,-52,48,-58,48,-97,-117,-106,48,48,48,-112,48,48,-50,-51,48,48,-113,-114,48,48,48,-107,-109,48,-115,-116,48,48,-108,48,48,-111,-110,]),'MM':([22,23,24,25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,116,118,119,120,121,122,123,124,125,126,133,134,138,155,157,158,159,161,162,164,165,166,167,168,171,172,175,176,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[49,-86,-87,-84,-83,49,-1,49,-77,-78,-76,101,49,49,49,49,-49,-75,-79,-55,-56,-57,-59,-60,-85,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-69,-70,-71,-72,-73,-74,49,49,-53,-54,49,49,-118,-98,-99,-100,-101,-102,-103,-104,-105,49,49,49,-52,49,-58,49,-97,-117,-106,49,49,49,-112,49,49,-50,-51,49,49,-113,-114,49,49,49,-107,-109,49,-115,-116,49,49,-108,49,49,-111,-110,]),'ADDRESS':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[53,-86,-87,-84,-83,53,-1,53,-77,-78,-76,53,53,53,53,-75,-79,-85,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-69,-70,-71,-72,-73,-74,53,53,53,53,-118,-98,-99,-100,-101,-102,-103,-104,-105,53,53,53,53,53,-97,-117,-106,53,53,53,-112,53,53,53,53,-113,-114,53,53,53,-107,-109,53,-115,-116,53,53,-108,53,53,-111,-110,]),'PLUS':([22,23,24,25,26,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,119,120,121,122,123,124,125,126,133,134,138,139,140,141,142,143,144,145,146,147,148,149,150,151,155,157,158,159,161,162,164,165,166,167,168,170,171,172,175,176,177,178,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[44,-86,-87,-84,-83,44,-1,44,78,-43,-29,-77,-78,-76,-45,44,44,44,44,-49,-75,-79,-55,-56,-57,-59,-60,-85,78,-43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-69,-70,-71,-72,-73,-74,44,44,-53,-54,-46,44,-47,-48,44,-118,-98,-99,-100,-101,-102,-103,-104,-105,44,44,44,-30,-31,-32,-33,78,-35,78,78,78,78,78,78,78,-52,44,-58,44,-97,-117,-106,44,44,44,-112,78,44,44,-50,-51,44,-44,44,-113,-114,44,44,44,-107,-109,44,-115,-116,44,44,-108,44,44,-111,-110,]),'MINUS':([22,23,24,25,26,29,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,65,66,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,118,119,120,121,122,123,124,125,126,133,134,138,139,140,141,142,143,144,145,146,147,148,149,150,151,155,157,158,159,161,162,164,165,166,167,168,170,171,172,175,176,177,178,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[45,-86,-87,-84,-83,45,-1,45,79,-43,-29,-77,-78,-76,-45,45,45,45,45,-49,-75,-79,-55,-56,-57,-59,-60,-85,79,-43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-69,-70,-71,-72,-73,-74,45,45,-53,-54,-46,45,-47,-48,45,-118,-98,-99,-100,-101,-102,-103,-104,-105,45,45,45,-30,-31,-32,-33,79,-35,79,79,79,79,79,79,79,-52,45,-58,45,-97,-117,-106,45,45,45,-112,79,45,45,-50,-51,45,-44,45,-113,-114,45,45,45,-107,-109,45,-115,-116,45,45,-108,45,45,-111,-110,]),'NOT':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[54,-86,-87,-84,-83,54,-1,54,-77,-78,-76,54,54,54,54,-75,-79,-85,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-69,-70,-71,-72,-73,-74,54,54,54,54,-118,-98,-99,-100,-101,-102,-103,-104,-105,54,54,54,54,54,-97,-117,-106,54,54,54,-112,54,54,54,54,-113,-114,54,54,54,-107,-109,54,-115,-116,54,54,-108,54,54,-111,-110,]),'STRING_LITERAL':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[57,-86,-87,-84,-83,57,-1,57,-77,-78,-76,57,57,57,57,-75,-79,-85,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-69,-70,-71,-72,-73,-74,57,57,57,57,-118,-98,-99,-100,-101,-102,-103,-104,-105,57,57,57,57,57,-97,-117,-106,57,57,57,-112,57,57,57,57,-113,-114,57,57,57,-107,-109,57,-115,-116,57,57,-108,57,57,-111,-110,]),'ICONST':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[58,-86,-87,-84,-83,58,-1,58,-77,-78,-76,58,58,58,58,-75,-79,-85,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-69,-70,-71,-72,-73,-74,58,58,58,58,-118,-98,-99,-100,-101,-102,-103,-104,-105,58,58,58,58,58,-97,-117,-106,58,58,58,-112,58,58,58,58,-113,-114,58,58,58,-107,-109,58,-115,-116,58,58,-108,58,58,-111,-110,]),'FCONST':([22,23,24,25,26,29,37,40,44,45,46,48,49,50,51,53,54,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,116,118,119,120,121,122,123,124,125,126,133,134,138,157,159,161,162,164,165,166,167,168,171,172,177,183,184,185,189,190,191,195,196,198,199,200,201,202,204,206,207,208,209,],[59,-86,-87,-84,-83,59,-1,59,-77,-78,-76,59,59,59,59,-75,-79,-85,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-69,-70,-71,-72,-73,-74,59,59,59,59,-118,-98,-99,-100,-101,-102,-103,-104,-105,59,59,59,59,59,-97,-117,-106,59,59,59,-112,59,59,59,59,-113,-114,59,59,59,-107,-109,59,-115,-116,59,59,-108,59,59,-111,-110,]),'IF':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,128,128,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,128,128,-107,-109,-115,-116,128,-108,128,128,-111,-110,]),'WHILE':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,130,130,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,130,130,-107,-109,-115,-116,130,-108,130,130,-111,-110,]),'FOR':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,131,131,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,131,131,-107,-109,-115,-116,131,-108,131,131,-111,-110,]),'BREAK':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,132,132,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,132,132,-107,-109,-115,-116,132,-108,132,132,-111,-110,]),'RETURN':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,133,133,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,133,133,-107,-109,-115,-116,133,-108,133,133,-111,-110,]),'ASSERT':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,134,134,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,134,134,-107,-109,-115,-116,134,-108,134,134,-111,-110,]),'PRINT':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,135,135,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,135,135,-107,-109,-115,-116,135,-108,135,135,-111,-110,]),'READ':([23,24,25,26,37,60,75,116,118,119,120,121,122,123,124,125,126,161,162,164,168,184,185,189,190,195,196,199,200,201,204,206,207,208,209,],[-86,-87,-84,-83,-1,-85,136,136,-118,-98,-99,-100,-101,-102,-103,-104,-105,-97,-117,-106,-112,-113,-114,136,136,-107,-109,-115,-116,136,-108,136,136,-111,-110,]),'RBRACE':([23,24,25,26,37,39,41,42,43,47,52,55,56,57,58,59,60,66,75,76,77,100,101,102,104,105,115,116,117,118,119,120,121,122,123,124,125,126,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,164,168,173,174,175,176,178,184,185,195,196,199,200,204,208,209,],[-86,-87,-84,-83,-1,-92,-65,-43,-29,-45,-49,-55,-56,-57,-59,-60,-85,-43,-1,137,-95,-53,-54,-46,-47,-48,161,-119,-120,-118,-98,-99,-100,-101,-102,-103,-104,-105,-93,173,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-66,-52,-58,-97,-117,-106,-112,-94,-96,-50,-51,-44,-113,-114,-107,-109,-115,-116,-108,-111,-110,]),'RBRACK':([29,41,42,43,47,52,55,56,57,58,59,62,63,64,65,66,100,101,102,104,105,108,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,158,175,176,178,179,],[-1,-65,-43,-29,-45,-49,-55,-56,-57,-59,-60,109,-23,-24,-22,-43,-53,-54,-46,-47,-48,-61,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-66,175,-52,-58,-50,-51,-44,-62,]),'DIVIDE':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[81,-43,-29,-45,-49,-55,-56,-57,-59,-60,81,-43,-53,-54,-46,-47,-48,81,81,-32,-33,81,-35,81,81,81,81,81,81,81,-52,-58,81,-50,-51,-44,]),'EQUALS':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[82,-43,-29,-45,-49,-55,-56,-57,-59,-60,82,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,82,82,-52,-58,82,-50,-51,-44,]),'MOD':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[83,-43,-29,-45,-49,-55,-56,-57,-59,-60,83,-43,-53,-54,-46,-47,-48,83,83,-32,-33,83,-35,83,83,83,83,83,83,83,-52,-58,83,-50,-51,-44,]),'GT':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[84,-43,-29,-45,-49,-55,-56,-57,-59,-60,84,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,84,-35,-36,-37,-38,-39,84,84,84,-52,-58,84,-50,-51,-44,]),'GET':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[85,-43,-29,-45,-49,-55,-56,-57,-59,-60,85,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,85,-35,-36,-37,-38,-39,85,85,85,-52,-58,85,-50,-51,-44,]),'LT':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[86,-43,-29,-45,-49,-55,-56,-57,-59,-60,86,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,86,-35,-36,-37,-38,-39,86,86,86,-52,-58,86,-50,-51,-44,]),'LET':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[87,-43,-29,-45,-49,-55,-56,-57,-59,-60,87,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,87,-35,-36,-37,-38,-39,87,87,87,-52,-58,87,-50,-51,-44,]),'DIFF':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[88,-43,-29,-45,-49,-55,-56,-57,-59,-60,88,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,88,88,-52,-58,88,-50,-51,-44,]),'AND':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[89,-43,-29,-45,-49,-55,-56,-57,-59,-60,89,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,89,-52,-58,89,-50,-51,-44,]),'OR':([41,42,43,47,52,55,56,57,58,59,65,66,100,101,102,104,105,139,140,141,142,143,144,145,146,147,148,149,150,151,155,158,170,175,176,178,],[90,-43,-29,-45,-49,-55,-56,-57,-59,-60,90,-43,-53,-54,-46,-47,-48,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-52,-58,90,-50,-51,-44,]),'TASSIGN':([42,47,52,55,56,57,58,59,66,100,101,102,104,105,155,158,175,176,178,],[93,-45,-49,-55,-56,-57,-59,-60,-43,-53,-54,-46,-47,-48,-52,-58,-50,-51,-44,]),'DASSIGN':([42,47,52,55,56,57,58,59,66,100,101,102,104,105,155,158,175,176,178,],[94,-45,-49,-55,-56,-57,-59,-60,-43,-53,-54,-46,-47,-48,-52,-58,-50,-51,-44,]),'MODASSIGN':([42,47,52,55,56,57,58,59,66,100,101,102,104,105,155,158,175,176,178,],[95,-45,-49,-55,-56,-57,-59,-60,-43,-53,-54,-46,-47,-48,-52,-58,-50,-51,-44,]),'PASSIGN':([42,47,52,55,56,57,58,59,66,100,101,102,104,105,155,158,175,176,178,],[96,-45,-49,-55,-56,-57,-59,-60,-43,-53,-54,-46,-47,-48,-52,-58,-50,-51,-44,]),'MINASSIGN':([42,47,52,55,56,57,58,59,66,100,101,102,104,105,155,158,175,176,178,],[97,-45,-49,-55,-56,-57,-59,-60,-43,-53,-54,-46,-47,-48,-52,-58,-50,-51,-44,]),'ELSE':([119,120,121,122,123,124,125,126,161,164,168,184,185,195,196,199,200,204,208,209,],[-98,-99,-100,-101,-102,-103,-104,-105,-97,-106,-112,-113,-114,201,-109,-115,-116,-108,-111,-110,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,11,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,12,23,37,167,],[5,5,25,60,25,183,]),'type_specifier':([0,2,12,23,30,37,51,111,167,],[6,6,20,20,72,20,106,72,20,]),'declarator':([6,19,20,27,72,],[12,34,35,35,114,]),'init_declarator_list':([6,20,],[13,13,]),'pointer':([6,17,19,20,27,72,],[14,32,14,14,14,14,]),'direct_declarator':([6,14,19,20,27,72,],[15,28,15,15,15,15,]),'init_declarator':([6,20,27,],[16,16,61,]),'declaration_list_opt':([12,37,],[21,75,]),'declaration_list':([12,37,],[23,23,]),'empty':([12,17,29,30,37,75,116,133,167,171,183,189,190,191,198,201,202,206,207,],[24,33,64,71,24,117,163,163,163,163,163,163,163,163,163,163,163,163,163,]),'pointer_opt':([17,],[31,]),'compound_statement':([21,75,116,189,190,201,206,207,],[36,120,120,120,120,120,120,120,]),'initializer':([22,40,138,],[38,77,174,]),'assignment_expression':([22,40,51,75,91,98,99,103,116,133,138,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[39,39,108,108,152,108,156,108,108,108,39,108,108,108,108,108,156,188,108,108,108,108,108,108,108,108,108,]),'expr':([22,29,40,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[41,65,41,41,41,139,140,141,142,143,144,145,146,147,148,149,150,151,41,41,41,41,41,41,170,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'unary_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[42,66,42,102,104,66,42,42,66,66,66,66,66,66,66,66,66,66,66,66,66,42,42,42,42,42,42,66,42,66,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'cast_expression':([22,29,40,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[43,43,43,105,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,178,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'postfix_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_operator':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'primary_expression':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'constant':([22,29,40,48,49,50,51,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,103,116,133,134,138,157,159,165,166,167,171,172,177,183,189,190,191,198,201,202,206,207,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'constant_expression_opt':([29,],[62,]),'constant_expression':([29,],[63,]),'parameter_list':([30,],[67,]),'identifier_list_opt':([30,],[68,]),'parameter_declaration':([30,111,],[69,160,]),'identifier_list':([30,],[70,]),'initializer_list':([40,],[76,]),'assignment_operator':([42,],[91,]),'expression':([51,75,98,103,116,133,159,165,166,167,171,183,189,190,191,198,201,202,206,207,],[107,129,153,107,129,129,179,180,181,129,129,129,129,129,129,129,129,129,129,129,]),'statement_list_opt':([75,],[115,]),'statement_list':([75,],[116,]),'statement':([75,116,189,190,201,206,207,],[118,162,195,196,204,208,209,]),'expression_statement':([75,116,189,190,201,206,207,],[119,119,119,119,119,119,119,]),'selection_statement':([75,116,189,190,201,206,207,],[121,121,121,121,121,121,121,]),'iteration_statement':([75,116,189,190,201,206,207,],[122,122,122,122,122,122,122,]),'jump_statement':([75,116,189,190,201,206,207,],[123,123,123,123,123,123,123,]),'assert_statement':([75,116,189,190,201,206,207,],[124,124,124,124,124,124,124,]),'print_statement':([75,116,189,190,201,206,207,],[125,125,125,125,125,125,125,]),'read_statement':([75,116,189,190,201,206,207,],[126,126,126,126,126,126,126,]),'expression_opt':([75,116,133,167,171,183,189,190,191,198,201,202,206,207,],[127,127,169,182,186,192,127,127,197,203,127,205,127,127,]),'argument_expression':([99,172,],[154,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',26),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',30),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',36),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',37),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',42),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',43),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition','parser.py',48),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',52),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',53),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',54),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',55),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','parser.py',60),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',61),
  ('pointer -> TIMES pointer_opt','pointer',2,'p_pointer','parser.py',66),
  ('pointer_opt -> pointer','pointer_opt',1,'p_pointer_opt','parser.py',71),
  ('pointer_opt -> empty','pointer_opt',1,'p_pointer_opt','parser.py',72),
  ('direct_declarator -> ID','direct_declarator',1,'p_direct_declarator','parser.py',77),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','parser.py',78),
  ('direct_declarator -> direct_declarator LBRACK constant_expression_opt RBRACK','direct_declarator',4,'p_direct_declarator','parser.py',79),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',80),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','parser.py',81),
  ('constant_expression -> expr','constant_expression',1,'p_constant_expression','parser.py',89),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','parser.py',93),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','parser.py',94),
  ('identifier_list -> identifier_list ID','identifier_list',2,'p_identifier_list','parser.py',99),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','parser.py',100),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',109),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',110),
  ('expr -> cast_expression','expr',1,'p_expr','parser.py',116),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser.py',117),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser.py',118),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser.py',119),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser.py',120),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','parser.py',121),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser.py',122),
  ('expr -> expr GT expr','expr',3,'p_expr','parser.py',123),
  ('expr -> expr GET expr','expr',3,'p_expr','parser.py',124),
  ('expr -> expr LT expr','expr',3,'p_expr','parser.py',125),
  ('expr -> expr LET expr','expr',3,'p_expr','parser.py',126),
  ('expr -> expr DIFF expr','expr',3,'p_expr','parser.py',127),
  ('expr -> expr AND expr','expr',3,'p_expr','parser.py',128),
  ('expr -> expr OR expr','expr',3,'p_expr','parser.py',129),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',139),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',140),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',146),
  ('unary_expression -> PP unary_expression','unary_expression',2,'p_unary_expression','parser.py',147),
  ('unary_expression -> MM unary_expression','unary_expression',2,'p_unary_expression','parser.py',148),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',149),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',164),
  ('postfix_expression -> postfix_expression LBRACK expression RBRACK','postfix_expression',4,'p_postfix_expression','parser.py',165),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',166),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression','parser.py',167),
  ('postfix_expression -> postfix_expression PP','postfix_expression',2,'p_postfix_expression','parser.py',168),
  ('postfix_expression -> postfix_expression MM','postfix_expression',2,'p_postfix_expression','parser.py',169),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','parser.py',185),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','parser.py',186),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','parser.py',187),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',188),
  ('constant -> ICONST','constant',1,'p_constant','parser.py',203),
  ('constant -> FCONST','constant',1,'p_constant','parser.py',204),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',213),
  ('expression -> assignment_expression COMMA expression','expression',3,'p_expression','parser.py',214),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',219),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',220),
  ('assignment_expression -> expr','assignment_expression',1,'p_assignment_expression','parser.py',225),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',226),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',235),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',236),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',244),
  ('assignment_operator -> TASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',245),
  ('assignment_operator -> DASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',246),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',247),
  ('assignment_operator -> PASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',248),
  ('assignment_operator -> MINASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',249),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',254),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',255),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',256),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',257),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',258),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',263),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',264),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',273),
  ('declaration -> type_specifier init_declarator_list SEMI','declaration',3,'p_declaration','parser.py',278),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',283),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',284),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',289),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',290),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',295),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',296),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',301),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',302),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',307),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','parser.py',308),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','parser.py',309),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',314),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',315),
  ('compound_statement -> LBRACE declaration_list_opt statement_list_opt RBRACE','compound_statement',4,'p_compound_statement','parser.py',324),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',335),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',336),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',337),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',338),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',339),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',340),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',341),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',342),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',348),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',353),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',354),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',363),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',364),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',365),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','parser.py',375),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','parser.py',376),
  ('assert_statement -> ASSERT expr SEMI','assert_statement',3,'p_assert_statement','parser.py',384),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',388),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',393),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',397),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',398),
  ('statement_list_opt -> statement_list','statement_list_opt',1,'p_statement_list_opt','parser.py',406),
  ('statement_list_opt -> empty','statement_list_opt',1,'p_statement_list_opt','parser.py',407),
]
