Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CCOMMENT
    CCONST
    CPPCOMMENT
    ERROR
    UNMATCHEDQUOTE
    UNTERMCOMMENT

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> global_declaration_list
Rule 3     global_declaration_list -> global_declaration
Rule 4     global_declaration_list -> global_declaration_list global_declaration
Rule 5     global_declaration -> function_definition
Rule 6     global_declaration -> declaration
Rule 7     function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> FLOAT
Rule 12    type_specifier_opt -> type_specifier
Rule 13    type_specifier_opt -> empty
Rule 14    declarator -> pointer direct_declarator
Rule 15    declarator -> direct_declarator
Rule 16    pointer -> TIMES pointer_opt
Rule 17    pointer_opt -> pointer
Rule 18    pointer_opt -> empty
Rule 19    direct_declarator -> ID
Rule 20    direct_declarator -> LPAREN declarator RPAREN
Rule 21    direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE
Rule 22    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 23    direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN
Rule 24    constant_expression -> expr
Rule 25    constant_exp_opt -> constant_expression
Rule 26    constant_exp_opt -> empty
Rule 27    identifier_list -> identifier_list ID
Rule 28    identifier_list -> ID
Rule 29    identifier_list_opt -> identifier_list
Rule 30    identifier_list_opt -> empty
Rule 31    expr -> cast_expression
Rule 32    expr -> expr PLUS expr
Rule 33    expr -> expr MINUS expr
Rule 34    expr -> expr TIMES expr
Rule 35    expr -> expr DIVIDE expr
Rule 36    expr -> expr EQUALS expr
Rule 37    expr -> expr MOD expr
Rule 38    expr -> expr GT expr
Rule 39    expr -> expr GET expr
Rule 40    expr -> expr LT expr
Rule 41    expr -> expr LET expr
Rule 42    expr -> expr DIFF expr
Rule 43    expr -> expr AND expr
Rule 44    expr -> expr OR expr
Rule 45    cast_expression -> unary_expression
Rule 46    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 47    unary_expression -> postfix_expression
Rule 48    unary_expression -> PP unary_expression
Rule 49    unary_expression -> MM unary_expression
Rule 50    unary_expression -> unary_operator cast_expression
Rule 51    postfix_expression -> primary_expression
Rule 52    postfix_expression -> postfix_expression LBRACE expression RBRACE
Rule 53    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 54    postfix_expression -> postfix_expression LBRACE RBRACE
Rule 55    postfix_expression -> postfix_expression PP
Rule 56    postfix_expression -> postfix_expression MM
Rule 57    primary_expression -> ID
Rule 58    primary_expression -> constant
Rule 59    primary_expression -> STRING_LITERAL
Rule 60    primary_expression -> LPAREN expression RPAREN
Rule 61    constant -> ICONST
Rule 62    constant -> FCONST
Rule 63    expression -> assignment_expression
Rule 64    expression -> expression COMMA assignment_expression
Rule 65    expression_opt -> expression
Rule 66    expression_opt -> empty
Rule 67    assignment_expression -> expr
Rule 68    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 69    argument_expression -> assignment_expression
Rule 70    argument_expression -> argument_expression COMMA assignment_expression
Rule 71    assignment_operator -> ASSIGN
Rule 72    assignment_operator -> TASSIGN
Rule 73    assignment_operator -> DASSIGN
Rule 74    assignment_operator -> MODASSIGN
Rule 75    assignment_operator -> PASSIGN
Rule 76    assignment_operator -> MINASSIGN
Rule 77    unary_operator -> ADDRESS
Rule 78    unary_operator -> TIMES
Rule 79    unary_operator -> PLUS
Rule 80    unary_operator -> MINUS
Rule 81    unary_operator -> NOT
Rule 82    parameter_list -> parameter_declaration
Rule 83    parameter_list -> parameter_list COMMA parameter_declaration
Rule 84    parameter_declaration -> type_specifier declarator
Rule 85    declaration -> type_specifier init_declarator_list_opt SEMI
Rule 86    declaration_list -> declaration
Rule 87    declaration_list -> declaration_list declaration
Rule 88    declaration_list_opt -> declaration_list
Rule 89    declaration_list_opt -> empty
Rule 90    init_declarator -> declarator
Rule 91    init_declarator -> declarator ASSIGN initializer
Rule 92    init_declarator_list -> init_declarator
Rule 93    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 94    init_declarator_list_opt -> init_declarator_list
Rule 95    init_declarator_list_opt -> empty
Rule 96    initializer -> assignment_expression
Rule 97    initializer -> LBRACK initializer_list RBRACK
Rule 98    initializer -> LBRACK initializer_list COMMA RBRACK
Rule 99    initializer_list -> initializer
Rule 100   initializer_list -> initializer_list COMMA initializer
Rule 101   compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK
Rule 102   statement -> expression_statement
Rule 103   statement -> compound_statement
Rule 104   statement -> selection_statement
Rule 105   statement -> iteration_statement
Rule 106   statement -> jump_statement
Rule 107   statement -> assert_statement
Rule 108   statement -> print_statement
Rule 109   statement -> read_statement
Rule 110   expression_statement -> expression_opt SEMI
Rule 111   selection_statement -> IF LPAREN expression RPAREN statement
Rule 112   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 113   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 114   iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 115   iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 116   jump_statement -> BREAK SEMI
Rule 117   jump_statement -> RETURN expression_opt SEMI
Rule 118   assert_statement -> ASSERT expr SEMI
Rule 119   print_statement -> PRINT LPAREN expr RPAREN SEMI
Rule 120   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 121   statement_list -> statement_list statement
Rule 122   statement_list -> statement
Rule 123   statement_list_opt -> statement_list
Rule 124   statement_list_opt -> empty
Rule 125   statement -> ID ASSIGN expr
Rule 126   expr -> LPAREN expr RPAREN

Terminals, with rules where they appear

ADDRESS              : 77
AND                  : 43
ASSERT               : 118
ASSIGN               : 71 91 125
BREAK                : 116
CCOMMENT             : 
CCONST               : 
CHAR                 : 9
COMMA                : 64 70 83 93 98 100
CPPCOMMENT           : 
DASSIGN              : 73
DIFF                 : 42
DIVIDE               : 35
ELSE                 : 112
EQUALS               : 36
ERROR                : 
FCONST               : 62
FLOAT                : 11
FOR                  : 114 115
GET                  : 39
GT                   : 38
ICONST               : 61
ID                   : 19 27 28 57 125
IF                   : 111 112
INT                  : 10
LBRACE               : 21 52 54
LBRACK               : 97 98 101
LET                  : 41
LPAREN               : 20 22 23 46 53 60 111 112 113 114 115 119 120 126
LT                   : 40
MINASSIGN            : 76
MINUS                : 33 80
MM                   : 49 56
MOD                  : 37
MODASSIGN            : 74
NOT                  : 81
OR                   : 44
PASSIGN              : 75
PLUS                 : 32 79
PP                   : 48 55
PRINT                : 119
RBRACE               : 21 52 54
RBRACK               : 97 98 101
READ                 : 120
RETURN               : 117
RPAREN               : 20 22 23 46 53 60 111 112 113 114 115 119 120 126
SEMI                 : 85 110 114 114 115 116 117 118 119 120
STRING_LITERAL       : 59
TASSIGN              : 72
TIMES                : 16 34 78
UNMATCHEDQUOTE       : 
UNTERMCOMMENT        : 
VOID                 : 8
WHILE                : 113
error                : 

Nonterminals, with rules where they appear

argument_expression  : 53 70 120
assert_statement     : 107
assignment_expression : 63 64 68 69 70 96
assignment_operator  : 68
cast_expression      : 31 46 50
compound_statement   : 7 103
constant             : 58
constant_exp_opt     : 21
constant_expression  : 25
declaration          : 6 86 87 115
declaration_list     : 87 88
declaration_list_opt : 7 101
declarator           : 7 20 84 90 91
direct_declarator    : 14 15 21 22 23
empty                : 13 18 26 30 66 89 95 124
expr                 : 24 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 67 118 119 125 126
expression           : 52 60 64 65 111 112 113
expression_opt       : 110 114 114 114 115 115 117
expression_statement : 102
function_definition  : 5
global_declaration   : 3 4
global_declaration_list : 2 4
identifier_list      : 27 29
identifier_list_opt  : 23
init_declarator      : 92 93
init_declarator_list : 93 94
init_declarator_list_opt : 85
initializer          : 91 99 100
initializer_list     : 97 98 100
iteration_statement  : 105
jump_statement       : 106
parameter_declaration : 82 83
parameter_list       : 22 83
pointer              : 14 17
pointer_opt          : 16
postfix_expression   : 47 52 53 54 55 56
primary_expression   : 51
print_statement      : 108
program              : 0
read_statement       : 109
selection_statement  : 104
statement            : 111 112 112 113 114 115 121 122
statement_list       : 121 123
statement_list_opt   : 101
type_specifier       : 12 46 84 85
type_specifier_opt   : 7
unary_expression     : 45 48 49 68
unary_operator       : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . global_declaration_list
    (3) global_declaration_list -> . global_declaration
    (4) global_declaration_list -> . global_declaration_list global_declaration
    (5) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (7) function_definition -> . type_specifier_opt declarator declaration_list_opt compound_statement
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier_opt -> . type_specifier
    (13) type_specifier_opt -> . empty
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (1) empty -> .

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TIMES           reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier_opt             shift and go to state 6
    type_specifier                 shift and go to state 7
    empty                          shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (2) program -> global_declaration_list .
    (4) global_declaration_list -> global_declaration_list . global_declaration
    (5) global_declaration -> . function_definition
    (6) global_declaration -> . declaration
    (7) function_definition -> . type_specifier_opt declarator declaration_list_opt compound_statement
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (12) type_specifier_opt -> . type_specifier
    (13) type_specifier_opt -> . empty
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (1) empty -> .

    $end            reduce using rule 2 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    TIMES           reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)

    global_declaration             shift and go to state 13
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier_opt             shift and go to state 6
    type_specifier                 shift and go to state 7
    empty                          shift and go to state 8

state 3

    (3) global_declaration_list -> global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration .)


state 4

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    TIMES           reduce using rule 5 (global_declaration -> function_definition .)
    ID              reduce using rule 5 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 5

    (6) global_declaration -> declaration .

    VOID            reduce using rule 6 (global_declaration -> declaration .)
    CHAR            reduce using rule 6 (global_declaration -> declaration .)
    INT             reduce using rule 6 (global_declaration -> declaration .)
    FLOAT           reduce using rule 6 (global_declaration -> declaration .)
    TIMES           reduce using rule 6 (global_declaration -> declaration .)
    ID              reduce using rule 6 (global_declaration -> declaration .)
    LPAREN          reduce using rule 6 (global_declaration -> declaration .)
    $end            reduce using rule 6 (global_declaration -> declaration .)


state 6

    (7) function_definition -> type_specifier_opt . declarator declaration_list_opt compound_statement
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    declarator                     shift and go to state 14
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 7

    (85) declaration -> type_specifier . init_declarator_list_opt SEMI
    (12) type_specifier_opt -> type_specifier .
    (94) init_declarator_list_opt -> . init_declarator_list
    (95) init_declarator_list_opt -> . empty
    (92) init_declarator_list -> . init_declarator
    (93) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (1) empty -> .
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator ASSIGN initializer
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    SEMI            reduce using rule 1 (empty -> .)
    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

  ! TIMES           [ reduce using rule 12 (type_specifier_opt -> type_specifier .) ]
  ! ID              [ reduce using rule 12 (type_specifier_opt -> type_specifier .) ]
  ! LPAREN          [ reduce using rule 12 (type_specifier_opt -> type_specifier .) ]

    init_declarator_list_opt       shift and go to state 20
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    init_declarator                shift and go to state 23
    declarator                     shift and go to state 24
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 8

    (13) type_specifier_opt -> empty .

    TIMES           reduce using rule 13 (type_specifier_opt -> empty .)
    ID              reduce using rule 13 (type_specifier_opt -> empty .)
    LPAREN          reduce using rule 13 (type_specifier_opt -> empty .)


state 9

    (8) type_specifier -> VOID .

    TIMES           reduce using rule 8 (type_specifier -> VOID .)
    ID              reduce using rule 8 (type_specifier -> VOID .)
    LPAREN          reduce using rule 8 (type_specifier -> VOID .)
    SEMI            reduce using rule 8 (type_specifier -> VOID .)
    RPAREN          reduce using rule 8 (type_specifier -> VOID .)


state 10

    (9) type_specifier -> CHAR .

    TIMES           reduce using rule 9 (type_specifier -> CHAR .)
    ID              reduce using rule 9 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 9 (type_specifier -> CHAR .)
    SEMI            reduce using rule 9 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 9 (type_specifier -> CHAR .)


state 11

    (10) type_specifier -> INT .

    TIMES           reduce using rule 10 (type_specifier -> INT .)
    ID              reduce using rule 10 (type_specifier -> INT .)
    LPAREN          reduce using rule 10 (type_specifier -> INT .)
    SEMI            reduce using rule 10 (type_specifier -> INT .)
    RPAREN          reduce using rule 10 (type_specifier -> INT .)


state 12

    (11) type_specifier -> FLOAT .

    TIMES           reduce using rule 11 (type_specifier -> FLOAT .)
    ID              reduce using rule 11 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 11 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 11 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 11 (type_specifier -> FLOAT .)


state 13

    (4) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 4 (global_declaration_list -> global_declaration_list global_declaration .)


state 14

    (7) function_definition -> type_specifier_opt declarator . declaration_list_opt compound_statement
    (88) declaration_list_opt -> . declaration_list
    (89) declaration_list_opt -> . empty
    (86) declaration_list -> . declaration
    (87) declaration_list -> . declaration_list declaration
    (1) empty -> .
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACK          reduce using rule 1 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 25
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    type_specifier                 shift and go to state 29

state 15

    (14) declarator -> pointer . direct_declarator
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    direct_declarator              shift and go to state 30

state 16

    (15) declarator -> direct_declarator .
    (21) direct_declarator -> direct_declarator . LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (23) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 15 (declarator -> direct_declarator .)
    CHAR            reduce using rule 15 (declarator -> direct_declarator .)
    INT             reduce using rule 15 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 15 (declarator -> direct_declarator .)
    LBRACK          reduce using rule 15 (declarator -> direct_declarator .)
    ASSIGN          reduce using rule 15 (declarator -> direct_declarator .)
    COMMA           reduce using rule 15 (declarator -> direct_declarator .)
    SEMI            reduce using rule 15 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 15 (declarator -> direct_declarator .)
    LBRACE          shift and go to state 31
    LPAREN          shift and go to state 32


state 17

    (16) pointer -> TIMES . pointer_opt
    (17) pointer_opt -> . pointer
    (18) pointer_opt -> . empty
    (16) pointer -> . TIMES pointer_opt
    (1) empty -> .

    TIMES           shift and go to state 17
    ID              reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)

    pointer_opt                    shift and go to state 33
    pointer                        shift and go to state 34
    empty                          shift and go to state 35

state 18

    (19) direct_declarator -> ID .

    LBRACE          reduce using rule 19 (direct_declarator -> ID .)
    LPAREN          reduce using rule 19 (direct_declarator -> ID .)
    VOID            reduce using rule 19 (direct_declarator -> ID .)
    CHAR            reduce using rule 19 (direct_declarator -> ID .)
    INT             reduce using rule 19 (direct_declarator -> ID .)
    FLOAT           reduce using rule 19 (direct_declarator -> ID .)
    LBRACK          reduce using rule 19 (direct_declarator -> ID .)
    ASSIGN          reduce using rule 19 (direct_declarator -> ID .)
    COMMA           reduce using rule 19 (direct_declarator -> ID .)
    SEMI            reduce using rule 19 (direct_declarator -> ID .)
    RPAREN          reduce using rule 19 (direct_declarator -> ID .)


state 19

    (20) direct_declarator -> LPAREN . declarator RPAREN
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    declarator                     shift and go to state 36
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 20

    (85) declaration -> type_specifier init_declarator_list_opt . SEMI

    SEMI            shift and go to state 37


state 21

    (94) init_declarator_list_opt -> init_declarator_list .
    (93) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 94 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 38


state 22

    (95) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 95 (init_declarator_list_opt -> empty .)


state 23

    (92) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 92 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 92 (init_declarator_list -> init_declarator .)


state 24

    (90) init_declarator -> declarator .
    (91) init_declarator -> declarator . ASSIGN initializer

    COMMA           reduce using rule 90 (init_declarator -> declarator .)
    SEMI            reduce using rule 90 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 39


state 25

    (7) function_definition -> type_specifier_opt declarator declaration_list_opt . compound_statement
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK

    LBRACK          shift and go to state 41

    compound_statement             shift and go to state 40

state 26

    (88) declaration_list_opt -> declaration_list .
    (87) declaration_list -> declaration_list . declaration
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACK          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    ID              reduce using rule 88 (declaration_list_opt -> declaration_list .)
    IF              reduce using rule 88 (declaration_list_opt -> declaration_list .)
    WHILE           reduce using rule 88 (declaration_list_opt -> declaration_list .)
    FOR             reduce using rule 88 (declaration_list_opt -> declaration_list .)
    BREAK           reduce using rule 88 (declaration_list_opt -> declaration_list .)
    RETURN          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    ASSERT          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    PRINT           reduce using rule 88 (declaration_list_opt -> declaration_list .)
    READ            reduce using rule 88 (declaration_list_opt -> declaration_list .)
    LPAREN          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    PP              reduce using rule 88 (declaration_list_opt -> declaration_list .)
    MM              reduce using rule 88 (declaration_list_opt -> declaration_list .)
    ADDRESS         reduce using rule 88 (declaration_list_opt -> declaration_list .)
    TIMES           reduce using rule 88 (declaration_list_opt -> declaration_list .)
    PLUS            reduce using rule 88 (declaration_list_opt -> declaration_list .)
    MINUS           reduce using rule 88 (declaration_list_opt -> declaration_list .)
    NOT             reduce using rule 88 (declaration_list_opt -> declaration_list .)
    STRING_LITERAL  reduce using rule 88 (declaration_list_opt -> declaration_list .)
    ICONST          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    FCONST          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    RBRACK          reduce using rule 88 (declaration_list_opt -> declaration_list .)
    SEMI            reduce using rule 88 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 42
    type_specifier                 shift and go to state 29

state 27

    (89) declaration_list_opt -> empty .

    LBRACK          reduce using rule 89 (declaration_list_opt -> empty .)
    ID              reduce using rule 89 (declaration_list_opt -> empty .)
    IF              reduce using rule 89 (declaration_list_opt -> empty .)
    WHILE           reduce using rule 89 (declaration_list_opt -> empty .)
    FOR             reduce using rule 89 (declaration_list_opt -> empty .)
    BREAK           reduce using rule 89 (declaration_list_opt -> empty .)
    RETURN          reduce using rule 89 (declaration_list_opt -> empty .)
    ASSERT          reduce using rule 89 (declaration_list_opt -> empty .)
    PRINT           reduce using rule 89 (declaration_list_opt -> empty .)
    READ            reduce using rule 89 (declaration_list_opt -> empty .)
    LPAREN          reduce using rule 89 (declaration_list_opt -> empty .)
    PP              reduce using rule 89 (declaration_list_opt -> empty .)
    MM              reduce using rule 89 (declaration_list_opt -> empty .)
    ADDRESS         reduce using rule 89 (declaration_list_opt -> empty .)
    TIMES           reduce using rule 89 (declaration_list_opt -> empty .)
    PLUS            reduce using rule 89 (declaration_list_opt -> empty .)
    MINUS           reduce using rule 89 (declaration_list_opt -> empty .)
    NOT             reduce using rule 89 (declaration_list_opt -> empty .)
    STRING_LITERAL  reduce using rule 89 (declaration_list_opt -> empty .)
    ICONST          reduce using rule 89 (declaration_list_opt -> empty .)
    FCONST          reduce using rule 89 (declaration_list_opt -> empty .)
    RBRACK          reduce using rule 89 (declaration_list_opt -> empty .)
    SEMI            reduce using rule 89 (declaration_list_opt -> empty .)


state 28

    (86) declaration_list -> declaration .

    VOID            reduce using rule 86 (declaration_list -> declaration .)
    CHAR            reduce using rule 86 (declaration_list -> declaration .)
    INT             reduce using rule 86 (declaration_list -> declaration .)
    FLOAT           reduce using rule 86 (declaration_list -> declaration .)
    LBRACK          reduce using rule 86 (declaration_list -> declaration .)
    ID              reduce using rule 86 (declaration_list -> declaration .)
    IF              reduce using rule 86 (declaration_list -> declaration .)
    WHILE           reduce using rule 86 (declaration_list -> declaration .)
    FOR             reduce using rule 86 (declaration_list -> declaration .)
    BREAK           reduce using rule 86 (declaration_list -> declaration .)
    RETURN          reduce using rule 86 (declaration_list -> declaration .)
    ASSERT          reduce using rule 86 (declaration_list -> declaration .)
    PRINT           reduce using rule 86 (declaration_list -> declaration .)
    READ            reduce using rule 86 (declaration_list -> declaration .)
    LPAREN          reduce using rule 86 (declaration_list -> declaration .)
    PP              reduce using rule 86 (declaration_list -> declaration .)
    MM              reduce using rule 86 (declaration_list -> declaration .)
    ADDRESS         reduce using rule 86 (declaration_list -> declaration .)
    TIMES           reduce using rule 86 (declaration_list -> declaration .)
    PLUS            reduce using rule 86 (declaration_list -> declaration .)
    MINUS           reduce using rule 86 (declaration_list -> declaration .)
    NOT             reduce using rule 86 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 86 (declaration_list -> declaration .)
    ICONST          reduce using rule 86 (declaration_list -> declaration .)
    FCONST          reduce using rule 86 (declaration_list -> declaration .)
    RBRACK          reduce using rule 86 (declaration_list -> declaration .)
    SEMI            reduce using rule 86 (declaration_list -> declaration .)


state 29

    (85) declaration -> type_specifier . init_declarator_list_opt SEMI
    (94) init_declarator_list_opt -> . init_declarator_list
    (95) init_declarator_list_opt -> . empty
    (92) init_declarator_list -> . init_declarator
    (93) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (1) empty -> .
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator ASSIGN initializer
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    SEMI            reduce using rule 1 (empty -> .)
    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    init_declarator_list_opt       shift and go to state 20
    init_declarator_list           shift and go to state 21
    empty                          shift and go to state 22
    init_declarator                shift and go to state 23
    declarator                     shift and go to state 24
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 30

    (14) declarator -> pointer direct_declarator .
    (21) direct_declarator -> direct_declarator . LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (23) direct_declarator -> direct_declarator . LPAREN identifier_list_opt RPAREN

    VOID            reduce using rule 14 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 14 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 14 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 14 (declarator -> pointer direct_declarator .)
    LBRACK          reduce using rule 14 (declarator -> pointer direct_declarator .)
    ASSIGN          reduce using rule 14 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 14 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 14 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 14 (declarator -> pointer direct_declarator .)
    LBRACE          shift and go to state 31
    LPAREN          shift and go to state 32


state 31

    (21) direct_declarator -> direct_declarator LBRACE . constant_exp_opt RBRACE
    (25) constant_exp_opt -> . constant_expression
    (26) constant_exp_opt -> . empty
    (24) constant_expression -> . expr
    (1) empty -> .
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RBRACE          reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    constant_exp_opt               shift and go to state 43
    constant_expression            shift and go to state 44
    empty                          shift and go to state 45
    expr                           shift and go to state 46
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 32

    (22) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (23) direct_declarator -> direct_declarator LPAREN . identifier_list_opt RPAREN
    (82) parameter_list -> . parameter_declaration
    (83) parameter_list -> . parameter_list COMMA parameter_declaration
    (29) identifier_list_opt -> . identifier_list
    (30) identifier_list_opt -> . empty
    (84) parameter_declaration -> . type_specifier declarator
    (27) identifier_list -> . identifier_list ID
    (28) identifier_list -> . ID
    (1) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    ID              shift and go to state 71
    RPAREN          reduce using rule 1 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_list                 shift and go to state 65
    identifier_list_opt            shift and go to state 66
    parameter_declaration          shift and go to state 67
    identifier_list                shift and go to state 68
    empty                          shift and go to state 69
    type_specifier                 shift and go to state 70

state 33

    (16) pointer -> TIMES pointer_opt .

    ID              reduce using rule 16 (pointer -> TIMES pointer_opt .)
    LPAREN          reduce using rule 16 (pointer -> TIMES pointer_opt .)


state 34

    (17) pointer_opt -> pointer .

    ID              reduce using rule 17 (pointer_opt -> pointer .)
    LPAREN          reduce using rule 17 (pointer_opt -> pointer .)


state 35

    (18) pointer_opt -> empty .

    ID              reduce using rule 18 (pointer_opt -> empty .)
    LPAREN          reduce using rule 18 (pointer_opt -> empty .)


state 36

    (20) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 72


state 37

    (85) declaration -> type_specifier init_declarator_list_opt SEMI .

    VOID            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    CHAR            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    INT             reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FLOAT           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    TIMES           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ID              reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LPAREN          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    $end            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    LBRACK          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    IF              reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    WHILE           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FOR             reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    BREAK           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RETURN          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ASSERT          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PRINT           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    READ            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PP              reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MM              reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ADDRESS         reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    PLUS            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    MINUS           reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    NOT             reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    STRING_LITERAL  reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    ICONST          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    FCONST          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    RBRACK          reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)
    SEMI            reduce using rule 85 (declaration -> type_specifier init_declarator_list_opt SEMI .)


state 38

    (93) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (90) init_declarator -> . declarator
    (91) init_declarator -> . declarator ASSIGN initializer
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    init_declarator                shift and go to state 73
    declarator                     shift and go to state 24
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 39

    (91) init_declarator -> declarator ASSIGN . initializer
    (96) initializer -> . assignment_expression
    (97) initializer -> . LBRACK initializer_list RBRACK
    (98) initializer -> . LBRACK initializer_list COMMA RBRACK
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LBRACK          shift and go to state 76
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    initializer                    shift and go to state 74
    assignment_expression          shift and go to state 75
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 40

    (7) function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier_opt declarator declaration_list_opt compound_statement .)


state 41

    (101) compound_statement -> LBRACK . declaration_list_opt statement_list_opt RBRACK
    (88) declaration_list_opt -> . declaration_list
    (89) declaration_list_opt -> . empty
    (86) declaration_list -> . declaration
    (87) declaration_list -> . declaration_list declaration
    (1) empty -> .
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    ID              reduce using rule 1 (empty -> .)
    LBRACK          reduce using rule 1 (empty -> .)
    IF              reduce using rule 1 (empty -> .)
    WHILE           reduce using rule 1 (empty -> .)
    FOR             reduce using rule 1 (empty -> .)
    BREAK           reduce using rule 1 (empty -> .)
    RETURN          reduce using rule 1 (empty -> .)
    ASSERT          reduce using rule 1 (empty -> .)
    PRINT           reduce using rule 1 (empty -> .)
    READ            reduce using rule 1 (empty -> .)
    LPAREN          reduce using rule 1 (empty -> .)
    PP              reduce using rule 1 (empty -> .)
    MM              reduce using rule 1 (empty -> .)
    ADDRESS         reduce using rule 1 (empty -> .)
    TIMES           reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    NOT             reduce using rule 1 (empty -> .)
    STRING_LITERAL  reduce using rule 1 (empty -> .)
    ICONST          reduce using rule 1 (empty -> .)
    FCONST          reduce using rule 1 (empty -> .)
    RBRACK          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 79
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    type_specifier                 shift and go to state 29

state 42

    (87) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 87 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 87 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 87 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    LBRACK          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 87 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 87 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 87 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    PRINT           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 87 (declaration_list -> declaration_list declaration .)
    LPAREN          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    PP              reduce using rule 87 (declaration_list -> declaration_list declaration .)
    MM              reduce using rule 87 (declaration_list -> declaration_list declaration .)
    ADDRESS         reduce using rule 87 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 87 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 87 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 87 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 87 (declaration_list -> declaration_list declaration .)
    ICONST          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    FCONST          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    RBRACK          reduce using rule 87 (declaration_list -> declaration_list declaration .)
    SEMI            reduce using rule 87 (declaration_list -> declaration_list declaration .)


state 43

    (21) direct_declarator -> direct_declarator LBRACE constant_exp_opt . RBRACE

    RBRACE          shift and go to state 80


state 44

    (25) constant_exp_opt -> constant_expression .

    RBRACE          reduce using rule 25 (constant_exp_opt -> constant_expression .)


state 45

    (26) constant_exp_opt -> empty .

    RBRACE          reduce using rule 26 (constant_exp_opt -> empty .)


state 46

    (24) constant_expression -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    RBRACE          reduce using rule 24 (constant_expression -> expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93


state 47

    (31) expr -> cast_expression .

    PLUS            reduce using rule 31 (expr -> cast_expression .)
    MINUS           reduce using rule 31 (expr -> cast_expression .)
    TIMES           reduce using rule 31 (expr -> cast_expression .)
    DIVIDE          reduce using rule 31 (expr -> cast_expression .)
    EQUALS          reduce using rule 31 (expr -> cast_expression .)
    MOD             reduce using rule 31 (expr -> cast_expression .)
    GT              reduce using rule 31 (expr -> cast_expression .)
    GET             reduce using rule 31 (expr -> cast_expression .)
    LT              reduce using rule 31 (expr -> cast_expression .)
    LET             reduce using rule 31 (expr -> cast_expression .)
    DIFF            reduce using rule 31 (expr -> cast_expression .)
    AND             reduce using rule 31 (expr -> cast_expression .)
    OR              reduce using rule 31 (expr -> cast_expression .)
    RBRACE          reduce using rule 31 (expr -> cast_expression .)
    COMMA           reduce using rule 31 (expr -> cast_expression .)
    SEMI            reduce using rule 31 (expr -> cast_expression .)
    RPAREN          reduce using rule 31 (expr -> cast_expression .)
    RBRACK          reduce using rule 31 (expr -> cast_expression .)
    ID              reduce using rule 31 (expr -> cast_expression .)
    LBRACK          reduce using rule 31 (expr -> cast_expression .)
    IF              reduce using rule 31 (expr -> cast_expression .)
    WHILE           reduce using rule 31 (expr -> cast_expression .)
    FOR             reduce using rule 31 (expr -> cast_expression .)
    BREAK           reduce using rule 31 (expr -> cast_expression .)
    RETURN          reduce using rule 31 (expr -> cast_expression .)
    ASSERT          reduce using rule 31 (expr -> cast_expression .)
    PRINT           reduce using rule 31 (expr -> cast_expression .)
    READ            reduce using rule 31 (expr -> cast_expression .)
    LPAREN          reduce using rule 31 (expr -> cast_expression .)
    PP              reduce using rule 31 (expr -> cast_expression .)
    MM              reduce using rule 31 (expr -> cast_expression .)
    ADDRESS         reduce using rule 31 (expr -> cast_expression .)
    NOT             reduce using rule 31 (expr -> cast_expression .)
    STRING_LITERAL  reduce using rule 31 (expr -> cast_expression .)
    ICONST          reduce using rule 31 (expr -> cast_expression .)
    FCONST          reduce using rule 31 (expr -> cast_expression .)
    ELSE            reduce using rule 31 (expr -> cast_expression .)


state 48

    (79) unary_operator -> PLUS .

    LPAREN          reduce using rule 79 (unary_operator -> PLUS .)
    PP              reduce using rule 79 (unary_operator -> PLUS .)
    MM              reduce using rule 79 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 79 (unary_operator -> PLUS .)
    TIMES           reduce using rule 79 (unary_operator -> PLUS .)
    PLUS            reduce using rule 79 (unary_operator -> PLUS .)
    MINUS           reduce using rule 79 (unary_operator -> PLUS .)
    NOT             reduce using rule 79 (unary_operator -> PLUS .)
    ID              reduce using rule 79 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 79 (unary_operator -> PLUS .)
    ICONST          reduce using rule 79 (unary_operator -> PLUS .)
    FCONST          reduce using rule 79 (unary_operator -> PLUS .)


state 49

    (80) unary_operator -> MINUS .

    LPAREN          reduce using rule 80 (unary_operator -> MINUS .)
    PP              reduce using rule 80 (unary_operator -> MINUS .)
    MM              reduce using rule 80 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 80 (unary_operator -> MINUS .)
    TIMES           reduce using rule 80 (unary_operator -> MINUS .)
    PLUS            reduce using rule 80 (unary_operator -> MINUS .)
    MINUS           reduce using rule 80 (unary_operator -> MINUS .)
    NOT             reduce using rule 80 (unary_operator -> MINUS .)
    ID              reduce using rule 80 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 80 (unary_operator -> MINUS .)
    ICONST          reduce using rule 80 (unary_operator -> MINUS .)
    FCONST          reduce using rule 80 (unary_operator -> MINUS .)


state 50

    (78) unary_operator -> TIMES .

    LPAREN          reduce using rule 78 (unary_operator -> TIMES .)
    PP              reduce using rule 78 (unary_operator -> TIMES .)
    MM              reduce using rule 78 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 78 (unary_operator -> TIMES .)
    TIMES           reduce using rule 78 (unary_operator -> TIMES .)
    PLUS            reduce using rule 78 (unary_operator -> TIMES .)
    MINUS           reduce using rule 78 (unary_operator -> TIMES .)
    NOT             reduce using rule 78 (unary_operator -> TIMES .)
    ID              reduce using rule 78 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 78 (unary_operator -> TIMES .)
    ICONST          reduce using rule 78 (unary_operator -> TIMES .)
    FCONST          reduce using rule 78 (unary_operator -> TIMES .)


state 51

    (126) expr -> LPAREN . expr RPAREN
    (46) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (60) primary_expression -> LPAREN . expression RPAREN
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 94
    type_specifier                 shift and go to state 95
    cast_expression                shift and go to state 47
    expression                     shift and go to state 96
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 98
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 52

    (45) cast_expression -> unary_expression .

    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    GT              reduce using rule 45 (cast_expression -> unary_expression .)
    GET             reduce using rule 45 (cast_expression -> unary_expression .)
    LT              reduce using rule 45 (cast_expression -> unary_expression .)
    LET             reduce using rule 45 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 45 (cast_expression -> unary_expression .)
    AND             reduce using rule 45 (cast_expression -> unary_expression .)
    OR              reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 45 (cast_expression -> unary_expression .)
    TASSIGN         reduce using rule 45 (cast_expression -> unary_expression .)
    DASSIGN         reduce using rule 45 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 45 (cast_expression -> unary_expression .)
    PASSIGN         reduce using rule 45 (cast_expression -> unary_expression .)
    MINASSIGN       reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 45 (cast_expression -> unary_expression .)
    ID              reduce using rule 45 (cast_expression -> unary_expression .)
    LBRACK          reduce using rule 45 (cast_expression -> unary_expression .)
    IF              reduce using rule 45 (cast_expression -> unary_expression .)
    WHILE           reduce using rule 45 (cast_expression -> unary_expression .)
    FOR             reduce using rule 45 (cast_expression -> unary_expression .)
    BREAK           reduce using rule 45 (cast_expression -> unary_expression .)
    RETURN          reduce using rule 45 (cast_expression -> unary_expression .)
    ASSERT          reduce using rule 45 (cast_expression -> unary_expression .)
    PRINT           reduce using rule 45 (cast_expression -> unary_expression .)
    READ            reduce using rule 45 (cast_expression -> unary_expression .)
    LPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    PP              reduce using rule 45 (cast_expression -> unary_expression .)
    MM              reduce using rule 45 (cast_expression -> unary_expression .)
    ADDRESS         reduce using rule 45 (cast_expression -> unary_expression .)
    NOT             reduce using rule 45 (cast_expression -> unary_expression .)
    STRING_LITERAL  reduce using rule 45 (cast_expression -> unary_expression .)
    ICONST          reduce using rule 45 (cast_expression -> unary_expression .)
    FCONST          reduce using rule 45 (cast_expression -> unary_expression .)
    ELSE            reduce using rule 45 (cast_expression -> unary_expression .)


state 53

    (47) unary_expression -> postfix_expression .
    (52) postfix_expression -> postfix_expression . LBRACE expression RBRACE
    (53) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (54) postfix_expression -> postfix_expression . LBRACE RBRACE
    (55) postfix_expression -> postfix_expression . PP
    (56) postfix_expression -> postfix_expression . MM

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PP resolved as shift
  ! shift/reduce conflict for MM resolved as shift
    PLUS            reduce using rule 47 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 47 (unary_expression -> postfix_expression .)
    TIMES           reduce using rule 47 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 47 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 47 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 47 (unary_expression -> postfix_expression .)
    GT              reduce using rule 47 (unary_expression -> postfix_expression .)
    GET             reduce using rule 47 (unary_expression -> postfix_expression .)
    LT              reduce using rule 47 (unary_expression -> postfix_expression .)
    LET             reduce using rule 47 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 47 (unary_expression -> postfix_expression .)
    AND             reduce using rule 47 (unary_expression -> postfix_expression .)
    OR              reduce using rule 47 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 47 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 47 (unary_expression -> postfix_expression .)
    TASSIGN         reduce using rule 47 (unary_expression -> postfix_expression .)
    DASSIGN         reduce using rule 47 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 47 (unary_expression -> postfix_expression .)
    PASSIGN         reduce using rule 47 (unary_expression -> postfix_expression .)
    MINASSIGN       reduce using rule 47 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 47 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 47 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 47 (unary_expression -> postfix_expression .)
    RBRACK          reduce using rule 47 (unary_expression -> postfix_expression .)
    ID              reduce using rule 47 (unary_expression -> postfix_expression .)
    LBRACK          reduce using rule 47 (unary_expression -> postfix_expression .)
    IF              reduce using rule 47 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 47 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 47 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 47 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 47 (unary_expression -> postfix_expression .)
    ASSERT          reduce using rule 47 (unary_expression -> postfix_expression .)
    PRINT           reduce using rule 47 (unary_expression -> postfix_expression .)
    READ            reduce using rule 47 (unary_expression -> postfix_expression .)
    ADDRESS         reduce using rule 47 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 47 (unary_expression -> postfix_expression .)
    STRING_LITERAL  reduce using rule 47 (unary_expression -> postfix_expression .)
    ICONST          reduce using rule 47 (unary_expression -> postfix_expression .)
    FCONST          reduce using rule 47 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 47 (unary_expression -> postfix_expression .)
    LBRACE          shift and go to state 99
    LPAREN          shift and go to state 100
    PP              shift and go to state 101
    MM              shift and go to state 102

  ! LPAREN          [ reduce using rule 47 (unary_expression -> postfix_expression .) ]
  ! PP              [ reduce using rule 47 (unary_expression -> postfix_expression .) ]
  ! MM              [ reduce using rule 47 (unary_expression -> postfix_expression .) ]


state 54

    (48) unary_expression -> PP . unary_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    LPAREN          shift and go to state 104
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 55

    (49) unary_expression -> MM . unary_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    LPAREN          shift and go to state 104
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 56

    (50) unary_expression -> unary_operator . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 107
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    unary_operator                 shift and go to state 56
    cast_expression                shift and go to state 106
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 57

    (51) postfix_expression -> primary_expression .

    LBRACE          reduce using rule 51 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 51 (postfix_expression -> primary_expression .)
    PP              reduce using rule 51 (postfix_expression -> primary_expression .)
    MM              reduce using rule 51 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 51 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 51 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 51 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 51 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 51 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 51 (postfix_expression -> primary_expression .)
    GT              reduce using rule 51 (postfix_expression -> primary_expression .)
    GET             reduce using rule 51 (postfix_expression -> primary_expression .)
    LT              reduce using rule 51 (postfix_expression -> primary_expression .)
    LET             reduce using rule 51 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 51 (postfix_expression -> primary_expression .)
    AND             reduce using rule 51 (postfix_expression -> primary_expression .)
    OR              reduce using rule 51 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 51 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 51 (postfix_expression -> primary_expression .)
    TASSIGN         reduce using rule 51 (postfix_expression -> primary_expression .)
    DASSIGN         reduce using rule 51 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 51 (postfix_expression -> primary_expression .)
    PASSIGN         reduce using rule 51 (postfix_expression -> primary_expression .)
    MINASSIGN       reduce using rule 51 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 51 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 51 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 51 (postfix_expression -> primary_expression .)
    RBRACK          reduce using rule 51 (postfix_expression -> primary_expression .)
    ID              reduce using rule 51 (postfix_expression -> primary_expression .)
    LBRACK          reduce using rule 51 (postfix_expression -> primary_expression .)
    IF              reduce using rule 51 (postfix_expression -> primary_expression .)
    WHILE           reduce using rule 51 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 51 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 51 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 51 (postfix_expression -> primary_expression .)
    ASSERT          reduce using rule 51 (postfix_expression -> primary_expression .)
    PRINT           reduce using rule 51 (postfix_expression -> primary_expression .)
    READ            reduce using rule 51 (postfix_expression -> primary_expression .)
    ADDRESS         reduce using rule 51 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 51 (postfix_expression -> primary_expression .)
    STRING_LITERAL  reduce using rule 51 (postfix_expression -> primary_expression .)
    ICONST          reduce using rule 51 (postfix_expression -> primary_expression .)
    FCONST          reduce using rule 51 (postfix_expression -> primary_expression .)
    ELSE            reduce using rule 51 (postfix_expression -> primary_expression .)


state 58

    (77) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 77 (unary_operator -> ADDRESS .)
    PP              reduce using rule 77 (unary_operator -> ADDRESS .)
    MM              reduce using rule 77 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 77 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 77 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 77 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 77 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 77 (unary_operator -> ADDRESS .)
    ID              reduce using rule 77 (unary_operator -> ADDRESS .)
    STRING_LITERAL  reduce using rule 77 (unary_operator -> ADDRESS .)
    ICONST          reduce using rule 77 (unary_operator -> ADDRESS .)
    FCONST          reduce using rule 77 (unary_operator -> ADDRESS .)


state 59

    (81) unary_operator -> NOT .

    LPAREN          reduce using rule 81 (unary_operator -> NOT .)
    PP              reduce using rule 81 (unary_operator -> NOT .)
    MM              reduce using rule 81 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 81 (unary_operator -> NOT .)
    TIMES           reduce using rule 81 (unary_operator -> NOT .)
    PLUS            reduce using rule 81 (unary_operator -> NOT .)
    MINUS           reduce using rule 81 (unary_operator -> NOT .)
    NOT             reduce using rule 81 (unary_operator -> NOT .)
    ID              reduce using rule 81 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 81 (unary_operator -> NOT .)
    ICONST          reduce using rule 81 (unary_operator -> NOT .)
    FCONST          reduce using rule 81 (unary_operator -> NOT .)


state 60

    (57) primary_expression -> ID .

    LBRACE          reduce using rule 57 (primary_expression -> ID .)
    LPAREN          reduce using rule 57 (primary_expression -> ID .)
    PP              reduce using rule 57 (primary_expression -> ID .)
    MM              reduce using rule 57 (primary_expression -> ID .)
    PLUS            reduce using rule 57 (primary_expression -> ID .)
    MINUS           reduce using rule 57 (primary_expression -> ID .)
    TIMES           reduce using rule 57 (primary_expression -> ID .)
    DIVIDE          reduce using rule 57 (primary_expression -> ID .)
    EQUALS          reduce using rule 57 (primary_expression -> ID .)
    MOD             reduce using rule 57 (primary_expression -> ID .)
    GT              reduce using rule 57 (primary_expression -> ID .)
    GET             reduce using rule 57 (primary_expression -> ID .)
    LT              reduce using rule 57 (primary_expression -> ID .)
    LET             reduce using rule 57 (primary_expression -> ID .)
    DIFF            reduce using rule 57 (primary_expression -> ID .)
    AND             reduce using rule 57 (primary_expression -> ID .)
    OR              reduce using rule 57 (primary_expression -> ID .)
    RBRACE          reduce using rule 57 (primary_expression -> ID .)
    ASSIGN          reduce using rule 57 (primary_expression -> ID .)
    TASSIGN         reduce using rule 57 (primary_expression -> ID .)
    DASSIGN         reduce using rule 57 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 57 (primary_expression -> ID .)
    PASSIGN         reduce using rule 57 (primary_expression -> ID .)
    MINASSIGN       reduce using rule 57 (primary_expression -> ID .)
    COMMA           reduce using rule 57 (primary_expression -> ID .)
    SEMI            reduce using rule 57 (primary_expression -> ID .)
    RPAREN          reduce using rule 57 (primary_expression -> ID .)
    RBRACK          reduce using rule 57 (primary_expression -> ID .)
    ID              reduce using rule 57 (primary_expression -> ID .)
    LBRACK          reduce using rule 57 (primary_expression -> ID .)
    IF              reduce using rule 57 (primary_expression -> ID .)
    WHILE           reduce using rule 57 (primary_expression -> ID .)
    FOR             reduce using rule 57 (primary_expression -> ID .)
    BREAK           reduce using rule 57 (primary_expression -> ID .)
    RETURN          reduce using rule 57 (primary_expression -> ID .)
    ASSERT          reduce using rule 57 (primary_expression -> ID .)
    PRINT           reduce using rule 57 (primary_expression -> ID .)
    READ            reduce using rule 57 (primary_expression -> ID .)
    ADDRESS         reduce using rule 57 (primary_expression -> ID .)
    NOT             reduce using rule 57 (primary_expression -> ID .)
    STRING_LITERAL  reduce using rule 57 (primary_expression -> ID .)
    ICONST          reduce using rule 57 (primary_expression -> ID .)
    FCONST          reduce using rule 57 (primary_expression -> ID .)
    ELSE            reduce using rule 57 (primary_expression -> ID .)


state 61

    (58) primary_expression -> constant .

    LBRACE          reduce using rule 58 (primary_expression -> constant .)
    LPAREN          reduce using rule 58 (primary_expression -> constant .)
    PP              reduce using rule 58 (primary_expression -> constant .)
    MM              reduce using rule 58 (primary_expression -> constant .)
    PLUS            reduce using rule 58 (primary_expression -> constant .)
    MINUS           reduce using rule 58 (primary_expression -> constant .)
    TIMES           reduce using rule 58 (primary_expression -> constant .)
    DIVIDE          reduce using rule 58 (primary_expression -> constant .)
    EQUALS          reduce using rule 58 (primary_expression -> constant .)
    MOD             reduce using rule 58 (primary_expression -> constant .)
    GT              reduce using rule 58 (primary_expression -> constant .)
    GET             reduce using rule 58 (primary_expression -> constant .)
    LT              reduce using rule 58 (primary_expression -> constant .)
    LET             reduce using rule 58 (primary_expression -> constant .)
    DIFF            reduce using rule 58 (primary_expression -> constant .)
    AND             reduce using rule 58 (primary_expression -> constant .)
    OR              reduce using rule 58 (primary_expression -> constant .)
    RBRACE          reduce using rule 58 (primary_expression -> constant .)
    ASSIGN          reduce using rule 58 (primary_expression -> constant .)
    TASSIGN         reduce using rule 58 (primary_expression -> constant .)
    DASSIGN         reduce using rule 58 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 58 (primary_expression -> constant .)
    PASSIGN         reduce using rule 58 (primary_expression -> constant .)
    MINASSIGN       reduce using rule 58 (primary_expression -> constant .)
    COMMA           reduce using rule 58 (primary_expression -> constant .)
    SEMI            reduce using rule 58 (primary_expression -> constant .)
    RPAREN          reduce using rule 58 (primary_expression -> constant .)
    RBRACK          reduce using rule 58 (primary_expression -> constant .)
    ID              reduce using rule 58 (primary_expression -> constant .)
    LBRACK          reduce using rule 58 (primary_expression -> constant .)
    IF              reduce using rule 58 (primary_expression -> constant .)
    WHILE           reduce using rule 58 (primary_expression -> constant .)
    FOR             reduce using rule 58 (primary_expression -> constant .)
    BREAK           reduce using rule 58 (primary_expression -> constant .)
    RETURN          reduce using rule 58 (primary_expression -> constant .)
    ASSERT          reduce using rule 58 (primary_expression -> constant .)
    PRINT           reduce using rule 58 (primary_expression -> constant .)
    READ            reduce using rule 58 (primary_expression -> constant .)
    ADDRESS         reduce using rule 58 (primary_expression -> constant .)
    NOT             reduce using rule 58 (primary_expression -> constant .)
    STRING_LITERAL  reduce using rule 58 (primary_expression -> constant .)
    ICONST          reduce using rule 58 (primary_expression -> constant .)
    FCONST          reduce using rule 58 (primary_expression -> constant .)
    ELSE            reduce using rule 58 (primary_expression -> constant .)


state 62

    (59) primary_expression -> STRING_LITERAL .

    LBRACE          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    LPAREN          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    PP              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    MM              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    TIMES           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    EQUALS          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    GT              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    GET             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    LT              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    LET             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    DIFF            reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ASSIGN          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    TASSIGN         reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    DASSIGN         reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    MODASSIGN       reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    PASSIGN         reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    MINASSIGN       reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    SEMI            reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    RBRACK          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ID              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    LBRACK          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    IF              reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    WHILE           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    FOR             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    BREAK           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    RETURN          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ASSERT          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    PRINT           reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    READ            reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ADDRESS         reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    NOT             reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ICONST          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    FCONST          reduce using rule 59 (primary_expression -> STRING_LITERAL .)
    ELSE            reduce using rule 59 (primary_expression -> STRING_LITERAL .)


state 63

    (61) constant -> ICONST .

    LBRACE          reduce using rule 61 (constant -> ICONST .)
    LPAREN          reduce using rule 61 (constant -> ICONST .)
    PP              reduce using rule 61 (constant -> ICONST .)
    MM              reduce using rule 61 (constant -> ICONST .)
    PLUS            reduce using rule 61 (constant -> ICONST .)
    MINUS           reduce using rule 61 (constant -> ICONST .)
    TIMES           reduce using rule 61 (constant -> ICONST .)
    DIVIDE          reduce using rule 61 (constant -> ICONST .)
    EQUALS          reduce using rule 61 (constant -> ICONST .)
    MOD             reduce using rule 61 (constant -> ICONST .)
    GT              reduce using rule 61 (constant -> ICONST .)
    GET             reduce using rule 61 (constant -> ICONST .)
    LT              reduce using rule 61 (constant -> ICONST .)
    LET             reduce using rule 61 (constant -> ICONST .)
    DIFF            reduce using rule 61 (constant -> ICONST .)
    AND             reduce using rule 61 (constant -> ICONST .)
    OR              reduce using rule 61 (constant -> ICONST .)
    RBRACE          reduce using rule 61 (constant -> ICONST .)
    ASSIGN          reduce using rule 61 (constant -> ICONST .)
    TASSIGN         reduce using rule 61 (constant -> ICONST .)
    DASSIGN         reduce using rule 61 (constant -> ICONST .)
    MODASSIGN       reduce using rule 61 (constant -> ICONST .)
    PASSIGN         reduce using rule 61 (constant -> ICONST .)
    MINASSIGN       reduce using rule 61 (constant -> ICONST .)
    COMMA           reduce using rule 61 (constant -> ICONST .)
    SEMI            reduce using rule 61 (constant -> ICONST .)
    RPAREN          reduce using rule 61 (constant -> ICONST .)
    RBRACK          reduce using rule 61 (constant -> ICONST .)
    ID              reduce using rule 61 (constant -> ICONST .)
    LBRACK          reduce using rule 61 (constant -> ICONST .)
    IF              reduce using rule 61 (constant -> ICONST .)
    WHILE           reduce using rule 61 (constant -> ICONST .)
    FOR             reduce using rule 61 (constant -> ICONST .)
    BREAK           reduce using rule 61 (constant -> ICONST .)
    RETURN          reduce using rule 61 (constant -> ICONST .)
    ASSERT          reduce using rule 61 (constant -> ICONST .)
    PRINT           reduce using rule 61 (constant -> ICONST .)
    READ            reduce using rule 61 (constant -> ICONST .)
    ADDRESS         reduce using rule 61 (constant -> ICONST .)
    NOT             reduce using rule 61 (constant -> ICONST .)
    STRING_LITERAL  reduce using rule 61 (constant -> ICONST .)
    ICONST          reduce using rule 61 (constant -> ICONST .)
    FCONST          reduce using rule 61 (constant -> ICONST .)
    ELSE            reduce using rule 61 (constant -> ICONST .)


state 64

    (62) constant -> FCONST .

    LBRACE          reduce using rule 62 (constant -> FCONST .)
    LPAREN          reduce using rule 62 (constant -> FCONST .)
    PP              reduce using rule 62 (constant -> FCONST .)
    MM              reduce using rule 62 (constant -> FCONST .)
    PLUS            reduce using rule 62 (constant -> FCONST .)
    MINUS           reduce using rule 62 (constant -> FCONST .)
    TIMES           reduce using rule 62 (constant -> FCONST .)
    DIVIDE          reduce using rule 62 (constant -> FCONST .)
    EQUALS          reduce using rule 62 (constant -> FCONST .)
    MOD             reduce using rule 62 (constant -> FCONST .)
    GT              reduce using rule 62 (constant -> FCONST .)
    GET             reduce using rule 62 (constant -> FCONST .)
    LT              reduce using rule 62 (constant -> FCONST .)
    LET             reduce using rule 62 (constant -> FCONST .)
    DIFF            reduce using rule 62 (constant -> FCONST .)
    AND             reduce using rule 62 (constant -> FCONST .)
    OR              reduce using rule 62 (constant -> FCONST .)
    RBRACE          reduce using rule 62 (constant -> FCONST .)
    ASSIGN          reduce using rule 62 (constant -> FCONST .)
    TASSIGN         reduce using rule 62 (constant -> FCONST .)
    DASSIGN         reduce using rule 62 (constant -> FCONST .)
    MODASSIGN       reduce using rule 62 (constant -> FCONST .)
    PASSIGN         reduce using rule 62 (constant -> FCONST .)
    MINASSIGN       reduce using rule 62 (constant -> FCONST .)
    COMMA           reduce using rule 62 (constant -> FCONST .)
    SEMI            reduce using rule 62 (constant -> FCONST .)
    RPAREN          reduce using rule 62 (constant -> FCONST .)
    RBRACK          reduce using rule 62 (constant -> FCONST .)
    ID              reduce using rule 62 (constant -> FCONST .)
    LBRACK          reduce using rule 62 (constant -> FCONST .)
    IF              reduce using rule 62 (constant -> FCONST .)
    WHILE           reduce using rule 62 (constant -> FCONST .)
    FOR             reduce using rule 62 (constant -> FCONST .)
    BREAK           reduce using rule 62 (constant -> FCONST .)
    RETURN          reduce using rule 62 (constant -> FCONST .)
    ASSERT          reduce using rule 62 (constant -> FCONST .)
    PRINT           reduce using rule 62 (constant -> FCONST .)
    READ            reduce using rule 62 (constant -> FCONST .)
    ADDRESS         reduce using rule 62 (constant -> FCONST .)
    NOT             reduce using rule 62 (constant -> FCONST .)
    STRING_LITERAL  reduce using rule 62 (constant -> FCONST .)
    ICONST          reduce using rule 62 (constant -> FCONST .)
    FCONST          reduce using rule 62 (constant -> FCONST .)
    ELSE            reduce using rule 62 (constant -> FCONST .)


state 65

    (22) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (83) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 108
    COMMA           shift and go to state 109


state 66

    (23) direct_declarator -> direct_declarator LPAREN identifier_list_opt . RPAREN

    RPAREN          shift and go to state 110


state 67

    (82) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 82 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 82 (parameter_list -> parameter_declaration .)


state 68

    (29) identifier_list_opt -> identifier_list .
    (27) identifier_list -> identifier_list . ID

    RPAREN          reduce using rule 29 (identifier_list_opt -> identifier_list .)
    ID              shift and go to state 111


state 69

    (30) identifier_list_opt -> empty .

    RPAREN          reduce using rule 30 (identifier_list_opt -> empty .)


state 70

    (84) parameter_declaration -> type_specifier . declarator
    (14) declarator -> . pointer direct_declarator
    (15) declarator -> . direct_declarator
    (16) pointer -> . TIMES pointer_opt
    (19) direct_declarator -> . ID
    (20) direct_declarator -> . LPAREN declarator RPAREN
    (21) direct_declarator -> . direct_declarator LBRACE constant_exp_opt RBRACE
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LPAREN identifier_list_opt RPAREN

    TIMES           shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19

    declarator                     shift and go to state 112
    pointer                        shift and go to state 15
    direct_declarator              shift and go to state 16

state 71

    (28) identifier_list -> ID .

    ID              reduce using rule 28 (identifier_list -> ID .)
    RPAREN          reduce using rule 28 (identifier_list -> ID .)


state 72

    (20) direct_declarator -> LPAREN declarator RPAREN .

    LBRACE          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACK          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 20 (direct_declarator -> LPAREN declarator RPAREN .)


state 73

    (93) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 93 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 93 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 74

    (91) init_declarator -> declarator ASSIGN initializer .

    COMMA           reduce using rule 91 (init_declarator -> declarator ASSIGN initializer .)
    SEMI            reduce using rule 91 (init_declarator -> declarator ASSIGN initializer .)


state 75

    (96) initializer -> assignment_expression .

    COMMA           reduce using rule 96 (initializer -> assignment_expression .)
    SEMI            reduce using rule 96 (initializer -> assignment_expression .)
    RBRACK          reduce using rule 96 (initializer -> assignment_expression .)


state 76

    (97) initializer -> LBRACK . initializer_list RBRACK
    (98) initializer -> LBRACK . initializer_list COMMA RBRACK
    (99) initializer_list -> . initializer
    (100) initializer_list -> . initializer_list COMMA initializer
    (96) initializer -> . assignment_expression
    (97) initializer -> . LBRACK initializer_list RBRACK
    (98) initializer -> . LBRACK initializer_list COMMA RBRACK
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LBRACK          shift and go to state 76
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    initializer_list               shift and go to state 113
    initializer                    shift and go to state 114
    assignment_expression          shift and go to state 75
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 77

    (67) assignment_expression -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    COMMA           reduce using rule 67 (assignment_expression -> expr .)
    SEMI            reduce using rule 67 (assignment_expression -> expr .)
    RBRACK          reduce using rule 67 (assignment_expression -> expr .)
    RBRACE          reduce using rule 67 (assignment_expression -> expr .)
    RPAREN          reduce using rule 67 (assignment_expression -> expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93


state 78

    (68) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (45) cast_expression -> unary_expression .
    (71) assignment_operator -> . ASSIGN
    (72) assignment_operator -> . TASSIGN
    (73) assignment_operator -> . DASSIGN
    (74) assignment_operator -> . MODASSIGN
    (75) assignment_operator -> . PASSIGN
    (76) assignment_operator -> . MINASSIGN

    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    GT              reduce using rule 45 (cast_expression -> unary_expression .)
    GET             reduce using rule 45 (cast_expression -> unary_expression .)
    LT              reduce using rule 45 (cast_expression -> unary_expression .)
    LET             reduce using rule 45 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 45 (cast_expression -> unary_expression .)
    AND             reduce using rule 45 (cast_expression -> unary_expression .)
    OR              reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACK          reduce using rule 45 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 45 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 116
    TASSIGN         shift and go to state 117
    DASSIGN         shift and go to state 118
    MODASSIGN       shift and go to state 119
    PASSIGN         shift and go to state 120
    MINASSIGN       shift and go to state 121

    assignment_operator            shift and go to state 115

state 79

    (101) compound_statement -> LBRACK declaration_list_opt . statement_list_opt RBRACK
    (123) statement_list_opt -> . statement_list
    (124) statement_list_opt -> . empty
    (121) statement_list -> . statement_list statement
    (122) statement_list -> . statement
    (1) empty -> .
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RBRACK          reduce using rule 1 (empty -> .)
    SEMI            reduce using rule 1 (empty -> .)
    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    statement_list_opt             shift and go to state 122
    statement_list                 shift and go to state 123
    empty                          shift and go to state 124
    statement                      shift and go to state 125
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression_opt                 shift and go to state 135
    expression                     shift and go to state 137
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 80

    (21) direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .

    LBRACE          reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    LPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    VOID            reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    CHAR            reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    INT             reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    FLOAT           reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    LBRACK          reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    ASSIGN          reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    COMMA           reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    SEMI            reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)
    RPAREN          reduce using rule 21 (direct_declarator -> direct_declarator LBRACE constant_exp_opt RBRACE .)


state 81

    (32) expr -> expr PLUS . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 145
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 82

    (33) expr -> expr MINUS . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 146
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 83

    (34) expr -> expr TIMES . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 147
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 84

    (35) expr -> expr DIVIDE . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 148
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 85

    (36) expr -> expr EQUALS . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 149
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 86

    (37) expr -> expr MOD . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 150
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 87

    (38) expr -> expr GT . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 151
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 88

    (39) expr -> expr GET . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 152
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 89

    (40) expr -> expr LT . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 153
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 90

    (41) expr -> expr LET . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 154
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 91

    (42) expr -> expr DIFF . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 155
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 92

    (43) expr -> expr AND . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 156
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 93

    (44) expr -> expr OR . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 157
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 94

    (126) expr -> LPAREN expr . RPAREN
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr
    (67) assignment_expression -> expr .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 158
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93
    COMMA           reduce using rule 67 (assignment_expression -> expr .)

  ! RPAREN          [ reduce using rule 67 (assignment_expression -> expr .) ]


state 95

    (46) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 159


state 96

    (60) primary_expression -> LPAREN expression . RPAREN
    (64) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161


state 97

    (63) expression -> assignment_expression .

    RPAREN          reduce using rule 63 (expression -> assignment_expression .)
    COMMA           reduce using rule 63 (expression -> assignment_expression .)
    SEMI            reduce using rule 63 (expression -> assignment_expression .)
    RBRACE          reduce using rule 63 (expression -> assignment_expression .)


state 98

    (45) cast_expression -> unary_expression .
    (68) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (71) assignment_operator -> . ASSIGN
    (72) assignment_operator -> . TASSIGN
    (73) assignment_operator -> . DASSIGN
    (74) assignment_operator -> . MODASSIGN
    (75) assignment_operator -> . PASSIGN
    (76) assignment_operator -> . MINASSIGN

    RPAREN          reduce using rule 45 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 45 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 45 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 45 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 45 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 45 (cast_expression -> unary_expression .)
    MOD             reduce using rule 45 (cast_expression -> unary_expression .)
    GT              reduce using rule 45 (cast_expression -> unary_expression .)
    GET             reduce using rule 45 (cast_expression -> unary_expression .)
    LT              reduce using rule 45 (cast_expression -> unary_expression .)
    LET             reduce using rule 45 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 45 (cast_expression -> unary_expression .)
    AND             reduce using rule 45 (cast_expression -> unary_expression .)
    OR              reduce using rule 45 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 45 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 116
    TASSIGN         shift and go to state 117
    DASSIGN         shift and go to state 118
    MODASSIGN       shift and go to state 119
    PASSIGN         shift and go to state 120
    MINASSIGN       shift and go to state 121

    assignment_operator            shift and go to state 115

state 99

    (52) postfix_expression -> postfix_expression LBRACE . expression RBRACE
    (54) postfix_expression -> postfix_expression LBRACE . RBRACE
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RBRACE          shift and go to state 163
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    postfix_expression             shift and go to state 53
    expression                     shift and go to state 162
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 100

    (53) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (69) argument_expression -> . assignment_expression
    (70) argument_expression -> . argument_expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    postfix_expression             shift and go to state 53
    argument_expression            shift and go to state 164
    assignment_expression          shift and go to state 165
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 101

    (55) postfix_expression -> postfix_expression PP .

    LBRACE          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    LPAREN          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    PP              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    MM              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    PLUS            reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    MINUS           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    TIMES           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    DIVIDE          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    EQUALS          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    MOD             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    GT              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    GET             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    LT              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    LET             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    DIFF            reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    AND             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    OR              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    RBRACE          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ASSIGN          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    TASSIGN         reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    DASSIGN         reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    MODASSIGN       reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    PASSIGN         reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    MINASSIGN       reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    COMMA           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    SEMI            reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    RPAREN          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    RBRACK          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ID              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    LBRACK          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    IF              reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    WHILE           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    FOR             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    BREAK           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    RETURN          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ASSERT          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    PRINT           reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    READ            reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ADDRESS         reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    NOT             reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    STRING_LITERAL  reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ICONST          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    FCONST          reduce using rule 55 (postfix_expression -> postfix_expression PP .)
    ELSE            reduce using rule 55 (postfix_expression -> postfix_expression PP .)


state 102

    (56) postfix_expression -> postfix_expression MM .

    LBRACE          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    LPAREN          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    PP              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    MM              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    PLUS            reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    MINUS           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    TIMES           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    DIVIDE          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    EQUALS          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    MOD             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    GT              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    GET             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    LT              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    LET             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    DIFF            reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    AND             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    OR              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    RBRACE          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ASSIGN          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    TASSIGN         reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    DASSIGN         reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    MODASSIGN       reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    PASSIGN         reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    MINASSIGN       reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    COMMA           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    SEMI            reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    RPAREN          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    RBRACK          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ID              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    LBRACK          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    IF              reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    WHILE           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    FOR             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    BREAK           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    RETURN          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ASSERT          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    PRINT           reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    READ            reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ADDRESS         reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    NOT             reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    STRING_LITERAL  reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ICONST          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    FCONST          reduce using rule 56 (postfix_expression -> postfix_expression MM .)
    ELSE            reduce using rule 56 (postfix_expression -> postfix_expression MM .)


state 103

    (48) unary_expression -> PP unary_expression .

    PLUS            reduce using rule 48 (unary_expression -> PP unary_expression .)
    MINUS           reduce using rule 48 (unary_expression -> PP unary_expression .)
    TIMES           reduce using rule 48 (unary_expression -> PP unary_expression .)
    DIVIDE          reduce using rule 48 (unary_expression -> PP unary_expression .)
    EQUALS          reduce using rule 48 (unary_expression -> PP unary_expression .)
    MOD             reduce using rule 48 (unary_expression -> PP unary_expression .)
    GT              reduce using rule 48 (unary_expression -> PP unary_expression .)
    GET             reduce using rule 48 (unary_expression -> PP unary_expression .)
    LT              reduce using rule 48 (unary_expression -> PP unary_expression .)
    LET             reduce using rule 48 (unary_expression -> PP unary_expression .)
    DIFF            reduce using rule 48 (unary_expression -> PP unary_expression .)
    AND             reduce using rule 48 (unary_expression -> PP unary_expression .)
    OR              reduce using rule 48 (unary_expression -> PP unary_expression .)
    RBRACE          reduce using rule 48 (unary_expression -> PP unary_expression .)
    ASSIGN          reduce using rule 48 (unary_expression -> PP unary_expression .)
    TASSIGN         reduce using rule 48 (unary_expression -> PP unary_expression .)
    DASSIGN         reduce using rule 48 (unary_expression -> PP unary_expression .)
    MODASSIGN       reduce using rule 48 (unary_expression -> PP unary_expression .)
    PASSIGN         reduce using rule 48 (unary_expression -> PP unary_expression .)
    MINASSIGN       reduce using rule 48 (unary_expression -> PP unary_expression .)
    COMMA           reduce using rule 48 (unary_expression -> PP unary_expression .)
    SEMI            reduce using rule 48 (unary_expression -> PP unary_expression .)
    RPAREN          reduce using rule 48 (unary_expression -> PP unary_expression .)
    RBRACK          reduce using rule 48 (unary_expression -> PP unary_expression .)
    ID              reduce using rule 48 (unary_expression -> PP unary_expression .)
    LBRACK          reduce using rule 48 (unary_expression -> PP unary_expression .)
    IF              reduce using rule 48 (unary_expression -> PP unary_expression .)
    WHILE           reduce using rule 48 (unary_expression -> PP unary_expression .)
    FOR             reduce using rule 48 (unary_expression -> PP unary_expression .)
    BREAK           reduce using rule 48 (unary_expression -> PP unary_expression .)
    RETURN          reduce using rule 48 (unary_expression -> PP unary_expression .)
    ASSERT          reduce using rule 48 (unary_expression -> PP unary_expression .)
    PRINT           reduce using rule 48 (unary_expression -> PP unary_expression .)
    READ            reduce using rule 48 (unary_expression -> PP unary_expression .)
    LPAREN          reduce using rule 48 (unary_expression -> PP unary_expression .)
    PP              reduce using rule 48 (unary_expression -> PP unary_expression .)
    MM              reduce using rule 48 (unary_expression -> PP unary_expression .)
    ADDRESS         reduce using rule 48 (unary_expression -> PP unary_expression .)
    NOT             reduce using rule 48 (unary_expression -> PP unary_expression .)
    STRING_LITERAL  reduce using rule 48 (unary_expression -> PP unary_expression .)
    ICONST          reduce using rule 48 (unary_expression -> PP unary_expression .)
    FCONST          reduce using rule 48 (unary_expression -> PP unary_expression .)
    ELSE            reduce using rule 48 (unary_expression -> PP unary_expression .)


state 104

    (60) primary_expression -> LPAREN . expression RPAREN
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 96
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 105

    (49) unary_expression -> MM unary_expression .

    PLUS            reduce using rule 49 (unary_expression -> MM unary_expression .)
    MINUS           reduce using rule 49 (unary_expression -> MM unary_expression .)
    TIMES           reduce using rule 49 (unary_expression -> MM unary_expression .)
    DIVIDE          reduce using rule 49 (unary_expression -> MM unary_expression .)
    EQUALS          reduce using rule 49 (unary_expression -> MM unary_expression .)
    MOD             reduce using rule 49 (unary_expression -> MM unary_expression .)
    GT              reduce using rule 49 (unary_expression -> MM unary_expression .)
    GET             reduce using rule 49 (unary_expression -> MM unary_expression .)
    LT              reduce using rule 49 (unary_expression -> MM unary_expression .)
    LET             reduce using rule 49 (unary_expression -> MM unary_expression .)
    DIFF            reduce using rule 49 (unary_expression -> MM unary_expression .)
    AND             reduce using rule 49 (unary_expression -> MM unary_expression .)
    OR              reduce using rule 49 (unary_expression -> MM unary_expression .)
    RBRACE          reduce using rule 49 (unary_expression -> MM unary_expression .)
    ASSIGN          reduce using rule 49 (unary_expression -> MM unary_expression .)
    TASSIGN         reduce using rule 49 (unary_expression -> MM unary_expression .)
    DASSIGN         reduce using rule 49 (unary_expression -> MM unary_expression .)
    MODASSIGN       reduce using rule 49 (unary_expression -> MM unary_expression .)
    PASSIGN         reduce using rule 49 (unary_expression -> MM unary_expression .)
    MINASSIGN       reduce using rule 49 (unary_expression -> MM unary_expression .)
    COMMA           reduce using rule 49 (unary_expression -> MM unary_expression .)
    SEMI            reduce using rule 49 (unary_expression -> MM unary_expression .)
    RPAREN          reduce using rule 49 (unary_expression -> MM unary_expression .)
    RBRACK          reduce using rule 49 (unary_expression -> MM unary_expression .)
    ID              reduce using rule 49 (unary_expression -> MM unary_expression .)
    LBRACK          reduce using rule 49 (unary_expression -> MM unary_expression .)
    IF              reduce using rule 49 (unary_expression -> MM unary_expression .)
    WHILE           reduce using rule 49 (unary_expression -> MM unary_expression .)
    FOR             reduce using rule 49 (unary_expression -> MM unary_expression .)
    BREAK           reduce using rule 49 (unary_expression -> MM unary_expression .)
    RETURN          reduce using rule 49 (unary_expression -> MM unary_expression .)
    ASSERT          reduce using rule 49 (unary_expression -> MM unary_expression .)
    PRINT           reduce using rule 49 (unary_expression -> MM unary_expression .)
    READ            reduce using rule 49 (unary_expression -> MM unary_expression .)
    LPAREN          reduce using rule 49 (unary_expression -> MM unary_expression .)
    PP              reduce using rule 49 (unary_expression -> MM unary_expression .)
    MM              reduce using rule 49 (unary_expression -> MM unary_expression .)
    ADDRESS         reduce using rule 49 (unary_expression -> MM unary_expression .)
    NOT             reduce using rule 49 (unary_expression -> MM unary_expression .)
    STRING_LITERAL  reduce using rule 49 (unary_expression -> MM unary_expression .)
    ICONST          reduce using rule 49 (unary_expression -> MM unary_expression .)
    FCONST          reduce using rule 49 (unary_expression -> MM unary_expression .)
    ELSE            reduce using rule 49 (unary_expression -> MM unary_expression .)


state 106

    (50) unary_expression -> unary_operator cast_expression .

    PLUS            reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    GET             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    LET             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    TASSIGN         reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    DASSIGN         reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    PASSIGN         reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    MINASSIGN       reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    RBRACK          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ID              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    LBRACK          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    IF              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    WHILE           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    FOR             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    BREAK           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    RETURN          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ASSERT          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    PRINT           reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    READ            reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    LPAREN          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    PP              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    MM              reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ADDRESS         reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    NOT             reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    STRING_LITERAL  reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ICONST          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    FCONST          reduce using rule 50 (unary_expression -> unary_operator cast_expression .)
    ELSE            reduce using rule 50 (unary_expression -> unary_operator cast_expression .)


state 107

    (46) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (60) primary_expression -> LPAREN . expression RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    type_specifier                 shift and go to state 95
    cast_expression                shift and go to state 47
    expression                     shift and go to state 96
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 108

    (22) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACK          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 109

    (83) parameter_list -> parameter_list COMMA . parameter_declaration
    (84) parameter_declaration -> . type_specifier declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 166
    type_specifier                 shift and go to state 70

state 110

    (23) direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .

    LBRACE          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    VOID            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    CHAR            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    INT             reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    FLOAT           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    LBRACK          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    ASSIGN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    COMMA           reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    SEMI            reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)
    RPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN .)


state 111

    (27) identifier_list -> identifier_list ID .

    ID              reduce using rule 27 (identifier_list -> identifier_list ID .)
    RPAREN          reduce using rule 27 (identifier_list -> identifier_list ID .)


state 112

    (84) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 84 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 84 (parameter_declaration -> type_specifier declarator .)


state 113

    (97) initializer -> LBRACK initializer_list . RBRACK
    (98) initializer -> LBRACK initializer_list . COMMA RBRACK
    (100) initializer_list -> initializer_list . COMMA initializer

    RBRACK          shift and go to state 167
    COMMA           shift and go to state 168


state 114

    (99) initializer_list -> initializer .

    RBRACK          reduce using rule 99 (initializer_list -> initializer .)
    COMMA           reduce using rule 99 (initializer_list -> initializer .)


state 115

    (68) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    unary_expression               shift and go to state 78
    assignment_expression          shift and go to state 169
    expr                           shift and go to state 77
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 116

    (71) assignment_operator -> ASSIGN .

    LPAREN          reduce using rule 71 (assignment_operator -> ASSIGN .)
    PP              reduce using rule 71 (assignment_operator -> ASSIGN .)
    MM              reduce using rule 71 (assignment_operator -> ASSIGN .)
    ADDRESS         reduce using rule 71 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 71 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 71 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 71 (assignment_operator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> ASSIGN .)
    ICONST          reduce using rule 71 (assignment_operator -> ASSIGN .)
    FCONST          reduce using rule 71 (assignment_operator -> ASSIGN .)


state 117

    (72) assignment_operator -> TASSIGN .

    LPAREN          reduce using rule 72 (assignment_operator -> TASSIGN .)
    PP              reduce using rule 72 (assignment_operator -> TASSIGN .)
    MM              reduce using rule 72 (assignment_operator -> TASSIGN .)
    ADDRESS         reduce using rule 72 (assignment_operator -> TASSIGN .)
    TIMES           reduce using rule 72 (assignment_operator -> TASSIGN .)
    PLUS            reduce using rule 72 (assignment_operator -> TASSIGN .)
    MINUS           reduce using rule 72 (assignment_operator -> TASSIGN .)
    NOT             reduce using rule 72 (assignment_operator -> TASSIGN .)
    ID              reduce using rule 72 (assignment_operator -> TASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> TASSIGN .)
    ICONST          reduce using rule 72 (assignment_operator -> TASSIGN .)
    FCONST          reduce using rule 72 (assignment_operator -> TASSIGN .)


state 118

    (73) assignment_operator -> DASSIGN .

    LPAREN          reduce using rule 73 (assignment_operator -> DASSIGN .)
    PP              reduce using rule 73 (assignment_operator -> DASSIGN .)
    MM              reduce using rule 73 (assignment_operator -> DASSIGN .)
    ADDRESS         reduce using rule 73 (assignment_operator -> DASSIGN .)
    TIMES           reduce using rule 73 (assignment_operator -> DASSIGN .)
    PLUS            reduce using rule 73 (assignment_operator -> DASSIGN .)
    MINUS           reduce using rule 73 (assignment_operator -> DASSIGN .)
    NOT             reduce using rule 73 (assignment_operator -> DASSIGN .)
    ID              reduce using rule 73 (assignment_operator -> DASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> DASSIGN .)
    ICONST          reduce using rule 73 (assignment_operator -> DASSIGN .)
    FCONST          reduce using rule 73 (assignment_operator -> DASSIGN .)


state 119

    (74) assignment_operator -> MODASSIGN .

    LPAREN          reduce using rule 74 (assignment_operator -> MODASSIGN .)
    PP              reduce using rule 74 (assignment_operator -> MODASSIGN .)
    MM              reduce using rule 74 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 74 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 74 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 74 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 74 (assignment_operator -> MODASSIGN .)
    NOT             reduce using rule 74 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 74 (assignment_operator -> MODASSIGN .)
    STRING_LITERAL  reduce using rule 74 (assignment_operator -> MODASSIGN .)
    ICONST          reduce using rule 74 (assignment_operator -> MODASSIGN .)
    FCONST          reduce using rule 74 (assignment_operator -> MODASSIGN .)


state 120

    (75) assignment_operator -> PASSIGN .

    LPAREN          reduce using rule 75 (assignment_operator -> PASSIGN .)
    PP              reduce using rule 75 (assignment_operator -> PASSIGN .)
    MM              reduce using rule 75 (assignment_operator -> PASSIGN .)
    ADDRESS         reduce using rule 75 (assignment_operator -> PASSIGN .)
    TIMES           reduce using rule 75 (assignment_operator -> PASSIGN .)
    PLUS            reduce using rule 75 (assignment_operator -> PASSIGN .)
    MINUS           reduce using rule 75 (assignment_operator -> PASSIGN .)
    NOT             reduce using rule 75 (assignment_operator -> PASSIGN .)
    ID              reduce using rule 75 (assignment_operator -> PASSIGN .)
    STRING_LITERAL  reduce using rule 75 (assignment_operator -> PASSIGN .)
    ICONST          reduce using rule 75 (assignment_operator -> PASSIGN .)
    FCONST          reduce using rule 75 (assignment_operator -> PASSIGN .)


state 121

    (76) assignment_operator -> MINASSIGN .

    LPAREN          reduce using rule 76 (assignment_operator -> MINASSIGN .)
    PP              reduce using rule 76 (assignment_operator -> MINASSIGN .)
    MM              reduce using rule 76 (assignment_operator -> MINASSIGN .)
    ADDRESS         reduce using rule 76 (assignment_operator -> MINASSIGN .)
    TIMES           reduce using rule 76 (assignment_operator -> MINASSIGN .)
    PLUS            reduce using rule 76 (assignment_operator -> MINASSIGN .)
    MINUS           reduce using rule 76 (assignment_operator -> MINASSIGN .)
    NOT             reduce using rule 76 (assignment_operator -> MINASSIGN .)
    ID              reduce using rule 76 (assignment_operator -> MINASSIGN .)
    STRING_LITERAL  reduce using rule 76 (assignment_operator -> MINASSIGN .)
    ICONST          reduce using rule 76 (assignment_operator -> MINASSIGN .)
    FCONST          reduce using rule 76 (assignment_operator -> MINASSIGN .)


state 122

    (101) compound_statement -> LBRACK declaration_list_opt statement_list_opt . RBRACK

    RBRACK          shift and go to state 170


state 123

    (123) statement_list_opt -> statement_list .
    (121) statement_list -> statement_list . statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RBRACK          reduce using rule 123 (statement_list_opt -> statement_list .)
    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    statement                      shift and go to state 171
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression_opt                 shift and go to state 135
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 124

    (124) statement_list_opt -> empty .
    (66) expression_opt -> empty .

    RBRACK          reduce using rule 124 (statement_list_opt -> empty .)
    SEMI            reduce using rule 66 (expression_opt -> empty .)


state 125

    (122) statement_list -> statement .

    ID              reduce using rule 122 (statement_list -> statement .)
    LBRACK          reduce using rule 122 (statement_list -> statement .)
    IF              reduce using rule 122 (statement_list -> statement .)
    WHILE           reduce using rule 122 (statement_list -> statement .)
    FOR             reduce using rule 122 (statement_list -> statement .)
    BREAK           reduce using rule 122 (statement_list -> statement .)
    RETURN          reduce using rule 122 (statement_list -> statement .)
    ASSERT          reduce using rule 122 (statement_list -> statement .)
    PRINT           reduce using rule 122 (statement_list -> statement .)
    READ            reduce using rule 122 (statement_list -> statement .)
    LPAREN          reduce using rule 122 (statement_list -> statement .)
    PP              reduce using rule 122 (statement_list -> statement .)
    MM              reduce using rule 122 (statement_list -> statement .)
    ADDRESS         reduce using rule 122 (statement_list -> statement .)
    TIMES           reduce using rule 122 (statement_list -> statement .)
    PLUS            reduce using rule 122 (statement_list -> statement .)
    MINUS           reduce using rule 122 (statement_list -> statement .)
    NOT             reduce using rule 122 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 122 (statement_list -> statement .)
    ICONST          reduce using rule 122 (statement_list -> statement .)
    FCONST          reduce using rule 122 (statement_list -> statement .)
    SEMI            reduce using rule 122 (statement_list -> statement .)
    RBRACK          reduce using rule 122 (statement_list -> statement .)


state 126

    (102) statement -> expression_statement .

    ID              reduce using rule 102 (statement -> expression_statement .)
    LBRACK          reduce using rule 102 (statement -> expression_statement .)
    IF              reduce using rule 102 (statement -> expression_statement .)
    WHILE           reduce using rule 102 (statement -> expression_statement .)
    FOR             reduce using rule 102 (statement -> expression_statement .)
    BREAK           reduce using rule 102 (statement -> expression_statement .)
    RETURN          reduce using rule 102 (statement -> expression_statement .)
    ASSERT          reduce using rule 102 (statement -> expression_statement .)
    PRINT           reduce using rule 102 (statement -> expression_statement .)
    READ            reduce using rule 102 (statement -> expression_statement .)
    LPAREN          reduce using rule 102 (statement -> expression_statement .)
    PP              reduce using rule 102 (statement -> expression_statement .)
    MM              reduce using rule 102 (statement -> expression_statement .)
    ADDRESS         reduce using rule 102 (statement -> expression_statement .)
    TIMES           reduce using rule 102 (statement -> expression_statement .)
    PLUS            reduce using rule 102 (statement -> expression_statement .)
    MINUS           reduce using rule 102 (statement -> expression_statement .)
    NOT             reduce using rule 102 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 102 (statement -> expression_statement .)
    ICONST          reduce using rule 102 (statement -> expression_statement .)
    FCONST          reduce using rule 102 (statement -> expression_statement .)
    SEMI            reduce using rule 102 (statement -> expression_statement .)
    RBRACK          reduce using rule 102 (statement -> expression_statement .)
    ELSE            reduce using rule 102 (statement -> expression_statement .)


state 127

    (103) statement -> compound_statement .

    ID              reduce using rule 103 (statement -> compound_statement .)
    LBRACK          reduce using rule 103 (statement -> compound_statement .)
    IF              reduce using rule 103 (statement -> compound_statement .)
    WHILE           reduce using rule 103 (statement -> compound_statement .)
    FOR             reduce using rule 103 (statement -> compound_statement .)
    BREAK           reduce using rule 103 (statement -> compound_statement .)
    RETURN          reduce using rule 103 (statement -> compound_statement .)
    ASSERT          reduce using rule 103 (statement -> compound_statement .)
    PRINT           reduce using rule 103 (statement -> compound_statement .)
    READ            reduce using rule 103 (statement -> compound_statement .)
    LPAREN          reduce using rule 103 (statement -> compound_statement .)
    PP              reduce using rule 103 (statement -> compound_statement .)
    MM              reduce using rule 103 (statement -> compound_statement .)
    ADDRESS         reduce using rule 103 (statement -> compound_statement .)
    TIMES           reduce using rule 103 (statement -> compound_statement .)
    PLUS            reduce using rule 103 (statement -> compound_statement .)
    MINUS           reduce using rule 103 (statement -> compound_statement .)
    NOT             reduce using rule 103 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 103 (statement -> compound_statement .)
    ICONST          reduce using rule 103 (statement -> compound_statement .)
    FCONST          reduce using rule 103 (statement -> compound_statement .)
    SEMI            reduce using rule 103 (statement -> compound_statement .)
    RBRACK          reduce using rule 103 (statement -> compound_statement .)
    ELSE            reduce using rule 103 (statement -> compound_statement .)


state 128

    (104) statement -> selection_statement .

    ID              reduce using rule 104 (statement -> selection_statement .)
    LBRACK          reduce using rule 104 (statement -> selection_statement .)
    IF              reduce using rule 104 (statement -> selection_statement .)
    WHILE           reduce using rule 104 (statement -> selection_statement .)
    FOR             reduce using rule 104 (statement -> selection_statement .)
    BREAK           reduce using rule 104 (statement -> selection_statement .)
    RETURN          reduce using rule 104 (statement -> selection_statement .)
    ASSERT          reduce using rule 104 (statement -> selection_statement .)
    PRINT           reduce using rule 104 (statement -> selection_statement .)
    READ            reduce using rule 104 (statement -> selection_statement .)
    LPAREN          reduce using rule 104 (statement -> selection_statement .)
    PP              reduce using rule 104 (statement -> selection_statement .)
    MM              reduce using rule 104 (statement -> selection_statement .)
    ADDRESS         reduce using rule 104 (statement -> selection_statement .)
    TIMES           reduce using rule 104 (statement -> selection_statement .)
    PLUS            reduce using rule 104 (statement -> selection_statement .)
    MINUS           reduce using rule 104 (statement -> selection_statement .)
    NOT             reduce using rule 104 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 104 (statement -> selection_statement .)
    ICONST          reduce using rule 104 (statement -> selection_statement .)
    FCONST          reduce using rule 104 (statement -> selection_statement .)
    SEMI            reduce using rule 104 (statement -> selection_statement .)
    RBRACK          reduce using rule 104 (statement -> selection_statement .)
    ELSE            reduce using rule 104 (statement -> selection_statement .)


state 129

    (105) statement -> iteration_statement .

    ID              reduce using rule 105 (statement -> iteration_statement .)
    LBRACK          reduce using rule 105 (statement -> iteration_statement .)
    IF              reduce using rule 105 (statement -> iteration_statement .)
    WHILE           reduce using rule 105 (statement -> iteration_statement .)
    FOR             reduce using rule 105 (statement -> iteration_statement .)
    BREAK           reduce using rule 105 (statement -> iteration_statement .)
    RETURN          reduce using rule 105 (statement -> iteration_statement .)
    ASSERT          reduce using rule 105 (statement -> iteration_statement .)
    PRINT           reduce using rule 105 (statement -> iteration_statement .)
    READ            reduce using rule 105 (statement -> iteration_statement .)
    LPAREN          reduce using rule 105 (statement -> iteration_statement .)
    PP              reduce using rule 105 (statement -> iteration_statement .)
    MM              reduce using rule 105 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 105 (statement -> iteration_statement .)
    TIMES           reduce using rule 105 (statement -> iteration_statement .)
    PLUS            reduce using rule 105 (statement -> iteration_statement .)
    MINUS           reduce using rule 105 (statement -> iteration_statement .)
    NOT             reduce using rule 105 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 105 (statement -> iteration_statement .)
    ICONST          reduce using rule 105 (statement -> iteration_statement .)
    FCONST          reduce using rule 105 (statement -> iteration_statement .)
    SEMI            reduce using rule 105 (statement -> iteration_statement .)
    RBRACK          reduce using rule 105 (statement -> iteration_statement .)
    ELSE            reduce using rule 105 (statement -> iteration_statement .)


state 130

    (106) statement -> jump_statement .

    ID              reduce using rule 106 (statement -> jump_statement .)
    LBRACK          reduce using rule 106 (statement -> jump_statement .)
    IF              reduce using rule 106 (statement -> jump_statement .)
    WHILE           reduce using rule 106 (statement -> jump_statement .)
    FOR             reduce using rule 106 (statement -> jump_statement .)
    BREAK           reduce using rule 106 (statement -> jump_statement .)
    RETURN          reduce using rule 106 (statement -> jump_statement .)
    ASSERT          reduce using rule 106 (statement -> jump_statement .)
    PRINT           reduce using rule 106 (statement -> jump_statement .)
    READ            reduce using rule 106 (statement -> jump_statement .)
    LPAREN          reduce using rule 106 (statement -> jump_statement .)
    PP              reduce using rule 106 (statement -> jump_statement .)
    MM              reduce using rule 106 (statement -> jump_statement .)
    ADDRESS         reduce using rule 106 (statement -> jump_statement .)
    TIMES           reduce using rule 106 (statement -> jump_statement .)
    PLUS            reduce using rule 106 (statement -> jump_statement .)
    MINUS           reduce using rule 106 (statement -> jump_statement .)
    NOT             reduce using rule 106 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 106 (statement -> jump_statement .)
    ICONST          reduce using rule 106 (statement -> jump_statement .)
    FCONST          reduce using rule 106 (statement -> jump_statement .)
    SEMI            reduce using rule 106 (statement -> jump_statement .)
    RBRACK          reduce using rule 106 (statement -> jump_statement .)
    ELSE            reduce using rule 106 (statement -> jump_statement .)


state 131

    (107) statement -> assert_statement .

    ID              reduce using rule 107 (statement -> assert_statement .)
    LBRACK          reduce using rule 107 (statement -> assert_statement .)
    IF              reduce using rule 107 (statement -> assert_statement .)
    WHILE           reduce using rule 107 (statement -> assert_statement .)
    FOR             reduce using rule 107 (statement -> assert_statement .)
    BREAK           reduce using rule 107 (statement -> assert_statement .)
    RETURN          reduce using rule 107 (statement -> assert_statement .)
    ASSERT          reduce using rule 107 (statement -> assert_statement .)
    PRINT           reduce using rule 107 (statement -> assert_statement .)
    READ            reduce using rule 107 (statement -> assert_statement .)
    LPAREN          reduce using rule 107 (statement -> assert_statement .)
    PP              reduce using rule 107 (statement -> assert_statement .)
    MM              reduce using rule 107 (statement -> assert_statement .)
    ADDRESS         reduce using rule 107 (statement -> assert_statement .)
    TIMES           reduce using rule 107 (statement -> assert_statement .)
    PLUS            reduce using rule 107 (statement -> assert_statement .)
    MINUS           reduce using rule 107 (statement -> assert_statement .)
    NOT             reduce using rule 107 (statement -> assert_statement .)
    STRING_LITERAL  reduce using rule 107 (statement -> assert_statement .)
    ICONST          reduce using rule 107 (statement -> assert_statement .)
    FCONST          reduce using rule 107 (statement -> assert_statement .)
    SEMI            reduce using rule 107 (statement -> assert_statement .)
    RBRACK          reduce using rule 107 (statement -> assert_statement .)
    ELSE            reduce using rule 107 (statement -> assert_statement .)


state 132

    (108) statement -> print_statement .

    ID              reduce using rule 108 (statement -> print_statement .)
    LBRACK          reduce using rule 108 (statement -> print_statement .)
    IF              reduce using rule 108 (statement -> print_statement .)
    WHILE           reduce using rule 108 (statement -> print_statement .)
    FOR             reduce using rule 108 (statement -> print_statement .)
    BREAK           reduce using rule 108 (statement -> print_statement .)
    RETURN          reduce using rule 108 (statement -> print_statement .)
    ASSERT          reduce using rule 108 (statement -> print_statement .)
    PRINT           reduce using rule 108 (statement -> print_statement .)
    READ            reduce using rule 108 (statement -> print_statement .)
    LPAREN          reduce using rule 108 (statement -> print_statement .)
    PP              reduce using rule 108 (statement -> print_statement .)
    MM              reduce using rule 108 (statement -> print_statement .)
    ADDRESS         reduce using rule 108 (statement -> print_statement .)
    TIMES           reduce using rule 108 (statement -> print_statement .)
    PLUS            reduce using rule 108 (statement -> print_statement .)
    MINUS           reduce using rule 108 (statement -> print_statement .)
    NOT             reduce using rule 108 (statement -> print_statement .)
    STRING_LITERAL  reduce using rule 108 (statement -> print_statement .)
    ICONST          reduce using rule 108 (statement -> print_statement .)
    FCONST          reduce using rule 108 (statement -> print_statement .)
    SEMI            reduce using rule 108 (statement -> print_statement .)
    RBRACK          reduce using rule 108 (statement -> print_statement .)
    ELSE            reduce using rule 108 (statement -> print_statement .)


state 133

    (109) statement -> read_statement .

    ID              reduce using rule 109 (statement -> read_statement .)
    LBRACK          reduce using rule 109 (statement -> read_statement .)
    IF              reduce using rule 109 (statement -> read_statement .)
    WHILE           reduce using rule 109 (statement -> read_statement .)
    FOR             reduce using rule 109 (statement -> read_statement .)
    BREAK           reduce using rule 109 (statement -> read_statement .)
    RETURN          reduce using rule 109 (statement -> read_statement .)
    ASSERT          reduce using rule 109 (statement -> read_statement .)
    PRINT           reduce using rule 109 (statement -> read_statement .)
    READ            reduce using rule 109 (statement -> read_statement .)
    LPAREN          reduce using rule 109 (statement -> read_statement .)
    PP              reduce using rule 109 (statement -> read_statement .)
    MM              reduce using rule 109 (statement -> read_statement .)
    ADDRESS         reduce using rule 109 (statement -> read_statement .)
    TIMES           reduce using rule 109 (statement -> read_statement .)
    PLUS            reduce using rule 109 (statement -> read_statement .)
    MINUS           reduce using rule 109 (statement -> read_statement .)
    NOT             reduce using rule 109 (statement -> read_statement .)
    STRING_LITERAL  reduce using rule 109 (statement -> read_statement .)
    ICONST          reduce using rule 109 (statement -> read_statement .)
    FCONST          reduce using rule 109 (statement -> read_statement .)
    SEMI            reduce using rule 109 (statement -> read_statement .)
    RBRACK          reduce using rule 109 (statement -> read_statement .)
    ELSE            reduce using rule 109 (statement -> read_statement .)


state 134

    (125) statement -> ID . ASSIGN expr
    (57) primary_expression -> ID .

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 173
    LBRACE          reduce using rule 57 (primary_expression -> ID .)
    LPAREN          reduce using rule 57 (primary_expression -> ID .)
    PP              reduce using rule 57 (primary_expression -> ID .)
    MM              reduce using rule 57 (primary_expression -> ID .)
    TASSIGN         reduce using rule 57 (primary_expression -> ID .)
    DASSIGN         reduce using rule 57 (primary_expression -> ID .)
    MODASSIGN       reduce using rule 57 (primary_expression -> ID .)
    PASSIGN         reduce using rule 57 (primary_expression -> ID .)
    MINASSIGN       reduce using rule 57 (primary_expression -> ID .)
    PLUS            reduce using rule 57 (primary_expression -> ID .)
    MINUS           reduce using rule 57 (primary_expression -> ID .)
    TIMES           reduce using rule 57 (primary_expression -> ID .)
    DIVIDE          reduce using rule 57 (primary_expression -> ID .)
    EQUALS          reduce using rule 57 (primary_expression -> ID .)
    MOD             reduce using rule 57 (primary_expression -> ID .)
    GT              reduce using rule 57 (primary_expression -> ID .)
    GET             reduce using rule 57 (primary_expression -> ID .)
    LT              reduce using rule 57 (primary_expression -> ID .)
    LET             reduce using rule 57 (primary_expression -> ID .)
    DIFF            reduce using rule 57 (primary_expression -> ID .)
    AND             reduce using rule 57 (primary_expression -> ID .)
    OR              reduce using rule 57 (primary_expression -> ID .)
    COMMA           reduce using rule 57 (primary_expression -> ID .)
    SEMI            reduce using rule 57 (primary_expression -> ID .)

  ! ASSIGN          [ reduce using rule 57 (primary_expression -> ID .) ]


state 135

    (110) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 174


state 136

    (111) selection_statement -> IF . LPAREN expression RPAREN statement
    (112) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 175


state 137

    (65) expression_opt -> expression .
    (64) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 65 (expression_opt -> expression .)
    RPAREN          reduce using rule 65 (expression_opt -> expression .)
    COMMA           shift and go to state 161


state 138

    (113) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 176


state 139

    (114) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 177


state 140

    (116) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 178


state 141

    (117) jump_statement -> RETURN . expression_opt SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 179
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 142

    (118) assert_statement -> ASSERT . expr SEMI
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 180
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 143

    (119) print_statement -> PRINT . LPAREN expr RPAREN SEMI

    LPAREN          shift and go to state 181


state 144

    (120) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 182


state 145

    (32) expr -> expr PLUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    PLUS            reduce using rule 32 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 32 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 32 (expr -> expr PLUS expr .)
    GT              reduce using rule 32 (expr -> expr PLUS expr .)
    GET             reduce using rule 32 (expr -> expr PLUS expr .)
    LT              reduce using rule 32 (expr -> expr PLUS expr .)
    LET             reduce using rule 32 (expr -> expr PLUS expr .)
    DIFF            reduce using rule 32 (expr -> expr PLUS expr .)
    AND             reduce using rule 32 (expr -> expr PLUS expr .)
    OR              reduce using rule 32 (expr -> expr PLUS expr .)
    RBRACE          reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    SEMI            reduce using rule 32 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    RBRACK          reduce using rule 32 (expr -> expr PLUS expr .)
    ID              reduce using rule 32 (expr -> expr PLUS expr .)
    LBRACK          reduce using rule 32 (expr -> expr PLUS expr .)
    IF              reduce using rule 32 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 32 (expr -> expr PLUS expr .)
    FOR             reduce using rule 32 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 32 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 32 (expr -> expr PLUS expr .)
    ASSERT          reduce using rule 32 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 32 (expr -> expr PLUS expr .)
    READ            reduce using rule 32 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    PP              reduce using rule 32 (expr -> expr PLUS expr .)
    MM              reduce using rule 32 (expr -> expr PLUS expr .)
    ADDRESS         reduce using rule 32 (expr -> expr PLUS expr .)
    NOT             reduce using rule 32 (expr -> expr PLUS expr .)
    STRING_LITERAL  reduce using rule 32 (expr -> expr PLUS expr .)
    ICONST          reduce using rule 32 (expr -> expr PLUS expr .)
    FCONST          reduce using rule 32 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 32 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! TIMES           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 146

    (33) expr -> expr MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    PLUS            reduce using rule 33 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 33 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 33 (expr -> expr MINUS expr .)
    GT              reduce using rule 33 (expr -> expr MINUS expr .)
    GET             reduce using rule 33 (expr -> expr MINUS expr .)
    LT              reduce using rule 33 (expr -> expr MINUS expr .)
    LET             reduce using rule 33 (expr -> expr MINUS expr .)
    DIFF            reduce using rule 33 (expr -> expr MINUS expr .)
    AND             reduce using rule 33 (expr -> expr MINUS expr .)
    OR              reduce using rule 33 (expr -> expr MINUS expr .)
    RBRACE          reduce using rule 33 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 33 (expr -> expr MINUS expr .)
    SEMI            reduce using rule 33 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 33 (expr -> expr MINUS expr .)
    RBRACK          reduce using rule 33 (expr -> expr MINUS expr .)
    ID              reduce using rule 33 (expr -> expr MINUS expr .)
    LBRACK          reduce using rule 33 (expr -> expr MINUS expr .)
    IF              reduce using rule 33 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 33 (expr -> expr MINUS expr .)
    FOR             reduce using rule 33 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 33 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 33 (expr -> expr MINUS expr .)
    ASSERT          reduce using rule 33 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 33 (expr -> expr MINUS expr .)
    READ            reduce using rule 33 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 33 (expr -> expr MINUS expr .)
    PP              reduce using rule 33 (expr -> expr MINUS expr .)
    MM              reduce using rule 33 (expr -> expr MINUS expr .)
    ADDRESS         reduce using rule 33 (expr -> expr MINUS expr .)
    NOT             reduce using rule 33 (expr -> expr MINUS expr .)
    STRING_LITERAL  reduce using rule 33 (expr -> expr MINUS expr .)
    ICONST          reduce using rule 33 (expr -> expr MINUS expr .)
    FCONST          reduce using rule 33 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 33 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! TIMES           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 147

    (34) expr -> expr TIMES expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    PLUS            reduce using rule 34 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 34 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 34 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 34 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 34 (expr -> expr TIMES expr .)
    MOD             reduce using rule 34 (expr -> expr TIMES expr .)
    GT              reduce using rule 34 (expr -> expr TIMES expr .)
    GET             reduce using rule 34 (expr -> expr TIMES expr .)
    LT              reduce using rule 34 (expr -> expr TIMES expr .)
    LET             reduce using rule 34 (expr -> expr TIMES expr .)
    DIFF            reduce using rule 34 (expr -> expr TIMES expr .)
    AND             reduce using rule 34 (expr -> expr TIMES expr .)
    OR              reduce using rule 34 (expr -> expr TIMES expr .)
    RBRACE          reduce using rule 34 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 34 (expr -> expr TIMES expr .)
    SEMI            reduce using rule 34 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 34 (expr -> expr TIMES expr .)
    RBRACK          reduce using rule 34 (expr -> expr TIMES expr .)
    ID              reduce using rule 34 (expr -> expr TIMES expr .)
    LBRACK          reduce using rule 34 (expr -> expr TIMES expr .)
    IF              reduce using rule 34 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 34 (expr -> expr TIMES expr .)
    FOR             reduce using rule 34 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 34 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 34 (expr -> expr TIMES expr .)
    ASSERT          reduce using rule 34 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 34 (expr -> expr TIMES expr .)
    READ            reduce using rule 34 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 34 (expr -> expr TIMES expr .)
    PP              reduce using rule 34 (expr -> expr TIMES expr .)
    MM              reduce using rule 34 (expr -> expr TIMES expr .)
    ADDRESS         reduce using rule 34 (expr -> expr TIMES expr .)
    NOT             reduce using rule 34 (expr -> expr TIMES expr .)
    STRING_LITERAL  reduce using rule 34 (expr -> expr TIMES expr .)
    ICONST          reduce using rule 34 (expr -> expr TIMES expr .)
    FCONST          reduce using rule 34 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 34 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 148

    (35) expr -> expr DIVIDE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    PLUS            reduce using rule 35 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 35 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 35 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 35 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 35 (expr -> expr DIVIDE expr .)
    GET             reduce using rule 35 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 35 (expr -> expr DIVIDE expr .)
    LET             reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIFF            reduce using rule 35 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 35 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 35 (expr -> expr DIVIDE expr .)
    RBRACE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 35 (expr -> expr DIVIDE expr .)
    SEMI            reduce using rule 35 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 35 (expr -> expr DIVIDE expr .)
    RBRACK          reduce using rule 35 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 35 (expr -> expr DIVIDE expr .)
    LBRACK          reduce using rule 35 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 35 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 35 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 35 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 35 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 35 (expr -> expr DIVIDE expr .)
    ASSERT          reduce using rule 35 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 35 (expr -> expr DIVIDE expr .)
    READ            reduce using rule 35 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 35 (expr -> expr DIVIDE expr .)
    PP              reduce using rule 35 (expr -> expr DIVIDE expr .)
    MM              reduce using rule 35 (expr -> expr DIVIDE expr .)
    ADDRESS         reduce using rule 35 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 35 (expr -> expr DIVIDE expr .)
    STRING_LITERAL  reduce using rule 35 (expr -> expr DIVIDE expr .)
    ICONST          reduce using rule 35 (expr -> expr DIVIDE expr .)
    FCONST          reduce using rule 35 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 35 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 149

    (36) expr -> expr EQUALS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 36 (expr -> expr EQUALS expr .)
    DIFF            reduce using rule 36 (expr -> expr EQUALS expr .)
    AND             reduce using rule 36 (expr -> expr EQUALS expr .)
    OR              reduce using rule 36 (expr -> expr EQUALS expr .)
    RBRACE          reduce using rule 36 (expr -> expr EQUALS expr .)
    COMMA           reduce using rule 36 (expr -> expr EQUALS expr .)
    SEMI            reduce using rule 36 (expr -> expr EQUALS expr .)
    RPAREN          reduce using rule 36 (expr -> expr EQUALS expr .)
    RBRACK          reduce using rule 36 (expr -> expr EQUALS expr .)
    ID              reduce using rule 36 (expr -> expr EQUALS expr .)
    LBRACK          reduce using rule 36 (expr -> expr EQUALS expr .)
    IF              reduce using rule 36 (expr -> expr EQUALS expr .)
    WHILE           reduce using rule 36 (expr -> expr EQUALS expr .)
    FOR             reduce using rule 36 (expr -> expr EQUALS expr .)
    BREAK           reduce using rule 36 (expr -> expr EQUALS expr .)
    RETURN          reduce using rule 36 (expr -> expr EQUALS expr .)
    ASSERT          reduce using rule 36 (expr -> expr EQUALS expr .)
    PRINT           reduce using rule 36 (expr -> expr EQUALS expr .)
    READ            reduce using rule 36 (expr -> expr EQUALS expr .)
    LPAREN          reduce using rule 36 (expr -> expr EQUALS expr .)
    PP              reduce using rule 36 (expr -> expr EQUALS expr .)
    MM              reduce using rule 36 (expr -> expr EQUALS expr .)
    ADDRESS         reduce using rule 36 (expr -> expr EQUALS expr .)
    NOT             reduce using rule 36 (expr -> expr EQUALS expr .)
    STRING_LITERAL  reduce using rule 36 (expr -> expr EQUALS expr .)
    ICONST          reduce using rule 36 (expr -> expr EQUALS expr .)
    FCONST          reduce using rule 36 (expr -> expr EQUALS expr .)
    ELSE            reduce using rule 36 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90

  ! PLUS            [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! GT              [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! GET             [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! LT              [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! LET             [ reduce using rule 36 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 150

    (37) expr -> expr MOD expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    PLUS            reduce using rule 37 (expr -> expr MOD expr .)
    MINUS           reduce using rule 37 (expr -> expr MOD expr .)
    TIMES           reduce using rule 37 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 37 (expr -> expr MOD expr .)
    EQUALS          reduce using rule 37 (expr -> expr MOD expr .)
    MOD             reduce using rule 37 (expr -> expr MOD expr .)
    GT              reduce using rule 37 (expr -> expr MOD expr .)
    GET             reduce using rule 37 (expr -> expr MOD expr .)
    LT              reduce using rule 37 (expr -> expr MOD expr .)
    LET             reduce using rule 37 (expr -> expr MOD expr .)
    DIFF            reduce using rule 37 (expr -> expr MOD expr .)
    AND             reduce using rule 37 (expr -> expr MOD expr .)
    OR              reduce using rule 37 (expr -> expr MOD expr .)
    RBRACE          reduce using rule 37 (expr -> expr MOD expr .)
    COMMA           reduce using rule 37 (expr -> expr MOD expr .)
    SEMI            reduce using rule 37 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 37 (expr -> expr MOD expr .)
    RBRACK          reduce using rule 37 (expr -> expr MOD expr .)
    ID              reduce using rule 37 (expr -> expr MOD expr .)
    LBRACK          reduce using rule 37 (expr -> expr MOD expr .)
    IF              reduce using rule 37 (expr -> expr MOD expr .)
    WHILE           reduce using rule 37 (expr -> expr MOD expr .)
    FOR             reduce using rule 37 (expr -> expr MOD expr .)
    BREAK           reduce using rule 37 (expr -> expr MOD expr .)
    RETURN          reduce using rule 37 (expr -> expr MOD expr .)
    ASSERT          reduce using rule 37 (expr -> expr MOD expr .)
    PRINT           reduce using rule 37 (expr -> expr MOD expr .)
    READ            reduce using rule 37 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 37 (expr -> expr MOD expr .)
    PP              reduce using rule 37 (expr -> expr MOD expr .)
    MM              reduce using rule 37 (expr -> expr MOD expr .)
    ADDRESS         reduce using rule 37 (expr -> expr MOD expr .)
    NOT             reduce using rule 37 (expr -> expr MOD expr .)
    STRING_LITERAL  reduce using rule 37 (expr -> expr MOD expr .)
    ICONST          reduce using rule 37 (expr -> expr MOD expr .)
    FCONST          reduce using rule 37 (expr -> expr MOD expr .)
    ELSE            reduce using rule 37 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! MOD             [ shift and go to state 86 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 151

    (38) expr -> expr GT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 38 (expr -> expr GT expr .)
    GT              reduce using rule 38 (expr -> expr GT expr .)
    GET             reduce using rule 38 (expr -> expr GT expr .)
    LT              reduce using rule 38 (expr -> expr GT expr .)
    LET             reduce using rule 38 (expr -> expr GT expr .)
    DIFF            reduce using rule 38 (expr -> expr GT expr .)
    AND             reduce using rule 38 (expr -> expr GT expr .)
    OR              reduce using rule 38 (expr -> expr GT expr .)
    RBRACE          reduce using rule 38 (expr -> expr GT expr .)
    COMMA           reduce using rule 38 (expr -> expr GT expr .)
    SEMI            reduce using rule 38 (expr -> expr GT expr .)
    RPAREN          reduce using rule 38 (expr -> expr GT expr .)
    RBRACK          reduce using rule 38 (expr -> expr GT expr .)
    ID              reduce using rule 38 (expr -> expr GT expr .)
    LBRACK          reduce using rule 38 (expr -> expr GT expr .)
    IF              reduce using rule 38 (expr -> expr GT expr .)
    WHILE           reduce using rule 38 (expr -> expr GT expr .)
    FOR             reduce using rule 38 (expr -> expr GT expr .)
    BREAK           reduce using rule 38 (expr -> expr GT expr .)
    RETURN          reduce using rule 38 (expr -> expr GT expr .)
    ASSERT          reduce using rule 38 (expr -> expr GT expr .)
    PRINT           reduce using rule 38 (expr -> expr GT expr .)
    READ            reduce using rule 38 (expr -> expr GT expr .)
    LPAREN          reduce using rule 38 (expr -> expr GT expr .)
    PP              reduce using rule 38 (expr -> expr GT expr .)
    MM              reduce using rule 38 (expr -> expr GT expr .)
    ADDRESS         reduce using rule 38 (expr -> expr GT expr .)
    NOT             reduce using rule 38 (expr -> expr GT expr .)
    STRING_LITERAL  reduce using rule 38 (expr -> expr GT expr .)
    ICONST          reduce using rule 38 (expr -> expr GT expr .)
    FCONST          reduce using rule 38 (expr -> expr GT expr .)
    ELSE            reduce using rule 38 (expr -> expr GT expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! PLUS            [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr GT expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 152

    (39) expr -> expr GET expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 39 (expr -> expr GET expr .)
    GT              reduce using rule 39 (expr -> expr GET expr .)
    GET             reduce using rule 39 (expr -> expr GET expr .)
    LT              reduce using rule 39 (expr -> expr GET expr .)
    LET             reduce using rule 39 (expr -> expr GET expr .)
    DIFF            reduce using rule 39 (expr -> expr GET expr .)
    AND             reduce using rule 39 (expr -> expr GET expr .)
    OR              reduce using rule 39 (expr -> expr GET expr .)
    RBRACE          reduce using rule 39 (expr -> expr GET expr .)
    COMMA           reduce using rule 39 (expr -> expr GET expr .)
    SEMI            reduce using rule 39 (expr -> expr GET expr .)
    RPAREN          reduce using rule 39 (expr -> expr GET expr .)
    RBRACK          reduce using rule 39 (expr -> expr GET expr .)
    ID              reduce using rule 39 (expr -> expr GET expr .)
    LBRACK          reduce using rule 39 (expr -> expr GET expr .)
    IF              reduce using rule 39 (expr -> expr GET expr .)
    WHILE           reduce using rule 39 (expr -> expr GET expr .)
    FOR             reduce using rule 39 (expr -> expr GET expr .)
    BREAK           reduce using rule 39 (expr -> expr GET expr .)
    RETURN          reduce using rule 39 (expr -> expr GET expr .)
    ASSERT          reduce using rule 39 (expr -> expr GET expr .)
    PRINT           reduce using rule 39 (expr -> expr GET expr .)
    READ            reduce using rule 39 (expr -> expr GET expr .)
    LPAREN          reduce using rule 39 (expr -> expr GET expr .)
    PP              reduce using rule 39 (expr -> expr GET expr .)
    MM              reduce using rule 39 (expr -> expr GET expr .)
    ADDRESS         reduce using rule 39 (expr -> expr GET expr .)
    NOT             reduce using rule 39 (expr -> expr GET expr .)
    STRING_LITERAL  reduce using rule 39 (expr -> expr GET expr .)
    ICONST          reduce using rule 39 (expr -> expr GET expr .)
    FCONST          reduce using rule 39 (expr -> expr GET expr .)
    ELSE            reduce using rule 39 (expr -> expr GET expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! PLUS            [ reduce using rule 39 (expr -> expr GET expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr GET expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr GET expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr GET expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr GET expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 153

    (40) expr -> expr LT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 40 (expr -> expr LT expr .)
    GT              reduce using rule 40 (expr -> expr LT expr .)
    GET             reduce using rule 40 (expr -> expr LT expr .)
    LT              reduce using rule 40 (expr -> expr LT expr .)
    LET             reduce using rule 40 (expr -> expr LT expr .)
    DIFF            reduce using rule 40 (expr -> expr LT expr .)
    AND             reduce using rule 40 (expr -> expr LT expr .)
    OR              reduce using rule 40 (expr -> expr LT expr .)
    RBRACE          reduce using rule 40 (expr -> expr LT expr .)
    COMMA           reduce using rule 40 (expr -> expr LT expr .)
    SEMI            reduce using rule 40 (expr -> expr LT expr .)
    RPAREN          reduce using rule 40 (expr -> expr LT expr .)
    RBRACK          reduce using rule 40 (expr -> expr LT expr .)
    ID              reduce using rule 40 (expr -> expr LT expr .)
    LBRACK          reduce using rule 40 (expr -> expr LT expr .)
    IF              reduce using rule 40 (expr -> expr LT expr .)
    WHILE           reduce using rule 40 (expr -> expr LT expr .)
    FOR             reduce using rule 40 (expr -> expr LT expr .)
    BREAK           reduce using rule 40 (expr -> expr LT expr .)
    RETURN          reduce using rule 40 (expr -> expr LT expr .)
    ASSERT          reduce using rule 40 (expr -> expr LT expr .)
    PRINT           reduce using rule 40 (expr -> expr LT expr .)
    READ            reduce using rule 40 (expr -> expr LT expr .)
    LPAREN          reduce using rule 40 (expr -> expr LT expr .)
    PP              reduce using rule 40 (expr -> expr LT expr .)
    MM              reduce using rule 40 (expr -> expr LT expr .)
    ADDRESS         reduce using rule 40 (expr -> expr LT expr .)
    NOT             reduce using rule 40 (expr -> expr LT expr .)
    STRING_LITERAL  reduce using rule 40 (expr -> expr LT expr .)
    ICONST          reduce using rule 40 (expr -> expr LT expr .)
    FCONST          reduce using rule 40 (expr -> expr LT expr .)
    ELSE            reduce using rule 40 (expr -> expr LT expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! PLUS            [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> expr LT expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 154

    (41) expr -> expr LET expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 41 (expr -> expr LET expr .)
    GT              reduce using rule 41 (expr -> expr LET expr .)
    GET             reduce using rule 41 (expr -> expr LET expr .)
    LT              reduce using rule 41 (expr -> expr LET expr .)
    LET             reduce using rule 41 (expr -> expr LET expr .)
    DIFF            reduce using rule 41 (expr -> expr LET expr .)
    AND             reduce using rule 41 (expr -> expr LET expr .)
    OR              reduce using rule 41 (expr -> expr LET expr .)
    RBRACE          reduce using rule 41 (expr -> expr LET expr .)
    COMMA           reduce using rule 41 (expr -> expr LET expr .)
    SEMI            reduce using rule 41 (expr -> expr LET expr .)
    RPAREN          reduce using rule 41 (expr -> expr LET expr .)
    RBRACK          reduce using rule 41 (expr -> expr LET expr .)
    ID              reduce using rule 41 (expr -> expr LET expr .)
    LBRACK          reduce using rule 41 (expr -> expr LET expr .)
    IF              reduce using rule 41 (expr -> expr LET expr .)
    WHILE           reduce using rule 41 (expr -> expr LET expr .)
    FOR             reduce using rule 41 (expr -> expr LET expr .)
    BREAK           reduce using rule 41 (expr -> expr LET expr .)
    RETURN          reduce using rule 41 (expr -> expr LET expr .)
    ASSERT          reduce using rule 41 (expr -> expr LET expr .)
    PRINT           reduce using rule 41 (expr -> expr LET expr .)
    READ            reduce using rule 41 (expr -> expr LET expr .)
    LPAREN          reduce using rule 41 (expr -> expr LET expr .)
    PP              reduce using rule 41 (expr -> expr LET expr .)
    MM              reduce using rule 41 (expr -> expr LET expr .)
    ADDRESS         reduce using rule 41 (expr -> expr LET expr .)
    NOT             reduce using rule 41 (expr -> expr LET expr .)
    STRING_LITERAL  reduce using rule 41 (expr -> expr LET expr .)
    ICONST          reduce using rule 41 (expr -> expr LET expr .)
    FCONST          reduce using rule 41 (expr -> expr LET expr .)
    ELSE            reduce using rule 41 (expr -> expr LET expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86

  ! PLUS            [ reduce using rule 41 (expr -> expr LET expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr LET expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr LET expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr LET expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr LET expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! GT              [ shift and go to state 87 ]
  ! GET             [ shift and go to state 88 ]
  ! LT              [ shift and go to state 89 ]
  ! LET             [ shift and go to state 90 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 155

    (42) expr -> expr DIFF expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    EQUALS          reduce using rule 42 (expr -> expr DIFF expr .)
    DIFF            reduce using rule 42 (expr -> expr DIFF expr .)
    AND             reduce using rule 42 (expr -> expr DIFF expr .)
    OR              reduce using rule 42 (expr -> expr DIFF expr .)
    RBRACE          reduce using rule 42 (expr -> expr DIFF expr .)
    COMMA           reduce using rule 42 (expr -> expr DIFF expr .)
    SEMI            reduce using rule 42 (expr -> expr DIFF expr .)
    RPAREN          reduce using rule 42 (expr -> expr DIFF expr .)
    RBRACK          reduce using rule 42 (expr -> expr DIFF expr .)
    ID              reduce using rule 42 (expr -> expr DIFF expr .)
    LBRACK          reduce using rule 42 (expr -> expr DIFF expr .)
    IF              reduce using rule 42 (expr -> expr DIFF expr .)
    WHILE           reduce using rule 42 (expr -> expr DIFF expr .)
    FOR             reduce using rule 42 (expr -> expr DIFF expr .)
    BREAK           reduce using rule 42 (expr -> expr DIFF expr .)
    RETURN          reduce using rule 42 (expr -> expr DIFF expr .)
    ASSERT          reduce using rule 42 (expr -> expr DIFF expr .)
    PRINT           reduce using rule 42 (expr -> expr DIFF expr .)
    READ            reduce using rule 42 (expr -> expr DIFF expr .)
    LPAREN          reduce using rule 42 (expr -> expr DIFF expr .)
    PP              reduce using rule 42 (expr -> expr DIFF expr .)
    MM              reduce using rule 42 (expr -> expr DIFF expr .)
    ADDRESS         reduce using rule 42 (expr -> expr DIFF expr .)
    NOT             reduce using rule 42 (expr -> expr DIFF expr .)
    STRING_LITERAL  reduce using rule 42 (expr -> expr DIFF expr .)
    ICONST          reduce using rule 42 (expr -> expr DIFF expr .)
    FCONST          reduce using rule 42 (expr -> expr DIFF expr .)
    ELSE            reduce using rule 42 (expr -> expr DIFF expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90

  ! PLUS            [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! GT              [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! GET             [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! LT              [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! LET             [ reduce using rule 42 (expr -> expr DIFF expr .) ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIFF            [ shift and go to state 91 ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 156

    (43) expr -> expr AND expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    AND             reduce using rule 43 (expr -> expr AND expr .)
    OR              reduce using rule 43 (expr -> expr AND expr .)
    RBRACE          reduce using rule 43 (expr -> expr AND expr .)
    COMMA           reduce using rule 43 (expr -> expr AND expr .)
    SEMI            reduce using rule 43 (expr -> expr AND expr .)
    RPAREN          reduce using rule 43 (expr -> expr AND expr .)
    RBRACK          reduce using rule 43 (expr -> expr AND expr .)
    ID              reduce using rule 43 (expr -> expr AND expr .)
    LBRACK          reduce using rule 43 (expr -> expr AND expr .)
    IF              reduce using rule 43 (expr -> expr AND expr .)
    WHILE           reduce using rule 43 (expr -> expr AND expr .)
    FOR             reduce using rule 43 (expr -> expr AND expr .)
    BREAK           reduce using rule 43 (expr -> expr AND expr .)
    RETURN          reduce using rule 43 (expr -> expr AND expr .)
    ASSERT          reduce using rule 43 (expr -> expr AND expr .)
    PRINT           reduce using rule 43 (expr -> expr AND expr .)
    READ            reduce using rule 43 (expr -> expr AND expr .)
    LPAREN          reduce using rule 43 (expr -> expr AND expr .)
    PP              reduce using rule 43 (expr -> expr AND expr .)
    MM              reduce using rule 43 (expr -> expr AND expr .)
    ADDRESS         reduce using rule 43 (expr -> expr AND expr .)
    NOT             reduce using rule 43 (expr -> expr AND expr .)
    STRING_LITERAL  reduce using rule 43 (expr -> expr AND expr .)
    ICONST          reduce using rule 43 (expr -> expr AND expr .)
    FCONST          reduce using rule 43 (expr -> expr AND expr .)
    ELSE            reduce using rule 43 (expr -> expr AND expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91

  ! PLUS            [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! EQUALS          [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! GET             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! LET             [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! DIFF            [ reduce using rule 43 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 92 ]
  ! OR              [ shift and go to state 93 ]


state 157

    (44) expr -> expr OR expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    OR              reduce using rule 44 (expr -> expr OR expr .)
    RBRACE          reduce using rule 44 (expr -> expr OR expr .)
    COMMA           reduce using rule 44 (expr -> expr OR expr .)
    SEMI            reduce using rule 44 (expr -> expr OR expr .)
    RPAREN          reduce using rule 44 (expr -> expr OR expr .)
    RBRACK          reduce using rule 44 (expr -> expr OR expr .)
    ID              reduce using rule 44 (expr -> expr OR expr .)
    LBRACK          reduce using rule 44 (expr -> expr OR expr .)
    IF              reduce using rule 44 (expr -> expr OR expr .)
    WHILE           reduce using rule 44 (expr -> expr OR expr .)
    FOR             reduce using rule 44 (expr -> expr OR expr .)
    BREAK           reduce using rule 44 (expr -> expr OR expr .)
    RETURN          reduce using rule 44 (expr -> expr OR expr .)
    ASSERT          reduce using rule 44 (expr -> expr OR expr .)
    PRINT           reduce using rule 44 (expr -> expr OR expr .)
    READ            reduce using rule 44 (expr -> expr OR expr .)
    LPAREN          reduce using rule 44 (expr -> expr OR expr .)
    PP              reduce using rule 44 (expr -> expr OR expr .)
    MM              reduce using rule 44 (expr -> expr OR expr .)
    ADDRESS         reduce using rule 44 (expr -> expr OR expr .)
    NOT             reduce using rule 44 (expr -> expr OR expr .)
    STRING_LITERAL  reduce using rule 44 (expr -> expr OR expr .)
    ICONST          reduce using rule 44 (expr -> expr OR expr .)
    FCONST          reduce using rule 44 (expr -> expr OR expr .)
    ELSE            reduce using rule 44 (expr -> expr OR expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92

  ! PLUS            [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! EQUALS          [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! GET             [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! LET             [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! DIFF            [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 44 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 93 ]


state 158

    (126) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    GET             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    LET             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    DIFF            reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    RBRACK          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    LBRACK          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    BREAK           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    RETURN          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    ASSERT          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    PRINT           reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    READ            reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    PP              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    MM              reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    ADDRESS         reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    STRING_LITERAL  reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    ICONST          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    FCONST          reduce using rule 126 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 126 (expr -> LPAREN expr RPAREN .)


state 159

    (46) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 107
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    cast_expression                shift and go to state 183
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 160

    (60) primary_expression -> LPAREN expression RPAREN .

    LBRACE          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    PP              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    MM              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    GET             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    TASSIGN         reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    DASSIGN         reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    PASSIGN         reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    MINASSIGN       reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    RBRACK          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    LBRACK          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    READ            reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ADDRESS         reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ICONST          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    FCONST          reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 60 (primary_expression -> LPAREN expression RPAREN .)


state 161

    (64) expression -> expression COMMA . assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    assignment_expression          shift and go to state 184
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 162

    (52) postfix_expression -> postfix_expression LBRACE expression . RBRACE
    (64) expression -> expression . COMMA assignment_expression

    RBRACE          shift and go to state 185
    COMMA           shift and go to state 161


state 163

    (54) postfix_expression -> postfix_expression LBRACE RBRACE .

    LBRACE          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    LPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    PP              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    MM              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    PLUS            reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    MINUS           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    TIMES           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    DIVIDE          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    EQUALS          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    MOD             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    GT              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    GET             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    LT              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    LET             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    DIFF            reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    AND             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    OR              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    RBRACE          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ASSIGN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    TASSIGN         reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    DASSIGN         reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    MODASSIGN       reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    PASSIGN         reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    MINASSIGN       reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    COMMA           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    SEMI            reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    RPAREN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    RBRACK          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ID              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    LBRACK          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    IF              reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    WHILE           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    FOR             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    BREAK           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    RETURN          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ASSERT          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    PRINT           reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    READ            reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ADDRESS         reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    NOT             reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    STRING_LITERAL  reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ICONST          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    FCONST          reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)
    ELSE            reduce using rule 54 (postfix_expression -> postfix_expression LBRACE RBRACE .)


state 164

    (53) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (70) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 186
    COMMA           shift and go to state 187


state 165

    (69) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 69 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 69 (argument_expression -> assignment_expression .)


state 166

    (83) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 83 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 83 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 167

    (97) initializer -> LBRACK initializer_list RBRACK .

    COMMA           reduce using rule 97 (initializer -> LBRACK initializer_list RBRACK .)
    SEMI            reduce using rule 97 (initializer -> LBRACK initializer_list RBRACK .)
    RBRACK          reduce using rule 97 (initializer -> LBRACK initializer_list RBRACK .)


state 168

    (98) initializer -> LBRACK initializer_list COMMA . RBRACK
    (100) initializer_list -> initializer_list COMMA . initializer
    (96) initializer -> . assignment_expression
    (97) initializer -> . LBRACK initializer_list RBRACK
    (98) initializer -> . LBRACK initializer_list COMMA RBRACK
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RBRACK          shift and go to state 188
    LBRACK          shift and go to state 76
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    initializer                    shift and go to state 189
    assignment_expression          shift and go to state 75
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 169

    (68) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACK          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 68 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 170

    (101) compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .

    VOID            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    CHAR            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    INT             reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FLOAT           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    TIMES           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ID              reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    LPAREN          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    $end            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    LBRACK          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    IF              reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    WHILE           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FOR             reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    BREAK           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    RETURN          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ASSERT          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PRINT           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    READ            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PP              reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    MM              reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ADDRESS         reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    PLUS            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    MINUS           reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    NOT             reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    STRING_LITERAL  reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ICONST          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    FCONST          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    SEMI            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    RBRACK          reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)
    ELSE            reduce using rule 101 (compound_statement -> LBRACK declaration_list_opt statement_list_opt RBRACK .)


state 171

    (121) statement_list -> statement_list statement .

    ID              reduce using rule 121 (statement_list -> statement_list statement .)
    LBRACK          reduce using rule 121 (statement_list -> statement_list statement .)
    IF              reduce using rule 121 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 121 (statement_list -> statement_list statement .)
    FOR             reduce using rule 121 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 121 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 121 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 121 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 121 (statement_list -> statement_list statement .)
    READ            reduce using rule 121 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 121 (statement_list -> statement_list statement .)
    PP              reduce using rule 121 (statement_list -> statement_list statement .)
    MM              reduce using rule 121 (statement_list -> statement_list statement .)
    ADDRESS         reduce using rule 121 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 121 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 121 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 121 (statement_list -> statement_list statement .)
    NOT             reduce using rule 121 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 121 (statement_list -> statement_list statement .)
    ICONST          reduce using rule 121 (statement_list -> statement_list statement .)
    FCONST          reduce using rule 121 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 121 (statement_list -> statement_list statement .)
    RBRACK          reduce using rule 121 (statement_list -> statement_list statement .)


state 172

    (66) expression_opt -> empty .

    SEMI            reduce using rule 66 (expression_opt -> empty .)
    RPAREN          reduce using rule 66 (expression_opt -> empty .)


state 173

    (125) statement -> ID ASSIGN . expr
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 190
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 174

    (110) expression_statement -> expression_opt SEMI .

    ID              reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    LBRACK          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    IF              reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    PP              reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    MM              reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    ICONST          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    FCONST          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    RBRACK          reduce using rule 110 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 110 (expression_statement -> expression_opt SEMI .)


state 175

    (111) selection_statement -> IF LPAREN . expression RPAREN statement
    (112) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 191
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 176

    (113) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 192
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 177

    (114) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (85) declaration -> . type_specifier init_declarator_list_opt SEMI
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 193
    declaration                    shift and go to state 194
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    type_specifier                 shift and go to state 29
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 178

    (116) jump_statement -> BREAK SEMI .

    ID              reduce using rule 116 (jump_statement -> BREAK SEMI .)
    LBRACK          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 116 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 116 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 116 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 116 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 116 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 116 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    PP              reduce using rule 116 (jump_statement -> BREAK SEMI .)
    MM              reduce using rule 116 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 116 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 116 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 116 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 116 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 116 (jump_statement -> BREAK SEMI .)
    STRING_LITERAL  reduce using rule 116 (jump_statement -> BREAK SEMI .)
    ICONST          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    FCONST          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 116 (jump_statement -> BREAK SEMI .)
    RBRACK          reduce using rule 116 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 116 (jump_statement -> BREAK SEMI .)


state 179

    (117) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 195


state 180

    (118) assert_statement -> ASSERT expr . SEMI
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    SEMI            shift and go to state 196
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93


state 181

    (119) print_statement -> PRINT LPAREN . expr RPAREN SEMI
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expr                           shift and go to state 197
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 52
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 182

    (120) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (69) argument_expression -> . assignment_expression
    (70) argument_expression -> . argument_expression COMMA assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    argument_expression            shift and go to state 198
    assignment_expression          shift and go to state 165
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 183

    (46) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    PLUS            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMES           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GET             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LET             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TASSIGN         reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DASSIGN         reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PASSIGN         reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINASSIGN       reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACK          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ID              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LBRACK          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    IF              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    WHILE           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FOR             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    BREAK           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RETURN          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSERT          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PRINT           reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    READ            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LPAREN          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PP              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MM              reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ADDRESS         reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NOT             reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    STRING_LITERAL  reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ICONST          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    FCONST          reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ELSE            reduce using rule 46 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 184

    (64) expression -> expression COMMA assignment_expression .

    RPAREN          reduce using rule 64 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 64 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 64 (expression -> expression COMMA assignment_expression .)
    RBRACE          reduce using rule 64 (expression -> expression COMMA assignment_expression .)


state 185

    (52) postfix_expression -> postfix_expression LBRACE expression RBRACE .

    LBRACE          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LPAREN          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PP              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MM              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PLUS            reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MINUS           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    TIMES           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    EQUALS          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MOD             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    GT              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    GET             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LT              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LET             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DIFF            reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    AND             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    OR              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RBRACE          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ASSIGN          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    TASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    DASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MODASSIGN       reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PASSIGN         reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    MINASSIGN       reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    COMMA           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    SEMI            reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RPAREN          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RBRACK          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ID              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    LBRACK          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    IF              reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    WHILE           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    FOR             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    BREAK           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    RETURN          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ASSERT          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    PRINT           reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    READ            reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ADDRESS         reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    NOT             reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    STRING_LITERAL  reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ICONST          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    FCONST          reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)
    ELSE            reduce using rule 52 (postfix_expression -> postfix_expression LBRACE expression RBRACE .)


state 186

    (53) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACE          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PP              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MM              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GET             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LET             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIFF            reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODASSIGN       reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PASSIGN         reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINASSIGN       reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACK          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ID              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LBRACK          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    IF              reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    WHILE           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FOR             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    BREAK           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RETURN          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSERT          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PRINT           reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    READ            reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ADDRESS         reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NOT             reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    STRING_LITERAL  reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ICONST          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    FCONST          reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ELSE            reduce using rule 53 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 187

    (70) argument_expression -> argument_expression COMMA . assignment_expression
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    assignment_expression          shift and go to state 199
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 188

    (98) initializer -> LBRACK initializer_list COMMA RBRACK .

    COMMA           reduce using rule 98 (initializer -> LBRACK initializer_list COMMA RBRACK .)
    SEMI            reduce using rule 98 (initializer -> LBRACK initializer_list COMMA RBRACK .)
    RBRACK          reduce using rule 98 (initializer -> LBRACK initializer_list COMMA RBRACK .)


state 189

    (100) initializer_list -> initializer_list COMMA initializer .

    RBRACK          reduce using rule 100 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 100 (initializer_list -> initializer_list COMMA initializer .)


state 190

    (125) statement -> ID ASSIGN expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 125 (statement -> ID ASSIGN expr .)
    LBRACK          reduce using rule 125 (statement -> ID ASSIGN expr .)
    IF              reduce using rule 125 (statement -> ID ASSIGN expr .)
    WHILE           reduce using rule 125 (statement -> ID ASSIGN expr .)
    FOR             reduce using rule 125 (statement -> ID ASSIGN expr .)
    BREAK           reduce using rule 125 (statement -> ID ASSIGN expr .)
    RETURN          reduce using rule 125 (statement -> ID ASSIGN expr .)
    ASSERT          reduce using rule 125 (statement -> ID ASSIGN expr .)
    PRINT           reduce using rule 125 (statement -> ID ASSIGN expr .)
    READ            reduce using rule 125 (statement -> ID ASSIGN expr .)
    LPAREN          reduce using rule 125 (statement -> ID ASSIGN expr .)
    PP              reduce using rule 125 (statement -> ID ASSIGN expr .)
    MM              reduce using rule 125 (statement -> ID ASSIGN expr .)
    ADDRESS         reduce using rule 125 (statement -> ID ASSIGN expr .)
    NOT             reduce using rule 125 (statement -> ID ASSIGN expr .)
    STRING_LITERAL  reduce using rule 125 (statement -> ID ASSIGN expr .)
    ICONST          reduce using rule 125 (statement -> ID ASSIGN expr .)
    FCONST          reduce using rule 125 (statement -> ID ASSIGN expr .)
    SEMI            reduce using rule 125 (statement -> ID ASSIGN expr .)
    RBRACK          reduce using rule 125 (statement -> ID ASSIGN expr .)
    ELSE            reduce using rule 125 (statement -> ID ASSIGN expr .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93

  ! TIMES           [ reduce using rule 125 (statement -> ID ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 125 (statement -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 125 (statement -> ID ASSIGN expr .) ]


state 191

    (111) selection_statement -> IF LPAREN expression . RPAREN statement
    (112) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (64) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 161


state 192

    (113) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (64) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 201
    COMMA           shift and go to state 161


state 193

    (114) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 202


state 194

    (115) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 203
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 195

    (117) jump_statement -> RETURN expression_opt SEMI .

    ID              reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACK          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    PP              reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    MM              reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    STRING_LITERAL  reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    ICONST          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    FCONST          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    RBRACK          reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 117 (jump_statement -> RETURN expression_opt SEMI .)


state 196

    (118) assert_statement -> ASSERT expr SEMI .

    ID              reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    LBRACK          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    IF              reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    WHILE           reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    FOR             reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    BREAK           reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    RETURN          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    ASSERT          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    PRINT           reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    READ            reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    LPAREN          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    PP              reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    MM              reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    ADDRESS         reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    TIMES           reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    PLUS            reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    MINUS           reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    NOT             reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    STRING_LITERAL  reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    ICONST          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    FCONST          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    SEMI            reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    RBRACK          reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)
    ELSE            reduce using rule 118 (assert_statement -> ASSERT expr SEMI .)


state 197

    (119) print_statement -> PRINT LPAREN expr . RPAREN SEMI
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . EQUALS expr
    (37) expr -> expr . MOD expr
    (38) expr -> expr . GT expr
    (39) expr -> expr . GET expr
    (40) expr -> expr . LT expr
    (41) expr -> expr . LET expr
    (42) expr -> expr . DIFF expr
    (43) expr -> expr . AND expr
    (44) expr -> expr . OR expr

    RPAREN          shift and go to state 204
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIVIDE          shift and go to state 84
    EQUALS          shift and go to state 85
    MOD             shift and go to state 86
    GT              shift and go to state 87
    GET             shift and go to state 88
    LT              shift and go to state 89
    LET             shift and go to state 90
    DIFF            shift and go to state 91
    AND             shift and go to state 92
    OR              shift and go to state 93


state 198

    (120) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (70) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 205
    COMMA           shift and go to state 187


state 199

    (70) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 70 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 70 (argument_expression -> argument_expression COMMA assignment_expression .)


state 200

    (111) selection_statement -> IF LPAREN expression RPAREN . statement
    (112) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 137
    statement                      shift and go to state 206
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression_opt                 shift and go to state 135
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 201

    (113) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 137
    statement                      shift and go to state 207
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression_opt                 shift and go to state 135
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 202

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 208
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 203

    (115) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 209


state 204

    (119) print_statement -> PRINT LPAREN expr RPAREN . SEMI

    SEMI            shift and go to state 210


state 205

    (120) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 211


state 206

    (111) selection_statement -> IF LPAREN expression RPAREN statement .
    (112) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACK          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PP              reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MM              reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACK          reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 212

  ! ELSE            [ reduce using rule 111 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 207

    (113) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    ID              reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACK          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PP              reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MM              reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_LITERAL  reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ICONST          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FCONST          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACK          reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 113 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 208

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 213


state 209

    (115) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 214
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 210

    (119) print_statement -> PRINT LPAREN expr RPAREN SEMI .

    ID              reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    LBRACK          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    IF              reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    WHILE           reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    FOR             reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    BREAK           reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RETURN          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ASSERT          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PRINT           reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    READ            reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    LPAREN          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PP              reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    MM              reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ADDRESS         reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    TIMES           reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    PLUS            reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    MINUS           reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    NOT             reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ICONST          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    FCONST          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    SEMI            reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    RBRACK          reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)
    ELSE            reduce using rule 119 (print_statement -> PRINT LPAREN expr RPAREN SEMI .)


state 211

    (120) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    ID              reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACK          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PP              reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MM              reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_LITERAL  reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ICONST          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FCONST          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACK          reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 120 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 212

    (112) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression                     shift and go to state 137
    statement                      shift and go to state 215
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression_opt                 shift and go to state 135
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 213

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    RPAREN          reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    ID              shift and go to state 60
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 216
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    expr                           shift and go to state 77
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 214

    (115) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 217


state 215

    (112) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    ID              reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACK          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PP              reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MM              reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_LITERAL  reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ICONST          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FCONST          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACK          reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 112 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 216

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 218


state 217

    (115) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 135
    statement                      shift and go to state 219
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 218

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (102) statement -> . expression_statement
    (103) statement -> . compound_statement
    (104) statement -> . selection_statement
    (105) statement -> . iteration_statement
    (106) statement -> . jump_statement
    (107) statement -> . assert_statement
    (108) statement -> . print_statement
    (109) statement -> . read_statement
    (125) statement -> . ID ASSIGN expr
    (110) expression_statement -> . expression_opt SEMI
    (101) compound_statement -> . LBRACK declaration_list_opt statement_list_opt RBRACK
    (111) selection_statement -> . IF LPAREN expression RPAREN statement
    (112) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (113) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (114) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (115) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (116) jump_statement -> . BREAK SEMI
    (117) jump_statement -> . RETURN expression_opt SEMI
    (118) assert_statement -> . ASSERT expr SEMI
    (119) print_statement -> . PRINT LPAREN expr RPAREN SEMI
    (120) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (65) expression_opt -> . expression
    (66) expression_opt -> . empty
    (63) expression -> . assignment_expression
    (64) expression -> . expression COMMA assignment_expression
    (1) empty -> .
    (67) assignment_expression -> . expr
    (68) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (31) expr -> . cast_expression
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr EQUALS expr
    (37) expr -> . expr MOD expr
    (38) expr -> . expr GT expr
    (39) expr -> . expr GET expr
    (40) expr -> . expr LT expr
    (41) expr -> . expr LET expr
    (42) expr -> . expr DIFF expr
    (43) expr -> . expr AND expr
    (44) expr -> . expr OR expr
    (126) expr -> . LPAREN expr RPAREN
    (47) unary_expression -> . postfix_expression
    (48) unary_expression -> . PP unary_expression
    (49) unary_expression -> . MM unary_expression
    (50) unary_expression -> . unary_operator cast_expression
    (45) cast_expression -> . unary_expression
    (46) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (51) postfix_expression -> . primary_expression
    (52) postfix_expression -> . postfix_expression LBRACE expression RBRACE
    (53) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (54) postfix_expression -> . postfix_expression LBRACE RBRACE
    (55) postfix_expression -> . postfix_expression PP
    (56) postfix_expression -> . postfix_expression MM
    (77) unary_operator -> . ADDRESS
    (78) unary_operator -> . TIMES
    (79) unary_operator -> . PLUS
    (80) unary_operator -> . MINUS
    (81) unary_operator -> . NOT
    (57) primary_expression -> . ID
    (58) primary_expression -> . constant
    (59) primary_expression -> . STRING_LITERAL
    (60) primary_expression -> . LPAREN expression RPAREN
    (61) constant -> . ICONST
    (62) constant -> . FCONST

    ID              shift and go to state 134
    LBRACK          shift and go to state 41
    IF              shift and go to state 136
    WHILE           shift and go to state 138
    FOR             shift and go to state 139
    BREAK           shift and go to state 140
    RETURN          shift and go to state 141
    ASSERT          shift and go to state 142
    PRINT           shift and go to state 143
    READ            shift and go to state 144
    SEMI            reduce using rule 1 (empty -> .)
    LPAREN          shift and go to state 51
    PP              shift and go to state 54
    MM              shift and go to state 55
    ADDRESS         shift and go to state 58
    TIMES           shift and go to state 50
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    NOT             shift and go to state 59
    STRING_LITERAL  shift and go to state 62
    ICONST          shift and go to state 63
    FCONST          shift and go to state 64

    expression_opt                 shift and go to state 135
    statement                      shift and go to state 220
    expression_statement           shift and go to state 126
    compound_statement             shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    assert_statement               shift and go to state 131
    print_statement                shift and go to state 132
    read_statement                 shift and go to state 133
    expr                           shift and go to state 77
    expression                     shift and go to state 137
    empty                          shift and go to state 172
    assignment_expression          shift and go to state 97
    unary_expression               shift and go to state 78
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    constant                       shift and go to state 61

state 219

    (115) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACK          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PP              reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MM              reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACK          reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 115 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 220

    (114) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    ID              reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACK          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PP              reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MM              reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_LITERAL  reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ICONST          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FCONST          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACK          reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 114 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TIMES in state 7 resolved as shift
WARNING: shift/reduce conflict for ID in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for PP in state 53 resolved as shift
WARNING: shift/reduce conflict for MM in state 53 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 190 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 190 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 190 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 206 resolved as shift
