    lex.py: 924:lex: tokens   = ('ASSERT', 'BREAK', 'CHAR', 'ELSE', 'FLOAT', 'FOR', 'IF', 'INT', 'PRINT', 'READ', 'RETURN', 'VOID', 'WHILE', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'EQUALS', 'MOD', 'GT', 'GET', 'LT', 'LET', 'DIFF', 'AND', 'OR', 'PP', 'MM', 'ADDRESS', 'NOT', 'ICONST', 'FCONST', 'CCONST', 'ASSIGN', 'TASSIGN', 'DASSIGN', 'MODASSIGN', 'PASSIGN', 'MINASSIGN', 'ID', 'LPAREN', 'RPAREN', 'RBRACE', 'LBRACE', 'RBRACK', 'LBRACK', 'SEMI', 'STRING_LITERAL', 'UNMATCHEDQUOTE', 'ERROR', 'CCOMMENT', 'CPPCOMMENT', 'UNTERMCOMMENT', 'COMMA')
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_CCOMMENT -> '/\*(.|\n)*?\*/' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_UNTERMCOMMENT -> '/\*(.|\n)*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_STRING_LITERAL -> '\"(.|\n)*?\"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_UNMATCHEDQUOTE -> '\"(.|\n)*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_CPPCOMMENT -> '//.*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ID -> '[a-zA-Z_][a-zA-Z_0-9]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_newline -> '\n+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_FCONST -> '([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_CCONST -> '[a-zA-Z]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ICONST -> '[0-9]+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND -> '\&\&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DASSIGN -> '\/\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIFF -> '\!\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUALS -> '\=\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINASSIGN -> '\-\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MM -> '\-\-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MODASSIGN -> '\%\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR -> '\|\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PASSIGN -> '\+\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PP -> '\+\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TASSIGN -> '\*\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GET -> '>\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LET -> '<\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ADDRESS -> '\&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ASSIGN -> '\=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LBRACE -> '\{' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LBRACK -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MOD -> '\%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT -> '\!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RBRACE -> '\}' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RBRACK -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMI -> '\;' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TIMES -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GT -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LT -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '-' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_CCOMMENT>/\*(.|\n)*?\*/)|(?P<t_UNTERMCOMMENT>/\*(.|\n)*)|(?P<t_STRING_LITERAL>\"(.|\n)*?\")|(?P<t_UNMATCHEDQUOTE>\"(.|\n)*)|(?P<t_CPPCOMMENT>//.*)|(?P<t_COMMA>,)|(?P<t_ID>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<t_newline>\n+)|(?P<t_FCONST>([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+))|(?P<t_CCONST>[a-zA-Z])|(?P<t_ICONST>[0-9]+)|(?P<t_AND>\&\&)|(?P<t_DASSIGN>\/\=)|(?P<t_DIFF>\!\=)|(?P<t_EQUALS>\=\=)|(?P<t_MINASSIGN>\-\=)|(?P<t_MM>\-\-)|(?P<t_MODASSIGN>\%\=)|(?P<t_OR>\|\|)|(?P<t_PASSIGN>\+\=)|(?P<t_PP>\+\+)|(?P<t_TASSIGN>\*\=)|(?P<t_GET>>\=)|(?P<t_LET><\=)|(?P<t_ADDRESS>\&)|(?P<t_ASSIGN>\=)|(?P<t_LBRACE>\{)|(?P<t_LBRACK>\[)|(?P<t_LPAREN>\()|(?P<t_MOD>\%)|(?P<t_NOT>\!)|(?P<t_PLUS>\+)|(?P<t_RBRACE>\})|(?P<t_RBRACK>\])|(?P<t_RPAREN>\))|(?P<t_SEMI>\;)|(?P<t_TIMES>\*)|(?P<t_DIVIDE>/)|(?P<t_GT>>)|(?P<t_LT><)|(?P<t_MINUS>-)'
